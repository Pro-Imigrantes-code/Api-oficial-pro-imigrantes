"use strict";

require("source-map-support/register");

var _sigaaSearchTeacherResult = require("../../search/sigaa-search-teacher-result");

var _sigaaMain = require("../../sigaa-main");

var _url = require("url");

test('if sigaa search loads campus list', async () => {
  const sigaa = new _sigaaMain.Sigaa({
    url: 'https://sigaa.ifsc.edu.br',
    institution: "IFSC"
  });
  const list = await sigaa.search.teacher().getCampusList();

  for (const campus of list) {
    expect(campus.name).toMatch(/CAMPUS|INSTITUTO|COORDENADORIA|DIRETORIA|TODOS/g);
    expect(campus.name).toMatch(/^([A-Z]|[0-9]|[ÁÉÓÍÚÃÇÂÊÎÔÛ. \-–()])+$/);
    expect(campus.value).toMatch(/^[0-9]+$/g);
  }

  sigaa.close();
}, 30000);
test('if sigaa search returns results', async () => {
  const sigaa = new _sigaaMain.Sigaa({
    url: 'https://sigaa.ifsc.edu.br',
    institution: "IFSC"
  });
  const list = await sigaa.search.teacher().search('José');

  for (const teacher of list) {
    expect(teacher).toBeInstanceOf(_sigaaSearchTeacherResult.SigaaSearchTeacherResult);
    expect(teacher.name).toMatch(/^([A-Z]|[ÁÉÓÍÚÃÇÂÊÎÔÛ ])+$/);
  }

  sigaa.close();
}, 30000);
test('if sigaa search returns emails', async () => {
  const sigaa = new _sigaaMain.Sigaa({
    url: 'https://sigaa.ifsc.edu.br',
    institution: "IFSC"
  });
  const list = (await sigaa.search.teacher().search('José')).slice(0, 5);
  expect(list.length).toBe(5);

  for (const teacher of list) {
    expect(teacher).toBeInstanceOf(_sigaaSearchTeacherResult.SigaaSearchTeacherResult);
    const email = await teacher.getEmail();
    let someEmail;

    switch (typeof email) {
      case 'string':
        someEmail = email;
        expect(email).toMatch(/[^@]+@(aluno\.)?ifsc\.edu\.br/g);
        break;

      default:
        expect(email).toBeNull();
    }

    expect(someEmail).toMatch(/[^@]+@(aluno\.)?ifsc\.edu\.br/g);
  }

  sigaa.close();
}, 300000);
test('if sigaa search returns profile picture url', async () => {
  const sigaa = new _sigaaMain.Sigaa({
    url: 'https://sigaa.ifsc.edu.br',
    institution: 'IFSC'
  });
  const list = (await sigaa.search.teacher().search('José')).slice(0, 10);

  for (const teacher of list) {
    expect(teacher).toBeInstanceOf(_sigaaSearchTeacherResult.SigaaSearchTeacherResult);
    const profilePictureURL = await teacher.profilePictureURL;

    if (profilePictureURL) {
      expect(profilePictureURL).toBeInstanceOf(_url.URL);
      expect(profilePictureURL.href).toMatch(/[\s\S]+?verFoto?[\s\S]+?/g);
    } else {
      expect(profilePictureURL).toBeNull;
    }
  }

  sigaa.close();
}, 300000);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0cy9zZWFyY2gvdGVhY2hlci5zcGVjLnRzIl0sIm5hbWVzIjpbInRlc3QiLCJzaWdhYSIsIlNpZ2FhIiwidXJsIiwiaW5zdGl0dXRpb24iLCJsaXN0Iiwic2VhcmNoIiwidGVhY2hlciIsImdldENhbXB1c0xpc3QiLCJjYW1wdXMiLCJleHBlY3QiLCJuYW1lIiwidG9NYXRjaCIsInZhbHVlIiwiY2xvc2UiLCJ0b0JlSW5zdGFuY2VPZiIsIlNpZ2FhU2VhcmNoVGVhY2hlclJlc3VsdCIsInNsaWNlIiwibGVuZ3RoIiwidG9CZSIsImVtYWlsIiwiZ2V0RW1haWwiLCJzb21lRW1haWwiLCJ0b0JlTnVsbCIsInByb2ZpbGVQaWN0dXJlVVJMIiwiVVJMIiwiaHJlZiJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUNBOztBQUNBOztBQUdBQSxJQUFJLENBQUMsbUNBQUQsRUFBc0MsWUFBWTtBQUNwRCxRQUFNQyxLQUFLLEdBQUcsSUFBSUMsZ0JBQUosQ0FBVTtBQUN0QkMsSUFBQUEsR0FBRyxFQUFFLDJCQURpQjtBQUV0QkMsSUFBQUEsV0FBVyxFQUFFO0FBRlMsR0FBVixDQUFkO0FBSUEsUUFBTUMsSUFBSSxHQUFHLE1BQU1KLEtBQUssQ0FBQ0ssTUFBTixDQUFhQyxPQUFiLEdBQXVCQyxhQUF2QixFQUFuQjs7QUFDQSxPQUFLLE1BQU1DLE1BQVgsSUFBcUJKLElBQXJCLEVBQTJCO0FBQ3pCSyxJQUFBQSxNQUFNLENBQUNELE1BQU0sQ0FBQ0UsSUFBUixDQUFOLENBQW9CQyxPQUFwQixDQUNFLGlEQURGO0FBR0FGLElBQUFBLE1BQU0sQ0FBQ0QsTUFBTSxDQUFDRSxJQUFSLENBQU4sQ0FBb0JDLE9BQXBCLENBQTRCLHdDQUE1QjtBQUNBRixJQUFBQSxNQUFNLENBQUNELE1BQU0sQ0FBQ0ksS0FBUixDQUFOLENBQXFCRCxPQUFyQixDQUE2QixXQUE3QjtBQUNEOztBQUNEWCxFQUFBQSxLQUFLLENBQUNhLEtBQU47QUFDRCxDQWRHLEVB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LE1BQU0sQ0FBQ2MsaUJBQWlCLENBQUNFLElBQW5CLENBQU4sQ0FBK0JkLE9BQS9CLENBQXVDLDJCQUF2QztBQUNELEtBSEQsTUFHTztBQUNMRixNQUFBQSxNQUFNLENBQUNjLGlCQUFELENBQU4sQ0FBMEJELFFBQTFCO0FBQ0Q7QUFDRjs7QUFDRHRCLEVBQUFBLEtBQUssQ0FBQ2EsS0FBTjtBQUNELENBakJHLEVBaUJELE1BakJDLENBQUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTaWdhYVNlYXJjaFRlYWNoZXJSZXN1bHQgfSBmcm9tICdAc2VhcmNoL3NpZ2FhLXNlYXJjaC10ZWFjaGVyLXJlc3VsdCc7XG5pbXBvcnQgeyBTaWdhYSB9IGZyb20gJy4uLy4uL3NpZ2FhLW1haW4nO1xuaW1wb3J0IHsgVVJMIH0gZnJvbSAndXJsJztcblxuXG50ZXN0KCdpZiBzaWdhYSBzZWFyY2ggbG9hZHMgY2FtcHVzIGxpc3QnLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHNpZ2FhID0gbmV3IFNpZ2FhKHtcbiAgICB1cmw6ICdodHRwczovL3NpZ2FhLmlmc2MuZWR1LmJyJyxcbiAgICBpbnN0aXR1dGlvbjogXCJJRlNDXCJcbiAgfSk7XG4gIGNvbnN0IGxpc3QgPSBhd2FpdCBzaWdhYS5zZWFyY2gudGVhY2hlcigpLmdldENhbXB1c0xpc3QoKTtcbiAgZm9yIChjb25zdCBjYW1wdXMgb2YgbGlzdCkge1xuICAgIGV4cGVjdChjYW1wdXMubmFtZSkudG9NYXRjaChcbiAgICAgIC9DQU1QVVN8SU5TVElUVVRPfENPT1JERU5BRE9SSUF8RElSRVRPUklBfFRPRE9TL2dcbiAgICApO1xuICAgIGV4cGVjdChjYW1wdXMubmFtZSkudG9NYXRjaCgvXihbQS1aXXxbMC05XXxbw4HDicOTw43DmsODw4fDgsOKw47DlMObLiBcXC3igJMoKV0pKyQvKTtcbiAgICBleHBlY3QoY2FtcHVzLnZhbHVlKS50b01hdGNoKC9eWzAtOV0rJC9nKTtcbiAgfVxuICBzaWdhYS5jbG9zZSgpO1xufSwgMzAwMDApO1xuXG50ZXN0KCdpZiBzaWdhYSBzZWFyY2ggcmV0dXJucyByZXN1bHRzJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBzaWdhYSA9IG5ldyBTaWdhYSh7XG4gICAgdXJsOiAnaHR0cHM6Ly9zaWdhYS5pZnNjLmVkdS5icicsXG4gICAgaW5zdGl0dXRpb246IFwiSUZTQ1wiXG4gIH0pO1xuICBjb25zdCBsaXN0ID0gYXdhaXQgc2lnYWEuc2VhcmNoLnRlYWNoZXIoKS5zZWFyY2goJ0pvc8OpJyk7XG4gIGZvciAoY29uc3QgdGVhY2hlciBvZiBsaXN0KSB7XG4gICAgZXhwZWN0KHRlYWNoZXIpLnRvQmVJbnN0YW5jZU9mKFNpZ2FhU2VhcmNoVGVhY2hlclJlc3VsdCk7XG4gICAgZXhwZWN0KHRlYWNoZXIubmFtZSkudG9NYXRjaCgvXihbQS1aXXxbw4HDicOTw43DmsODw4fDgsOKw47DlMObIF0pKyQvKTtcbiAgfVxuICBzaWdhYS5jbG9zZSgpO1xufSwgMzAwMDApO1xuXG50ZXN0KCdpZiBzaWdhYSBzZWFyY2ggcmV0dXJucyBlbWFpbHMnLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHNpZ2FhID0gbmV3IFNpZ2FhKHtcbiAgICB1cmw6ICdodHRwczovL3NpZ2FhLmlmc2MuZWR1LmJyJyxcbiAgICBpbnN0aXR1dGlvbjogXCJJRlNDXCJcbiAgfSk7XG4gIGNvbnN0IGxpc3QgPSAoYXdhaXQgc2lnYWEuc2VhcmNoLnRlYWNoZXIoKS5zZWFyY2goJ0pvc8OpJykpLnNsaWNlKDAsIDUpO1xuICBleHBlY3QobGlzdC5sZW5ndGgpLnRvQmUoNSk7XG4gIGZvciAoY29uc3QgdGVhY2hlciBvZiBsaXN0KSB7XG4gICAgZXhwZWN0KHRlYWNoZXIpLnRvQmVJbnN0YW5jZU9mKFNpZ2FhU2VhcmNoVGVhY2hlclJlc3VsdCk7XG4gICAgY29uc3QgZW1haWwgPSBhd2FpdCB0ZWFjaGVyLmdldEVtYWlsKCk7XG4gICAgbGV0IHNvbWVFbWFpbDtcbiAgICBzd2l0Y2ggKHR5cGVvZiBlbWFpbCkge1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgc29tZUVtYWlsID0gZW1haWw7XG4gICAgICAgIGV4cGVjdChlbWFpbCkudG9NYXRjaCgvW15AXStAKGFsdW5vXFwuKT9pZnNjXFwuZWR1XFwuYnIvZyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgZXhwZWN0KGVtYWlsKS50b0JlTnVsbCgpO1xuICAgIH1cbiAgICBleHBlY3Qoc29tZUVtYWlsKS50b01hdGNoKC9bXkBdK0AoYWx1bm9cXC4pP2lmc2NcXC5lZHVcXC5ici9nKTtcbiAgfVxuICBzaWdhYS5jbG9zZSgpO1xufSwgMzAwMDAwKTtcblxudGVzdCgnaWYgc2lnYWEgc2VhcmNoIHJldHVybnMgcHJvZmlsZSBwaWN0dXJlIHVybCcsIGFzeW5jICgpID0+IHtcbiAgY29uc3Qgc2lnYWEgPSBuZXcgU2lnYWEoe1xuICAgIHVybDogJ2h0dHBzOi8vc2lnYWEuaWZzYy5lZHUuYnInLFxuICAgIGluc3RpdHV0aW9uOiAnSUZTQydcbiAgfSk7XG4gIGNvbnN0IGxpc3QgPSAoYXdhaXQgc2lnYWEuc2VhcmNoLnRlYWNoZXIoKS5zZWFyY2goJ0pvc8OpJykpLnNsaWNlKDAsIDEwKTtcbiAgZm9yIChjb25zdCB0ZWFjaGVyIG9mIGxpc3QpIHtcbiAgICBleHBlY3QodGVhY2hlcikudG9CZUluc3RhbmNlT2YoU2lnYWFTZWFyY2hUZWFjaGVyUmVzdWx0KTtcbiAgICBjb25zdCBwcm9maWxlUGljdHVyZVVSTCA9IGF3YWl0IHRlYWNoZXIucHJvZmlsZVBpY3R1cmVVUkw7XG4gICAgaWYgKHByb2ZpbGVQaWN0dXJlVVJMKSB7XG4gICAgICBleHBlY3QocHJvZmlsZVBpY3R1cmVVUkwpLnRvQmVJbnN0YW5jZU9mKFVSTCk7XG4gICAgICBleHBlY3QocHJvZmlsZVBpY3R1cmVVUkwuaHJlZikudG9NYXRjaCgvW1xcc1xcU10rP3ZlckZvdG8/W1xcc1xcU10rPy9nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwZWN0KHByb2ZpbGVQaWN0dXJlVVJMKS50b0JlTnVsbDtcbiAgICB9XG4gIH1cbiAgc2lnYWEuY2xvc2UoKTtcbn0sIDMwMDAwMCk7XG4iXX0=