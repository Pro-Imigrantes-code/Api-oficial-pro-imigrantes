"use strict";

require("source-map-support/register");

var _sigaaParser = require("../../helpers/sigaa-parser");

test('if sigaa parser remove script tags', () => {
  const sigaaParser = new _sigaaParser.SigaaParser();
  const html = `some text <script>alert('error')</script> more text`;
  expect(sigaaParser.removeTagsHtml(html)).toBe(`some text more text`);
});
test('if sigaa parser remove style tags', () => {
  const sigaaParser = new _sigaaParser.SigaaParser();
  const html = `some text &lt;script&gt;alert('alert');&lt;/script&gt;
  <style>
  .style{
    .error {
      background: #red
    }
  }
  </style>
  `;
  expect(sigaaParser.removeTagsHtml(html)).toBe(`some text <script>alert('alert');</script>`);
});
test('if Sigaa parser keeping only emphasis tags', () => {
  const sigaaParser = new _sigaaParser.SigaaParser();
  const html = `some text<b onmouseover="alert(123)">bold</b><style>b{font-weight:700;}</style><script>alert('alert')</script>`;
  expect(sigaaParser.removeTagsHtmlKeepingEmphasis(html)).toBe('some text<b>bold</b>');
});
test('if sigaa parser date', () => {
  const sigaaParser = new _sigaaParser.SigaaParser();
  expect(sigaaParser.parseDates('01/01/01', 1)).toStrictEqual([new Date('2001-01-01T00:00')]);
  expect(sigaaParser.parseDates('01/01', 1, 2010)).toStrictEqual([new Date('2010-01-01T00:00')]);
  expect(sigaaParser.parseDates('01/01 02:03', 1, 2010)).toStrictEqual([new Date('2010-01-01T02:03')]);
  expect(sigaaParser.parseDates('01/01/01', 1, 2010)).toStrictEqual([new Date('2001-01-01T00:00')]);
  const currentYear = new Date().getFullYear();
  expect(sigaaParser.parseDates('01/01 às 20:10', 1)).toStrictEqual([new Date(currentYear + '-01-01T20:10')]);
  expect(sigaaParser.parseDates('01/02 às 20:10:30', 1)).toStrictEqual([new Date(currentYear + '-02-01T20:10:30')]);
  expect(sigaaParser.parseDates('01/02 às 20h10', 1)).toStrictEqual([new Date(currentYear + '-02-01T20:10:00')]);
  expect(sigaaParser.parseDates('01/02 às 20h10 e 20:30', 2)).toStrictEqual([new Date(currentYear + '-02-01T20:10:00'), new Date(currentYear + '-02-01T20:30:00')]);
  expect(sigaaParser.parseDates('01/02/2001 01/01/2001', 2)).toStrictEqual([new Date('2001-02-01T00:00:00'), new Date('2001-01-01T00:00:00')]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0cy9oZWxwZXJzL3NpZ2FhLXBhcnNlci5zcGVjLnRzIl0sIm5hbWVzIjpbInRlc3QiLCJzaWdhYVBhcnNlciIsIlNpZ2FhUGFyc2VyIiwiaHRtbCIsImV4cGVjdCIsInJlbW92ZVRhZ3NIdG1sIiwidG9CZSIsInJlbW92ZVRhZ3NIdG1sS2VlcGluZ0VtcGhhc2lzIiwicGFyc2VEYXRlcyIsInRvU3RyaWN0RXF1YWwiLCJEYXRlIiwiY3VycmVudFllYXIiLCJnZXRGdWxsWWVhciJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUVBQSxJQUFJLENBQUMsb0NBQUQsRUFBdUMsTUFBTTtBQUMvQyxRQUFNQyxXQUFXLEdBQUcsSUFBSUMsd0JBQUosRUFBcEI7QUFDQSxRQUFNQyxJQUFJLEdBQUkscURBQWQ7QUFDQUMsRUFBQUEsTUFBTSxDQUFDSCxXQUFXLENBQUNJLGNBQVosQ0FBMkJGLElBQTNCLENBQUQsQ0FBTixDQUF5Q0csSUFBekMsQ0FBK0MscUJBQS9DO0FBQ0QsQ0FKRyxDQUFKO0FBTUFOLElBQUksQ0FBQyxtQ0FBRCxFQUFzQyxNQUFNO0FBQzlDLFFBQU1DLFdBQVcsR0FBRyxJQUFJQyx3QkFBSixFQUFwQjtBQUNBLFFBQU1DLElBQUksR0FBSTtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBUkU7QUFTQUMsRUFBQUEsTUFBTSxDQUFDSCxXQUFXLENBQUNJLGNBQVosQ0FBMkJGLElBQTNCLENBQUQsQ0FBTixDQUF5Q0csSUFBekMsQ0FDRyw0Q0FESDtBQUdELENBZEcsQ0FBSjtBQWdCQU4sSUFBSSxDQUFDLDRDQUFELEVBQStDLE1BQU07QUFDdkQsUUFBTUMsV0FBVyxHQUFHLElBQUlDLHdCQUFKLEVBQXBCO0FBQ0EsUUFBTUMsSUFBSSxHQUFJLGdIQUFkO0FBQ0FDLEVBQUFBLE1BQU0sQ0FBQ0gsV0FBVyxDQUFDTSw2QkFBWixDQUEwQ0osSUFBMUMsQ0FBRCxDQUFOLENBQXdERyxJQUF4RCxDQUNFLHNCQURGO0FBR0QsQ0FORyxDQUFKO0FBUUFOLElBQUksQ0FBQyxzQkFBRCxFQUF5QixNQUFNO0FBQ2pDLFFBQU1DLFdBQVcsR0FBRyxJQUFJQyx3QkFBSixFQUFwQjtBQUNBRSxFQUFBQSxNQUFNLENBQUNILFdBQVcsQ0FBQ08sVUFBWixDQUF1QixVQUF2QixFQUFtQyxDQUFuQyxDQUFELENBQU4sQ0FBOENDLGFBQTlDLENBQTRELENBQzFELElBQUlDLElBQUosQ0FBUyxrQkFBVCxDQUQwRCxDQUE1RDtBQUlBTixFQUFBQSxNQUFNLENBQUNILFdBQVcsQ0FBQ08sVUFBWixDQUF1QixPQUF2QixFQUFnQyxDQUFoQyxFQUFtQyxJQUFuQyxDQUFELENBQU4sQ0FBaURDLGFBQWpELENBQStELENBQzdELElBQUlDLElBQUosQ0FBUyxrQkFBVCxDQUQ2RCxDQUEvRDtBQUlBTixFQUFBQSxNQUFNLENBQUNILFdBQVcsQ0FBQ08sVUFBWixDQUF1QixhQUF2QixFQUFzQyxDQUF0QyxFQUF5QyxJQUF6QyxDQUFELENBQU4sQ0FBdURDLGFBQXZELENBQXFFLENBQ25FLElBQUlDLElBQUosQ0FBUyxrQkFBVCxDQURtRSxDQUFyRTtBQUlBTixFQUFBQSxNQUFNLENBQUNILFdBQVcsQ0FBQ08sVUFBWixDQUF1QixVQUF2QixFQUFtQyxDQUFuQyxFQUFzQyxJQUF0QyxDQUFELENBQU4sQ0FBb0RDLGFBQXBELENBQWtFLENBQ2hFLElBQUlDLElBQUosQ0FBUyxrQkFBVCxDQURnRSxDQUFsRTtBQUdBLFFBQU1DLFdBQVcsR0FBRyxJQUFJRCxJQUFKLEdBQVdFLFdBQVgsRUFBcEI7QUFDQVIsRUFBQUEsTUFBTSxDQUFDSCxXQUFXLENBQUNPLFVBQVosQ0FBdUIsZ0JBQXZCLEVBQXlDLENBQXpDLENBQUQsQ0FBTixDQUFvREMsYUFBcEQsQ0FBa0UsQ0FDaEUsSUFBSUMsSUFBSixDQUFTQyxXQUFXLEdBQUcsY0FBdkIsQ0FEZ0UsQ0FBbEU7QUFJQVAsRUFBQUEsTUFBTSxDQUFDSCxXQUFXLENBQUNPLFVBQVosQ0FBdUIsbUJBQXZCLEVBQTRDLENBQTVDLENBQUQsQ0FBTixDQUF1REMsYUFBdkQsQ0FBcUUsQ0FDbkUsSUFBSUMsSUFBSixDQUFTQyxXQUFXLEdBQUcsaUJBQXZCLENBRG1FLENBQXJFO0FBSUFQLEVBQUFBLE1BQU0sQ0FBQ0gsV0FBVyxDQUFDTyxVQUFaLENBQXVCLGdCQUF2QixFQUF5QyxDQUF6QyxDQUFELENBQU4sQ0FBb0RDLGFBQXBELENBQWtFLENBQ2hFLElBQUlDLElBQUosQ0FBU0MsV0FBVyxHQUFHLGlCQUF2QixDQURnRSxDQUFsRTtBQUlBUCxFQUFBQSxNQUFNLENBQUNILFdBQVcsQ0FBQ08sVUFBWixDQUF1Qix3QkFBdkIsRUFBaUQsQ0FBakQsQ0FBRCxDQUFOLENBQTREQyxhQUE1RCxDQUEwRSxDQUN4RSxJQUFJQyxJQUFKLENBQVNDLFdBQVcsR0FBRyxpQkFBdkIsQ0FEd0UsRUFFeEUsSUFBSUQsSUFBSixDQUFTQyxXQUFXLEdBQUcsaUJBQXZCLENBRndFLENBQTFFO0FBS0FQLEVBQUFBLE1BQU0sQ0FBQ0gsV0FBVyxDQUFDTyxVQUFaLENBQXVCLHVCQUF2QixFQUFnRCxDQUFoRCxDQUFELENBQU4sQ0FBMkRDLGFBQTNELENBQXlFLENBQ3ZFLElBQUlDLElBQUosQ0FBUyxxQkFBVCxDQUR1RSxFQUV2RSxJQUFJQSxJQUFKLENBQVMscUJBQVQsQ0FGdUUsQ0FBekU7QUFJRCxDQXZDRyxDQUFKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2lnYWFQYXJzZXIgfSBmcm9tICdAaGVscGVycy9zaWdhYS1wYXJzZXInO1xuXG50ZXN0KCdpZiBzaWdhYSBwYXJzZXIgcmVtb3ZlIHNjcmlwdCB0YWdzJywgKCkgPT4ge1xuICBjb25zdCBzaWdhYVBhcnNlciA9IG5ldyBTaWdhYVBhcnNlcigpO1xuICBjb25zdCBodG1sID0gYHNvbWUgdGV4dCA8c2NyaXB0PmFsZXJ0KCdlcnJvcicpPC9zY3JpcHQ+IG1vcmUgdGV4dGA7XG4gIGV4cGVjdChzaWdhYVBhcnNlci5yZW1vdmVUYWdzSHRtbChodG1sKSkudG9CZShgc29tZSB0ZXh0IG1vcmUgdGV4dGApO1xufSk7XG5cbnRlc3QoJ2lmIHNpZ2FhIHBhcnNlciByZW1vdmUgc3R5bGUgdGFncycsICgpID0+IHtcbiAgY29uc3Qgc2lnYWFQYXJzZXIgPSBuZXcgU2lnYWFQYXJzZXIoKTtcbiAgY29uc3QgaHRtbCA9IGBzb21lIHRleHQgJmx0O3NjcmlwdCZndDthbGVydCgnYWxlcnQnKTsmbHQ7L3NjcmlwdCZndDtcbiAgPHN0eWxlPlxuICAuc3R5bGV7XG4gICAgLmVycm9yIHtcbiAgICAgIGJhY2tncm91bmQ6ICNyZWRcbiAgICB9XG4gIH1cbiAgPC9zdHlsZT5cbiAgYDtcbiAgZXhwZWN0KHNpZ2FhUGFyc2VyLnJlbW92ZVRhZ3NIdG1sKGh0bWwpKS50b0JlKFxuICAgIGBzb21lIHRleHQgPHNjcmlwdD5hbGVydCgnYWxlcnQnKTs8L3NjcmlwdD5gXG4gICk7XG59KTtcblxudGVzdCgnaWYgU2lnYWEgcGFyc2VyIGtlZXBpbmcgb25seSBlbXBoYXNpcyB0YWdzJywgKCkgPT4ge1xuICBjb25zdCBzaWdhYVBhcnNlciA9IG5ldyBTaWdhYVBhcnNlcigpO1xuICBjb25zdCBodG1sID0gYHNvbWUgdGV4dDxiIG9ubW91c2VvdmVyPVwiYWxlcnQoMTIzKVwiPmJvbGQ8L2I+PHN0eWxlPmJ7Zm9udC13ZWlnaHQ6NzAwO308L3N0eWxlPjxzY3JpcHQ+YWxlcnQoJ2FsZXJ0Jyk8L3NjcmlwdD5gO1xuICBleHBlY3Qoc2lnYWFQYXJzZXIucmVtb3ZlVGFnc0h0bWxLZWVwaW5nRW1waGFzaXMoaHRtbCkpLnRvQmUoXG4gICAgJ3NvbWUgdGV4dDxiPmJvbGQ8L2I+J1xuICApO1xufSk7XG5cbnRlc3QoJ2lmIHNpZ2FhIHBhcnNlciBkYXRlJywgKCkgPT4ge1xuICBjb25zdCBzaWdhYVBhcnNlciA9IG5ldyBTaWdhYVBhcnNlcigpO1xuICBleHBlY3Qoc2lnYWFQYXJzZXIucGFyc2VEYXRlcygnMDEvMDEvMDEnLCAxKSkudG9TdHJpY3RFcXVhbChbXG4gICAgbmV3IERhdGUoJzIwMDEtMDEtMDFUMDA6MDAnKVxuICBdKTtcblxuICBleHBlY3Qoc2lnYWFQYXJzZXIucGFyc2VEYXRlcygnMDEvMDEnLCAxLCAyMDEwKSkudG9TdHJpY3RFcXVhbChbXG4gICAgbmV3IERhdGUoJzIwMTAtMDEtMDFUMDA6MDAnKVxuICBdKTtcblxuICBleHBlY3Qoc2lnYWFQYXJzZXIucGFyc2VEYXRlcygnMDEvMDEgMDI6MDMnLCAxLCAyMDEwKSkudG9TdHJpY3RFcXVhbChbXG4gICAgbmV3IERhdGUoJzIwMTAtMDEtMDFUMDI6MDMnKVxuICBdKTtcblxuICBleHBlY3Qoc2lnYWFQYXJzZXIucGFyc2VEYXRlcygnMDEvMDEvMDEnLCAxLCAyMDEwKSkudG9TdHJpY3RFcXVhbChbXG4gICAgbmV3IERhdGUoJzIwMDEtMDEtMDFUMDA6MDAnKVxuICBdKTtcbiAgY29uc3QgY3VycmVudFllYXIgPSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCk7XG4gIGV4cGVjdChzaWdhYVBhcnNlci5wYXJzZURhdGVzKCcwMS8wMSDDoHMgMjA6MTAnLCAxKSkudG9TdHJpY3RFcXVhbChbXG4gICAgbmV3IERhdGUoY3VycmVudFllYXIgKyAnLTAxLTAxVDIwOjEwJylcbiAgXSk7XG5cbiAgZXhwZWN0KHNpZ2FhUGFyc2VyLnBhcnNlRGF0ZXMoJzAxLzAyIMOgcyAyMDoxMDozMCcsIDEpKS50b1N0cmljdEVxdWFsKFtcbiAgICBuZXcgRGF0ZShjdXJyZW50WWVhciArICctMDItMDFUMjA6MTA6MzAnKVxuICBdKTtcblxuICBleHBlY3Qoc2lnYWFQYXJzZXIucGFyc2VEYXRlcygnMDEvMDIgw6BzIDIwaDEwJywgMSkpLnRvU3RyaWN0RXF1YWwoW1xuICAgIG5ldyBEYXRlKGN1cnJlbnRZZWFyICsgJy0wMi0wMVQyMDoxMDowMCcpXG4gIF0pO1xuXG4gIGV4cGVjdChzaWdhYVBhcnNlci5wYXJzZURhdGVzKCcwMS8wMiDDoHMgMjBoMTAgZSAyMDozMCcsIDIpKS50b1N0cmljdEVxdWFsKFtcbiAgICBuZXcgRGF0ZShjdXJyZW50WWVhciArICctMDItMDFUMjA6MTA6MDAnKSxcbiAgICBuZXcgRGF0ZShjdXJyZW50WWVhciArICctMDItMDFUMjA6MzA6MDAnKVxuICBdKTtcblxuICBleHBlY3Qoc2lnYWFQYXJzZXIucGFyc2VEYXRlcygnMDEvMDIvMjAwMSAwMS8wMS8yMDAxJywgMikpLnRvU3RyaWN0RXF1YWwoW1xuICAgIG5ldyBEYXRlKCcyMDAxLTAyLTAxVDAwOjAwOjAwJyksXG4gICAgbmV3IERhdGUoJzIwMDEtMDEtMDFUMDA6MDA6MDAnKVxuICBdKTtcbn0pO1xuIl19