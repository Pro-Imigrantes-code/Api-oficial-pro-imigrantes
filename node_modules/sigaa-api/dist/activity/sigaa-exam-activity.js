"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SigaaActivityExam = void 0;

require("source-map-support/register");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class SigaaActivityExam {
  constructor(activityData, studentBond) {
    this.activityData = activityData;
    this.studentBond = studentBond;

    _defineProperty(this, "type", 'exam');
  }
  /**
   * @inheritdoc
   */


  get examDescription() {
    return this.activityData.examDescription;
  }
  /**
   * @inheritdoc
   */


  get courseTitle() {
    return this.activityData.courseTitle;
  }
  /**
   * @inheritdoc
   */


  async getCourse() {
    const courses = await this.studentBond.getCourses();
    const validCourses = courses.filter(course => course.title === this.courseTitle);
    if (validCourses.length === 0) throw new Error('SIGAA: No course with title specified in the found activity.');
    if (validCourses.length > 1) throw new Error('SIGAA: It was not possible to identify the course as there is more than one course with the same title specified in the activity.');
    return validCourses[0];
  }
  /**
   * @inheritdoc
   */


  async getExam() {
    const course = await this.getCourse();
    const exams = await course.getExamCalendar();
    const validExams = exams.filter(exam => exam.description === this.examDescription);
    if (validExams.length === 0) throw new Error('SIGAA: Exam description specified in activity not found.');
    if (validExams.length > 1) throw new Error('SIGAA: The exam description specified in the activity corresponds to more than one exam.');
    return validExams[0];
  }
  /**
   * @inheritdoc
   */


  get date() {
    return this.activityData.date;
  }
  /**
   * @inheritdoc
   */


  get done() {
    return this.activityData.done;
  }

}

exports.SigaaActivityExam = SigaaActivityExam;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hY3Rpdml0eS9zaWdhYS1leGFtLWFjdGl2aXR5LnRzIl0sIm5hbWVzIjpbIlNpZ2FhQWN0aXZpdHlFeGFtIiwiY29uc3RydWN0b3IiLCJhY3Rpdml0eURhdGEiLCJzdHVkZW50Qm9uZCIsImV4YW1EZXNjcmlwdGlvbiIsImNvdXJzZVRpdGxlIiwiZ2V0Q291cnNlIiwiY291cnNlcyIsImdldENvdXJzZXMiLCJ2YWxpZENvdXJzZXMiLCJmaWx0ZXIiLCJjb3Vyc2UiLCJ0aXRsZSIsImxlbmd0aCIsIkVycm9yIiwiZ2V0RXhhbSIsImV4YW1zIiwiZ2V0RXhhbUNhbGVuZGFyIiwidmFsaWRFeGFtcyIsImV4YW0iLCJkZXNjcmlwdGlvbiIsImRhdGUiLCJkb25lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQTRDTyxNQUFNQSxpQkFBTixDQUFnRDtBQUdyREMsRUFBQUEsV0FBVyxDQUNEQyxZQURDLEVBRURDLFdBRkMsRUFHVDtBQUFBLFNBRlFELFlBRVIsR0FGUUEsWUFFUjtBQUFBLFNBRFFDLFdBQ1IsR0FEUUEsV0FDUjs7QUFBQSxrQ0FMcUIsTUFLckI7QUFBRTtBQUVKO0FBQ0Y7QUFDQTs7O0FBQ3FCLE1BQWZDLGVBQWUsR0FBVztBQUM1QixXQUFPLEtBQUtGLFlBQUwsQ0FBa0JFLGVBQXpCO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7OztBQUNpQixNQUFYQyxXQUFXLEdBQVc7QUFDeEIsV0FBTyxLQUFLSCxZQUFMLENBQWtCRyxXQUF6QjtBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7QUFDaUIsUUFBVEMsU0FBUyxHQUEyQjtBQUN4QyxVQUFNQyxPQUFPLEdBQUcsTUFBTSxLQUFLSixXQUFMLENBQWlCSyxVQUFqQixFQUF0QjtBQUNBLFVBQU1DLFlBQVksR0FBR0YsT0FBTyxDQUFDRyxNQUFSLENBQ2xCQyxNQUFELElBQVlBLE1BQU0sQ0FBQ0MsS0FBUCxLQUFpQixLQUFLUCxXQURmLENBQXJCO0FBR0EsUUFBSUksWUFBWSxDQUFDSSxNQUFiLEtBQXdCLENBQTVCLEVBQ0UsTUFBTSxJQUFJQyxLQUFKLENBQ0osOERBREksQ0FBTjtBQUdGLFFBQUlMLFlBQVksQ0FBQ0ksTUFBYixHQUFzQixDQUExQixFQUNFLE1BQU0sSUFBSUMsS0FBSixDQUNKLG1JQURJLENBQU47QUFHRixXQUFPTCxZQUFZLENBQUMsQ0FBRCxDQUFuQjtBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7QUFDZSxRQUFQTSxPQUFPLEdBQWtCO0FBQzdCLFVBQU1KLE1BQU0sR0FBRyxNQUFNLEtBQUtMLFNBQUwsRUFBckI7QUFDQSxVQUFNVSxLQUFLLEdBQUcsTUFBTUwsTUFBTSxDQUFDTSxlQUFQLEVBQXBCO0FBQ0EsVUFBTUMsVUFBVSxHQUFHRixLQUFLLENBQUNOLE1BQU4sQ0FDaEJTLElBQUQsSUFBVUEsSUFBSSxDQUFDQyxXQUFMLEtBQXFCLEtBQUtoQixlQURuQixDQUFuQjtBQUdBLFFBQUljLFVBQVUsQ0FBQ0wsTUFBWCxLQUFzQixDQUExQixFQUNFLE1BQU0sSUFBSUMsS0FBSixDQUNKLDBEQURJLENBQU47QUFHRixRQUFJSSxVQUFVLENBQUNMLE1BQVgsR0FBb0IsQ0FBeEIsRUFDRSxNQUFNLElBQUlDLEtBQUosQ0FDSiwwRkFESSxDQUFOO0FBR0YsV0FBT0ksVUFBVSxDQUFDLENBQUQsQ0FBakI7QUFDRDtBQUVEO0FBQ0Y7QUFDQTs7O0FBQ1UsTUFBSkcsSUFBSSxHQUFTO0FBQ2YsV0FBTyxLQUFLbkIsWUFBTCxDQUFrQm1CLElBQXpCO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7OztBQUNVLE1BQUpDLElBQUksR0FBWTtBQUNsQixXQUFPLEtBQUtwQixZQUFMLENBQWtCb0IsSUFBekI7QUFDRDs7QUF6RW9EIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3R1ZGVudEJvbmQgfSBmcm9tICdAYm9uZHMvc2lnYWEtc3R1ZGVudC1ib25kJztcbmltcG9ydCB7IEV4YW0gfSBmcm9tICdAY291cnNlUmVzb3VyY2VzL3NpZ2FhLWV4YW0tc3R1ZGVudCc7XG5pbXBvcnQgeyBDb3Vyc2VTdHVkZW50IH0gZnJvbSAnQGNvdXJzZXMvc2lnYWEtY291cnNlLXN0dWRlbnQnO1xuXG4vKipcbiAqXG4gKiBAY2F0ZWdvcnkgSW50ZXJuYWxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBY3Rpdml0eUV4YW1EYXRhIHtcbiAgY291cnNlVGl0bGU6IHN0cmluZztcbiAgZXhhbURlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIGRhdGU6IERhdGU7XG4gIGRvbmU6IGJvb2xlYW47XG59XG4vKipcbiAqXG4gKiBAY2F0ZWdvcnkgUHVibGljXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWN0aXZpdHlFeGFtIHtcbiAgcmVhZG9ubHkgdHlwZTogJ2V4YW0nO1xuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGFjdGl2aXR5IGNvdXJzZS5cbiAgICovXG4gIGdldENvdXJzZSgpOiBQcm9taXNlPENvdXJzZVN0dWRlbnQ+O1xuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGFjdGl2aXR5IGV4YW0uXG4gICAqL1xuICBnZXRFeGFtKCk6IFByb21pc2U8RXhhbT47XG5cbiAgLyogRXhhbSBkZXNjcmlwdGlvbiAqL1xuICBleGFtRGVzY3JpcHRpb246IHN0cmluZztcblxuICAvKiBFeGFtIGNvdXJzZSB0aXRsZSAqL1xuICBjb3Vyc2VUaXRsZTogc3RyaW5nO1xuXG4gIC8qQWN0aXZpdHkgZGF0ZSAqL1xuICByZWFkb25seSBkYXRlOiBEYXRlO1xuXG4gIC8qIElmIHRoZSBleGFtIGRlYWRsaW5lIGhhcyBleHBpcmVkIG9yIGlmIGl0IGhhcyBhbHJlYWR5IGJlZW4gc2VudCAqL1xuICByZWFkb25seSBkb25lOiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgU2lnYWFBY3Rpdml0eUV4YW0gaW1wbGVtZW50cyBBY3Rpdml0eUV4YW0ge1xuICBwdWJsaWMgcmVhZG9ubHkgdHlwZSA9ICdleGFtJztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGFjdGl2aXR5RGF0YTogQWN0aXZpdHlFeGFtRGF0YSxcbiAgICBwcml2YXRlIHN0dWRlbnRCb25kOiBTdHVkZW50Qm9uZFxuICApIHt9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0ZG9jXG4gICAqL1xuICBnZXQgZXhhbURlc2NyaXB0aW9uKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZpdHlEYXRhLmV4YW1EZXNjcmlwdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdGRvY1xuICAgKi9cbiAgZ2V0IGNvdXJzZVRpdGxlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZpdHlEYXRhLmNvdXJzZVRpdGxlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0ZG9jXG4gICAqL1xuICBhc3luYyBnZXRDb3Vyc2UoKTogUHJvbWlzZTxDb3Vyc2VTdHVkZW50PiB7XG4gICAgY29uc3QgY291cnNlcyA9IGF3YWl0IHRoaXMuc3R1ZGVudEJvbmQuZ2V0Q291cnNlcygpO1xuICAgIGNvbnN0IHZhbGlkQ291cnNlcyA9IGNvdXJzZXMuZmlsdGVyKFxuICAgICAgKGNvdXJzZSkgPT4gY291cnNlLnRpdGxlID09PSB0aGlzLmNvdXJzZVRpdGxlXG4gICAgKTtcbiAgICBpZiAodmFsaWRDb3Vyc2VzLmxlbmd0aCA9PT0gMClcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1NJR0FBOiBObyBjb3Vyc2Ugd2l0aCB0aXRsZSBzcGVjaWZpZWQgaW4gdGhlIGZvdW5kIGFjdGl2aXR5LidcbiAgICAgICk7XG4gICAgaWYgKHZhbGlkQ291cnNlcy5sZW5ndGggPiAxKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnU0lHQUE6IEl0IHdhcyBub3QgcG9zc2libGUgdG8gaWRlbnRpZnkgdGhlIGNvdXJzZSBhcyB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIGNvdXJzZSB3aXRoIHRoZSBzYW1lIHRpdGxlIHNwZWNpZmllZCBpbiB0aGUgYWN0aXZpdHkuJ1xuICAgICAgKTtcbiAgICByZXR1cm4gdmFsaWRDb3Vyc2VzWzBdO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0ZG9jXG4gICAqL1xuICBhc3luYyBnZXRFeGFtKCk6IFByb21pc2U8RXhhbT4ge1xuICAgIGNvbnN0IGNvdXJzZSA9IGF3YWl0IHRoaXMuZ2V0Q291cnNlKCk7XG4gICAgY29uc3QgZXhhbXMgPSBhd2FpdCBjb3Vyc2UuZ2V0RXhhbUNhbGVuZGFyKCk7XG4gICAgY29uc3QgdmFsaWRFeGFtcyA9IGV4YW1zLmZpbHRlcihcbiAgICAgIChleGFtKSA9PiBleGFtLmRlc2NyaXB0aW9uID09PSB0aGlzLmV4YW1EZXNjcmlwdGlvblxuICAgICk7XG4gICAgaWYgKHZhbGlkRXhhbXMubGVuZ3RoID09PSAwKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnU0lHQUE6IEV4YW0gZGVzY3JpcHRpb24gc3BlY2lmaWVkIGluIGFjdGl2aXR5IG5vdCBmb3VuZC4nXG4gICAgICApO1xuICAgIGlmICh2YWxpZEV4YW1zLmxlbmd0aCA+IDEpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdTSUdBQTogVGhlIGV4YW0gZGVzY3JpcHRpb24gc3BlY2lmaWVkIGluIHRoZSBhY3Rpdml0eSBjb3JyZXNwb25kcyB0byBtb3JlIHRoYW4gb25lIGV4YW0uJ1xuICAgICAgKTtcbiAgICByZXR1cm4gdmFsaWRFeGFtc1swXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdGRvY1xuICAgKi9cbiAgZ2V0IGRhdGUoKTogRGF0ZSB7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZpdHlEYXRhLmRhdGU7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXRkb2NcbiAgICovXG4gIGdldCBkb25lKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmFjdGl2aXR5RGF0YS5kb25lO1xuICB9XG59XG4iXX0=