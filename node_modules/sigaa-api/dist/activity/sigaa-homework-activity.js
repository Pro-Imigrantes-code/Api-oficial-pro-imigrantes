"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SigaaActivityHomework = void 0;

require("source-map-support/register");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Implements ActivityHomework
 * @category Public
 */
class SigaaActivityHomework {
  constructor(activityData, studentBond) {
    this.activityData = activityData;
    this.studentBond = studentBond;

    _defineProperty(this, "type", 'homework');
  }
  /**
   * @inheritdoc
   */


  get homeworkId() {
    return this.activityData.form.postValues['id'];
  }
  /**
   * @inheritdoc
   */


  get homeworkTitle() {
    return this.activityData.homeworkTitle;
  }
  /**
   * @inheritdoc
   */


  get courseId() {
    return this.activityData.form.postValues['idTurma'];
  }
  /**
   * @inheritdoc
   */


  get courseTitle() {
    return this.activityData.courseTitle;
  }
  /**
   * @inheritdoc
   */


  async getCourse() {
    const courses = await this.studentBond.getCourses();
    const course = courses.find(course => course.id === this.courseId);
    if (!course) throw new Error('SIGAA: Cannot find the course referenced by the activity.');
    return course;
  }
  /**
   * @inheritdoc
   */


  async getHomework() {
    const course = await this.getCourse();
    const homeworkList = await course.getHomeworks();
    const homework = homeworkList.find(homework => homework.id === this.homeworkId);
    if (!homework) throw new Error('SIGAA: Cannot find the homework referenced by the activity.');
    return homework;
  }
  /**
   * @inheritdoc
   */


  get date() {
    return this.activityData.date;
  }
  /**
   * @inheritdoc
   */


  get done() {
    return this.activityData.done;
  }

}

exports.SigaaActivityHomework = SigaaActivityHomework;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hY3Rpdml0eS9zaWdhYS1ob21ld29yay1hY3Rpdml0eS50cyJdLCJuYW1lcyI6WyJTaWdhYUFjdGl2aXR5SG9tZXdvcmsiLCJjb25zdHJ1Y3RvciIsImFjdGl2aXR5RGF0YSIsInN0dWRlbnRCb25kIiwiaG9tZXdvcmtJZCIsImZvcm0iLCJwb3N0VmFsdWVzIiwiaG9tZXdvcmtUaXRsZSIsImNvdXJzZUlkIiwiY291cnNlVGl0bGUiLCJnZXRDb3Vyc2UiLCJjb3Vyc2VzIiwiZ2V0Q291cnNlcyIsImNvdXJzZSIsImZpbmQiLCJpZCIsIkVycm9yIiwiZ2V0SG9tZXdvcmsiLCJob21ld29ya0xpc3QiLCJnZXRIb21ld29ya3MiLCJob21ld29yayIsImRhdGUiLCJkb25lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQW1EQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLE1BQU1BLHFCQUFOLENBQXdEO0FBRzdEQyxFQUFBQSxXQUFXLENBQ0RDLFlBREMsRUFFREMsV0FGQyxFQUdUO0FBQUEsU0FGUUQsWUFFUixHQUZRQSxZQUVSO0FBQUEsU0FEUUMsV0FDUixHQURRQSxXQUNSOztBQUFBLGtDQUxxQixVQUtyQjtBQUFFO0FBRUo7QUFDRjtBQUNBOzs7QUFDZ0IsTUFBVkMsVUFBVSxHQUFXO0FBQ3ZCLFdBQU8sS0FBS0YsWUFBTCxDQUFrQkcsSUFBbEIsQ0FBdUJDLFVBQXZCLENBQWtDLElBQWxDLENBQVA7QUFDRDtBQUVEO0FBQ0Y7QUFDQTs7O0FBQ21CLE1BQWJDLGFBQWEsR0FBVztBQUMxQixXQUFPLEtBQUtMLFlBQUwsQ0FBa0JLLGFBQXpCO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7OztBQUNjLE1BQVJDLFFBQVEsR0FBVztBQUNyQixXQUFPLEtBQUtOLFlBQUwsQ0FBa0JHLElBQWxCLENBQXVCQyxVQUF2QixDQUFrQyxTQUFsQyxDQUFQO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7OztBQUNpQixNQUFYRyxXQUFXLEdBQVc7QUFDeEIsV0FBTyxLQUFLUCxZQUFMLENBQWtCTyxXQUF6QjtBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7QUFDaUIsUUFBVEMsU0FBUyxHQUEyQjtBQUN4QyxVQUFNQyxPQUFPLEdBQUcsTUFBTSxLQUFLUixXQUFMLENBQWlCUyxVQUFqQixFQUF0QjtBQUNBLFVBQU1DLE1BQU0sR0FBR0YsT0FBTyxDQUFDRyxJQUFSLENBQWNELE1BQUQsSUFBWUEsTUFBTSxDQUFDRSxFQUFQLEtBQWMsS0FBS1AsUUFBNUMsQ0FBZjtBQUNBLFFBQUksQ0FBQ0ssTUFBTCxFQUNFLE1BQU0sSUFBSUcsS0FBSixDQUNKLDJEQURJLENBQU47QUFHRixXQUFPSCxNQUFQO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7OztBQUNtQixRQUFYSSxXQUFXLEdBQXNCO0FBQ3JDLFVBQU1KLE1BQU0sR0FBRyxNQUFNLEtBQUtILFNBQUwsRUFBckI7QUFDQSxVQUFNUSxZQUFZLEdBQUcsTUFBTUwsTUFBTSxDQUFDTSxZQUFQLEVBQTNCO0FBQ0EsVUFBTUMsUUFBUSxHQUFHRixZQUFZLENBQUNKLElBQWIsQ0FDZE0sUUFBRCxJQUFjQSxRQUFRLENBQUNMLEVBQVQsS0FBZ0IsS0FBS1gsVUFEcEIsQ0FBakI7QUFHQSxRQUFJLENBQUNnQixRQUFMLEVBQ0UsTUFBTSxJQUFJSixLQUFKLENBQ0osNkRBREksQ0FBTjtBQUdGLFdBQU9JLFFBQVA7QUFDRDtBQUVEO0FBQ0Y7QUFDQTs7O0FBQ1UsTUFBSkMsSUFBSSxHQUFTO0FBQ2YsV0FBTyxLQUFLbkIsWUFBTCxDQUFrQm1CLElBQXpCO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7OztBQUNVLE1BQUpDLElBQUksR0FBWTtBQUNsQixXQUFPLEtBQUtwQixZQUFMLENBQWtCb0IsSUFBekI7QUFDRDs7QUE3RTREIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSG9tZXdvcmsgfSBmcm9tICdAYXR0YWNobWVudHMvc2lnYWEtaG9tZXdvcmstc3R1ZGVudCc7XG5pbXBvcnQgeyBTdHVkZW50Qm9uZCB9IGZyb20gJ0Bib25kcy9zaWdhYS1zdHVkZW50LWJvbmQnO1xuaW1wb3J0IHsgQ291cnNlU3R1ZGVudCB9IGZyb20gJ0Bjb3Vyc2VzL3NpZ2FhLWNvdXJzZS1zdHVkZW50JztcbmltcG9ydCB7IFNpZ2FhRm9ybSB9IGZyb20gJ0BzZXNzaW9uL3NpZ2FhLXBhZ2UnO1xuXG4vKipcbiAqXG4gKiBAY2F0ZWdvcnkgSW50ZXJuYWxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBY3Rpdml0eUhvbWV3b3JrRGF0YSB7XG4gIGNvdXJzZVRpdGxlOiBzdHJpbmc7XG4gIGhvbWV3b3JrVGl0bGU6IHN0cmluZztcbiAgZm9ybTogU2lnYWFGb3JtO1xuICBkYXRlOiBEYXRlO1xuICBkb25lOiBib29sZWFuO1xufVxuLyoqXG4gKiBJbnRlcmZhY2UgZGVzY3JpYmluZyBob21ld29yayBhY3Rpdml0eVxuICogQGNhdGVnb3J5IFB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEFjdGl2aXR5SG9tZXdvcmsge1xuICByZWFkb25seSB0eXBlOiAnaG9tZXdvcmsnO1xuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGFjdGl2aXR5IGNvdXJzZS5cbiAgICovXG4gIGdldENvdXJzZSgpOiBQcm9taXNlPENvdXJzZVN0dWRlbnQ+O1xuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGFjdGl2aXR5IGhvbWV3b3JrLlxuICAgKi9cbiAgZ2V0SG9tZXdvcmsoKTogUHJvbWlzZTxIb21ld29yaz47XG5cbiAgLyogSG9tZXdvcmsgaWQgKi9cbiAgaG9tZXdvcmtJZDogc3RyaW5nO1xuXG4gIC8qIEhvbWV3b3JrIHRpdGxlICovXG4gIGhvbWV3b3JrVGl0bGU6IHN0cmluZztcblxuICAvKiBIb21ld29yayBjb3Vyc2UgSUQgKi9cbiAgY291cnNlSWQ6IHN0cmluZztcblxuICAvKiBIb21ld29yayBjb3Vyc2UgdGl0bGUgKi9cbiAgY291cnNlVGl0bGU6IHN0cmluZztcblxuICAvKiBBY3Rpdml0eSBkYXRlICovXG4gIHJlYWRvbmx5IGRhdGU6IERhdGU7XG5cbiAgLyogSWYgdGhlIGhvbWV3b3JrIGRlYWRsaW5lIGhhcyBleHBpcmVkIG9yIGlmIGl0IGhhcyBhbHJlYWR5IGJlZW4gc2VudCAqL1xuICByZWFkb25seSBkb25lOiBib29sZWFuO1xufVxuLyoqXG4gKiBJbXBsZW1lbnRzIEFjdGl2aXR5SG9tZXdvcmtcbiAqIEBjYXRlZ29yeSBQdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIFNpZ2FhQWN0aXZpdHlIb21ld29yayBpbXBsZW1lbnRzIEFjdGl2aXR5SG9tZXdvcmsge1xuICBwdWJsaWMgcmVhZG9ubHkgdHlwZSA9ICdob21ld29yayc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBhY3Rpdml0eURhdGE6IEFjdGl2aXR5SG9tZXdvcmtEYXRhLFxuICAgIHByaXZhdGUgc3R1ZGVudEJvbmQ6IFN0dWRlbnRCb25kXG4gICkge31cblxuICAvKipcbiAgICogQGluaGVyaXRkb2NcbiAgICovXG4gIGdldCBob21ld29ya0lkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZpdHlEYXRhLmZvcm0ucG9zdFZhbHVlc1snaWQnXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdGRvY1xuICAgKi9cbiAgZ2V0IGhvbWV3b3JrVGl0bGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5hY3Rpdml0eURhdGEuaG9tZXdvcmtUaXRsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdGRvY1xuICAgKi9cbiAgZ2V0IGNvdXJzZUlkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZpdHlEYXRhLmZvcm0ucG9zdFZhbHVlc1snaWRUdXJtYSddO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0ZG9jXG4gICAqL1xuICBnZXQgY291cnNlVGl0bGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5hY3Rpdml0eURhdGEuY291cnNlVGl0bGU7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXRkb2NcbiAgICovXG4gIGFzeW5jIGdldENvdXJzZSgpOiBQcm9taXNlPENvdXJzZVN0dWRlbnQ+IHtcbiAgICBjb25zdCBjb3Vyc2VzID0gYXdhaXQgdGhpcy5zdHVkZW50Qm9uZC5nZXRDb3Vyc2VzKCk7XG4gICAgY29uc3QgY291cnNlID0gY291cnNlcy5maW5kKChjb3Vyc2UpID0+IGNvdXJzZS5pZCA9PT0gdGhpcy5jb3Vyc2VJZCk7XG4gICAgaWYgKCFjb3Vyc2UpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdTSUdBQTogQ2Fubm90IGZpbmQgdGhlIGNvdXJzZSByZWZlcmVuY2VkIGJ5IHRoZSBhY3Rpdml0eS4nXG4gICAgICApO1xuICAgIHJldHVybiBjb3Vyc2U7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXRkb2NcbiAgICovXG4gIGFzeW5jIGdldEhvbWV3b3JrKCk6IFByb21pc2U8SG9tZXdvcms+IHtcbiAgICBjb25zdCBjb3Vyc2UgPSBhd2FpdCB0aGlzLmdldENvdXJzZSgpO1xuICAgIGNvbnN0IGhvbWV3b3JrTGlzdCA9IGF3YWl0IGNvdXJzZS5nZXRIb21ld29ya3MoKTtcbiAgICBjb25zdCBob21ld29yayA9IGhvbWV3b3JrTGlzdC5maW5kKFxuICAgICAgKGhvbWV3b3JrKSA9PiBob21ld29yay5pZCA9PT0gdGhpcy5ob21ld29ya0lkXG4gICAgKTtcbiAgICBpZiAoIWhvbWV3b3JrKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnU0lHQUE6IENhbm5vdCBmaW5kIHRoZSBob21ld29yayByZWZlcmVuY2VkIGJ5IHRoZSBhY3Rpdml0eS4nXG4gICAgICApO1xuICAgIHJldHVybiBob21ld29yaztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdGRvY1xuICAgKi9cbiAgZ2V0IGRhdGUoKTogRGF0ZSB7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZpdHlEYXRhLmRhdGU7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXRkb2NcbiAgICovXG4gIGdldCBkb25lKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmFjdGl2aXR5RGF0YS5kb25lO1xuICB9XG59XG4iXX0=