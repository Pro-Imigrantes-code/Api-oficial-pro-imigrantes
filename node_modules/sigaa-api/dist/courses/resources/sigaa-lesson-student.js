"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SigaaLesson = void 0;

require("source-map-support/register");

var _updatableResource = require("../../resources/updatable-resource");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @category Internal
 */
class SigaaLesson extends _updatableResource.AbstractUpdatableResource {
  constructor(options, updater) {
    super(options.instanceIndentifier, updater);

    _defineProperty(this, "_title", void 0);

    _defineProperty(this, "_id", void 0);

    _defineProperty(this, "_contextText", void 0);

    _defineProperty(this, "_startDate", void 0);

    _defineProperty(this, "_endDate", void 0);

    _defineProperty(this, "_attachments", void 0);

    this.update(options);
  }

  update(options) {
    this._title = options.title;
    this._id = options.id;
    this._contextText = options.contentText;
    this._startDate = options.startDate;
    this._endDate = options.endDate;
    this._attachments = options.attachments;
    this.isClosed = false;
  }

  get title() {
    this.checkIfItWasClosed();
    return this._title;
  }

  get id() {
    this.checkIfItWasClosed();
    return this._id;
  }

  get contentText() {
    this.checkIfItWasClosed();
    return this._contextText;
  }

  get endDate() {
    this.checkIfItWasClosed();
    return this._endDate;
  }

  get startDate() {
    this.checkIfItWasClosed();
    return this._startDate;
  }

  get attachments() {
    this.checkIfItWasClosed();
    return this._attachments;
  }

}

exports.SigaaLesson = SigaaLesson;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb3Vyc2VzL3Jlc291cmNlcy9zaWdhYS1sZXNzb24tc3R1ZGVudC50cyJdLCJuYW1lcyI6WyJTaWdhYUxlc3NvbiIsIkFic3RyYWN0VXBkYXRhYmxlUmVzb3VyY2UiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJ1cGRhdGVyIiwiaW5zdGFuY2VJbmRlbnRpZmllciIsInVwZGF0ZSIsIl90aXRsZSIsInRpdGxlIiwiX2lkIiwiaWQiLCJfY29udGV4dFRleHQiLCJjb250ZW50VGV4dCIsIl9zdGFydERhdGUiLCJzdGFydERhdGUiLCJfZW5kRGF0ZSIsImVuZERhdGUiLCJfYXR0YWNobWVudHMiLCJhdHRhY2htZW50cyIsImlzQ2xvc2VkIiwiY2hlY2tJZkl0V2FzQ2xvc2VkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFTQTs7OztBQTJDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQSxXQUFOLFNBQTBCQyw0Q0FBMUIsQ0FBc0U7QUFRM0VDLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFzQkMsT0FBdEIsRUFBMkQ7QUFDcEUsVUFBTUQsT0FBTyxDQUFDRSxtQkFBZCxFQUFtQ0QsT0FBbkM7O0FBRG9FOztBQUFBOztBQUFBOztBQUFBOztBQUFBOztBQUFBOztBQUVwRSxTQUFLRSxNQUFMLENBQVlILE9BQVo7QUFDRDs7QUFFREcsRUFBQUEsTUFBTSxDQUFDSCxPQUFELEVBQTRCO0FBQ2hDLFNBQUtJLE1BQUwsR0FBY0osT0FBTyxDQUFDSyxLQUF0QjtBQUNBLFNBQUtDLEdBQUwsR0FBV04sT0FBTyxDQUFDTyxFQUFuQjtBQUNBLFNBQUtDLFlBQUwsR0FBb0JSLE9BQU8sQ0FBQ1MsV0FBNUI7QUFDQSxTQUFLQyxVQUFMLEdBQWtCVixPQUFPLENBQUNXLFNBQTFCO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQlosT0FBTyxDQUFDYSxPQUF4QjtBQUNBLFNBQUtDLFlBQUwsR0FBb0JkLE9BQU8sQ0FBQ2UsV0FBNUI7QUFDQSxTQUFLQyxRQUFMLEdBQWdCLEtBQWhCO0FBQ0Q7O0FBRVEsTUFBTFgsS0FBSyxHQUFXO0FBQ2xCLFNBQUtZLGtCQUFMO0FBQ0EsV0FBTyxLQUFLYixNQUFaO0FBQ0Q7O0FBRUssTUFBRkcsRUFBRSxHQUFXO0FBQ2YsU0FBS1Usa0JBQUw7QUFDQSxXQUFPLEtBQUtYLEdBQVo7QUFDRDs7QUFFYyxNQUFYRyxXQUFXLEdBQVc7QUFDeEIsU0FBS1Esa0JBQUw7QUFDQSxXQUFPLEtBQUtULFlBQVo7QUFDRDs7QUFFVSxNQUFQSyxPQUFPLEdBQVM7QUFDbEIsU0FBS0ksa0JBQUw7QUFDQSxXQUFPLEtBQUtMLFFBQVo7QUFDRDs7QUFFWSxNQUFURCxTQUFTLEdBQVM7QUFDcEIsU0FBS00sa0JBQUw7QUFDQSxXQUFPLEtBQUtQLFVBQVo7QUFDRDs7QUFFYyxNQUFYSyxXQUFXLEdBQWlCO0FBQzlCLFNBQUtFLGtCQUFMO0FBQ0EsV0FBTyxLQUFLSCxZQUFaO0FBQ0Q7O0FBbkQwRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvdXJzZUZvcnVtIH0gZnJvbSAnQGNvdXJzZVJlc291cmNlcy9mb3J1bS9zaWdhYS1jb3Vyc2UtZm9ydW0tc3R1ZGVudCc7XG5pbXBvcnQgeyBIb21ld29yayB9IGZyb20gJ0BhdHRhY2htZW50cy9zaWdhYS1ob21ld29yay1zdHVkZW50JztcbmltcG9ydCB7IExpbmtBdHRhY2htZW50IH0gZnJvbSAnQGF0dGFjaG1lbnRzL3NpZ2FhLWxpbmstc3R1ZGVudCc7XG5pbXBvcnQgeyBRdWl6IH0gZnJvbSAnQGF0dGFjaG1lbnRzL3NpZ2FhLXF1aXotc3R1ZGVudCc7XG5pbXBvcnQgeyBTdXJ2ZXkgfSBmcm9tICdAYXR0YWNobWVudHMvc2lnYWEtc3VydmV5LXN0dWRlbnQnO1xuaW1wb3J0IHsgVmlkZW9BdHRhY2htZW50IH0gZnJvbSAnQGF0dGFjaG1lbnRzL3NpZ2FhLXZpZGVvLXN0dWRlbnQnO1xuaW1wb3J0IHsgV2ViQ29udGVudCB9IGZyb20gJ0BhdHRhY2htZW50cy9zaWdhYS13ZWItY29udGVudC1zdHVkZW50JztcbmltcG9ydCB7IEZpbGUgfSBmcm9tICdAcmVzb3VyY2VzL3NpZ2FhLWZpbGUnO1xuaW1wb3J0IHsgVXBkYXRhYmxlUmVzb3VyY2VEYXRhIH0gZnJvbSAnQHJlc291cmNlcy9zaWdhYS1yZXNvdXJjZS1tYW5hZ2VyJztcbmltcG9ydCB7XG4gIEFic3RyYWN0VXBkYXRhYmxlUmVzb3VyY2UsXG4gIFVwZGF0YWJsZVJlc291cmNlLFxuICBVcGRhdGFibGVSZXNvdXJjZUNhbGxiYWNrXG59IGZyb20gJ0ByZXNvdXJjZXMvdXBkYXRhYmxlLXJlc291cmNlJztcblxuLyoqXG4gKiBAY2F0ZWdvcnkgUHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIEF0dGFjaG1lbnQgPVxuICB8IEZpbGVcbiAgfCBIb21ld29ya1xuICB8IFF1aXpcbiAgfCBDb3Vyc2VGb3J1bVxuICB8IFdlYkNvbnRlbnRcbiAgfCBTdXJ2ZXlcbiAgfCBMaW5rQXR0YWNobWVudFxuICB8IFZpZGVvQXR0YWNobWVudDtcblxuLyoqXG4gKiBAY2F0ZWdvcnkgSW50ZXJuYWxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMZXNzb25EYXRhIGV4dGVuZHMgVXBkYXRhYmxlUmVzb3VyY2VEYXRhIHtcbiAgdGl0bGU6IHN0cmluZztcbiAgaWQ6IHN0cmluZztcbiAgY29udGVudFRleHQ6IHN0cmluZztcbiAgc3RhcnREYXRlOiBEYXRlO1xuICBlbmREYXRlOiBEYXRlO1xuICBhdHRhY2htZW50czogQXR0YWNobWVudFtdO1xufVxuXG4vKipcbiAqIEBjYXRlZ29yeSBQdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMZXNzb24gZXh0ZW5kcyBVcGRhdGFibGVSZXNvdXJjZTxMZXNzb25EYXRhPiB7XG4gIHJlYWRvbmx5IHRpdGxlOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGlkOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGNvbnRlbnRUZXh0OiBzdHJpbmc7XG4gIHJlYWRvbmx5IGVuZERhdGU6IERhdGU7XG4gIHJlYWRvbmx5IHN0YXJ0RGF0ZTogRGF0ZTtcbiAgcmVhZG9ubHkgYXR0YWNobWVudHM6IEF0dGFjaG1lbnRbXTtcbn1cblxuLyoqXG4gKiBAY2F0ZWdvcnkgSW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNsYXNzIFNpZ2FhTGVzc29uIGV4dGVuZHMgQWJzdHJhY3RVcGRhdGFibGVSZXNvdXJjZSBpbXBsZW1lbnRzIExlc3NvbiB7XG4gIHByaXZhdGUgX3RpdGxlITogc3RyaW5nO1xuICBwcml2YXRlIF9pZCE6IHN0cmluZztcbiAgcHJpdmF0ZSBfY29udGV4dFRleHQhOiBzdHJpbmc7XG4gIHByaXZhdGUgX3N0YXJ0RGF0ZSE6IERhdGU7XG4gIHByaXZhdGUgX2VuZERhdGUhOiBEYXRlO1xuICBwcml2YXRlIF9hdHRhY2htZW50cyE6IEF0dGFjaG1lbnRbXTtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBMZXNzb25EYXRhLCB1cGRhdGVyPzogVXBkYXRhYmxlUmVzb3VyY2VDYWxsYmFjaykge1xuICAgIHN1cGVyKG9wdGlvbnMuaW5zdGFuY2VJbmRlbnRpZmllciwgdXBkYXRlcik7XG4gICAgdGhpcy51cGRhdGUob3B0aW9ucyk7XG4gIH1cblxuICB1cGRhdGUob3B0aW9uczogTGVzc29uRGF0YSk6IHZvaWQge1xuICAgIHRoaXMuX3RpdGxlID0gb3B0aW9ucy50aXRsZTtcbiAgICB0aGlzLl9pZCA9IG9wdGlvbnMuaWQ7XG4gICAgdGhpcy5fY29udGV4dFRleHQgPSBvcHRpb25zLmNvbnRlbnRUZXh0O1xuICAgIHRoaXMuX3N0YXJ0RGF0ZSA9IG9wdGlvbnMuc3RhcnREYXRlO1xuICAgIHRoaXMuX2VuZERhdGUgPSBvcHRpb25zLmVuZERhdGU7XG4gICAgdGhpcy5fYXR0YWNobWVudHMgPSBvcHRpb25zLmF0dGFjaG1lbnRzO1xuICAgIHRoaXMuaXNDbG9zZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGdldCB0aXRsZSgpOiBzdHJpbmcge1xuICAgIHRoaXMuY2hlY2tJZkl0V2FzQ2xvc2VkKCk7XG4gICAgcmV0dXJuIHRoaXMuX3RpdGxlO1xuICB9XG5cbiAgZ2V0IGlkKCk6IHN0cmluZyB7XG4gICAgdGhpcy5jaGVja0lmSXRXYXNDbG9zZWQoKTtcbiAgICByZXR1cm4gdGhpcy5faWQ7XG4gIH1cblxuICBnZXQgY29udGVudFRleHQoKTogc3RyaW5nIHtcbiAgICB0aGlzLmNoZWNrSWZJdFdhc0Nsb3NlZCgpO1xuICAgIHJldHVybiB0aGlzLl9jb250ZXh0VGV4dDtcbiAgfVxuXG4gIGdldCBlbmREYXRlKCk6IERhdGUge1xuICAgIHRoaXMuY2hlY2tJZkl0V2FzQ2xvc2VkKCk7XG4gICAgcmV0dXJuIHRoaXMuX2VuZERhdGU7XG4gIH1cblxuICBnZXQgc3RhcnREYXRlKCk6IERhdGUge1xuICAgIHRoaXMuY2hlY2tJZkl0V2FzQ2xvc2VkKCk7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0RGF0ZTtcbiAgfVxuXG4gIGdldCBhdHRhY2htZW50cygpOiBBdHRhY2htZW50W10ge1xuICAgIHRoaXMuY2hlY2tJZkl0V2FzQ2xvc2VkKCk7XG4gICAgcmV0dXJuIHRoaXMuX2F0dGFjaG1lbnRzO1xuICB9XG59XG4iXX0=