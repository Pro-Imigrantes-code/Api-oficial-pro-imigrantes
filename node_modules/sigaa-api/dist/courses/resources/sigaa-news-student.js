"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SigaaNews = void 0;

require("source-map-support/register");

var _updatableResource = require("../../resources/updatable-resource");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @category Internal
 */
class SigaaNews extends _updatableResource.AbstractUpdatableResource {
  constructor(http, parser, options, updater) {
    super(options.instanceIndentifier, updater);
    this.http = http;
    this.parser = parser;

    _defineProperty(this, "_form", void 0);

    _defineProperty(this, "_title", void 0);

    _defineProperty(this, "_content", void 0);

    _defineProperty(this, "_date", void 0);

    this.update(options);
  }

  update(newsOptions) {
    this._title = newsOptions.title;
    this._form = newsOptions.form;
    this.isClosed = false;
  }

  get id() {
    this.checkIfItWasClosed();
    return this._form.postValues.id;
  }

  get title() {
    this.checkIfItWasClosed();
    return this._title;
  }

  async getContent() {
    this.checkIfItWasClosed();

    if (this._content === undefined) {
      await this.getFullNews();
    }

    return this._content;
  }

  async getDate() {
    this.checkIfItWasClosed();

    if (this._date === undefined) {
      await this.getFullNews();
    }

    return this._date;
  }

  async getFullNews(retry = true) {
    try {
      const page = await this.http.post(this._form.action.href, this._form.postValues);

      if (page.statusCode !== 200) {
        throw new Error('SIGAA: Invalid status code at news page.');
      }

      const newsElement = page.$('ul.form');

      if (newsElement.length === 0) {
        throw new Error('SIGAA: Invalid news page.');
      }

      const els = newsElement.find('span');
      const dateString = this.parser.removeTagsHtml(els.eq(1).html());
      this._date = this.parser.parseDates(dateString, 1)[0];
      this._content = this.parser.removeTagsHtml(newsElement.find('div').html());
    } catch (err) {
      if (retry) {
        await this.updateInstance();
        return this.getFullNews(false);
      } else {
        throw err;
      }
    }
  }

}

exports.SigaaNews = SigaaNews;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb3Vyc2VzL3Jlc291cmNlcy9zaWdhYS1uZXdzLXN0dWRlbnQudHMiXSwibmFtZXMiOlsiU2lnYWFOZXdzIiwiQWJzdHJhY3RVcGRhdGFibGVSZXNvdXJjZSIsImNvbnN0cnVjdG9yIiwiaHR0cCIsInBhcnNlciIsIm9wdGlvbnMiLCJ1cGRhdGVyIiwiaW5zdGFuY2VJbmRlbnRpZmllciIsInVwZGF0ZSIsIm5ld3NPcHRpb25zIiwiX3RpdGxlIiwidGl0bGUiLCJfZm9ybSIsImZvcm0iLCJpc0Nsb3NlZCIsImlkIiwiY2hlY2tJZkl0V2FzQ2xvc2VkIiwicG9zdFZhbHVlcyIsImdldENvbnRlbnQiLCJfY29udGVudCIsInVuZGVmaW5lZCIsImdldEZ1bGxOZXdzIiwiZ2V0RGF0ZSIsIl9kYXRlIiwicmV0cnkiLCJwYWdlIiwicG9zdCIsImFjdGlvbiIsImhyZWYiLCJzdGF0dXNDb2RlIiwiRXJyb3IiLCJuZXdzRWxlbWVudCIsIiQiLCJsZW5ndGgiLCJlbHMiLCJmaW5kIiwiZGF0ZVN0cmluZyIsInJlbW92ZVRhZ3NIdG1sIiwiZXEiLCJodG1sIiwicGFyc2VEYXRlcyIsImVyciIsInVwZGF0ZUluc3RhbmNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFFQTs7OztBQTBCQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQSxTQUFOLFNBQXdCQyw0Q0FBeEIsQ0FBa0U7QUFNdkVDLEVBQUFBLFdBQVcsQ0FDREMsSUFEQyxFQUVEQyxNQUZDLEVBR1RDLE9BSFMsRUFJVEMsT0FKUyxFQUtUO0FBQ0EsVUFBTUQsT0FBTyxDQUFDRSxtQkFBZCxFQUFtQ0QsT0FBbkM7QUFEQSxTQUpRSCxJQUlSLEdBSlFBLElBSVI7QUFBQSxTQUhRQyxNQUdSLEdBSFFBLE1BR1I7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBRUEsU0FBS0ksTUFBTCxDQUFZSCxPQUFaO0FBQ0Q7O0FBRURHLEVBQUFBLE1BQU0sQ0FBQ0MsV0FBRCxFQUE4QjtBQUNsQyxTQUFLQyxNQUFMLEdBQWNELFdBQVcsQ0FBQ0UsS0FBMUI7QUFDQSxTQUFLQyxLQUFMLEdBQWFILFdBQVcsQ0FBQ0ksSUFBekI7QUFDQSxTQUFLQyxRQUFMLEdBQWdCLEtBQWhCO0FBQ0Q7O0FBRUssTUFBRkMsRUFBRSxHQUFXO0FBQ2YsU0FBS0Msa0JBQUw7QUFDQSxXQUFPLEtBQUtKLEtBQUwsQ0FBV0ssVUFBWCxDQUFzQkYsRUFBN0I7QUFDRDs7QUFFUSxNQUFMSixLQUFLLEdBQVc7QUFDbEIsU0FBS0ssa0JBQUw7QUFDQSxXQUFPLEtBQUtOLE1BQVo7QUFDRDs7QUFFZSxRQUFWUSxVQUFVLEdBQW9CO0FBQ2xDLFNBQUtGLGtCQUFMOztBQUNBLFFBQUksS0FBS0csUUFBTCxLQUFrQkMsU0FBdEIsRUFBaUM7QUFDL0IsWUFBTSxLQUFLQyxXQUFMLEVBQU47QUFDRDs7QUFDRCxXQUFPLEtBQUtGLFFBQVo7QUFDRDs7QUFFWSxRQUFQRyxPQUFPLEdBQWtCO0FBQzdCLFNBQUtOLGtCQUFMOztBQUNBLFFBQUksS0FBS08sS0FBTCxLQUFlSCxTQUFuQixFQUE4QjtBQUM1QixZQUFNLEtBQUtDLFdBQUwsRUFBTjtBQUNEOztBQUNELFdBQU8sS0FBS0UsS0FBWjtBQUNEOztBQUV3QixRQUFYRixXQUFXLENBQUNHLEtBQUssR0FBRyxJQUFULEVBQThCO0FBQ3JELFFBQUk7QUFDRixZQUFNQyxJQUFJLEdBQUcsTUFBTSxLQUFLdEIsSUFBTCxDQUFVdUIsSUFBVixDQUNqQixLQUFLZCxLQUFMLENBQVdlLE1BQVgsQ0FBa0JDLElBREQsRUFFakIsS0FBS2hCLEtBQUwsQ0FBV0ssVUFGTSxDQUFuQjs7QUFJQSxVQUFJUSxJQUFJLENBQUNJLFVBQUwsS0FBb0IsR0FBeEIsRUFBNkI7QUFDM0IsY0FBTSxJQUFJQyxLQUFKLENBQVUsMENBQVYsQ0FBTjtBQUNEOztBQUNELFlBQU1DLFdBQVcsR0FBR04sSUFBSSxDQUFDTyxDQUFMLENBQU8sU0FBUCxDQUFwQjs7QUFDQSxVQUFJRCxXQUFXLENBQUNFLE1BQVosS0FBdUIsQ0FBM0IsRUFBOEI7QUFDNUIsY0FBTSxJQUFJSCxLQUFKLENBQVUsMkJBQVYsQ0FBTjtBQUNEOztBQUNELFlBQU1JLEdBQUcsR0FBR0gsV0FBVyxDQUFDSSxJQUFaLENBQWlCLE1BQWpCLENBQVo7QUFDQSxZQUFNQyxVQUFVLEdBQUcsS0FBS2hDLE1BQUwsQ0FBWWlDLGNBQVosQ0FBMkJILEdBQUcsQ0FBQ0ksRUFBSixDQUFPLENBQVAsRUFBVUMsSUFBVixFQUEzQixDQUFuQjtBQUNBLFdBQUtoQixLQUFMLEdBQWEsS0FBS25CLE1BQUwsQ0FBWW9DLFVBQVosQ0FBdUJKLFVBQXZCLEVBQW1DLENBQW5DLEVBQXNDLENBQXRDLENBQWI7QUFDQSxXQUFLakIsUUFBTCxHQUFnQixLQUFLZixNQUFMLENBQVlpQyxjQUFaLENBQ2ROLFdBQVcsQ0FBQ0ksSUFBWixDQUFpQixLQUFqQixFQUF3QkksSUFBeEIsRUFEYyxDQUFoQjtBQUdELEtBbEJELENBa0JFLE9BQU9FLEdBQVAsRUFBWTtBQUNaLFVBQUlqQixLQUFKLEVBQVc7QUFDVCxjQUFNLEtBQUtrQixjQUFMLEVBQU47QUFDQSxlQUFPLEtBQUtyQixXQUFMLENBQWlCLEtBQWpCLENBQVA7QUFDRCxPQUhELE1BR087QUFDTCxjQUFNb0IsR0FBTjtBQUNEO0FBQ0Y7QUFDRjs7QUEzRXNFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFyc2VyIH0gZnJvbSAnQGhlbHBlcnMvc2lnYWEtcGFyc2VyJztcbmltcG9ydCB7IFVwZGF0YWJsZVJlc291cmNlRGF0YSB9IGZyb20gJ0ByZXNvdXJjZXMvc2lnYWEtcmVzb3VyY2UtbWFuYWdlcic7XG5pbXBvcnQge1xuICBBYnN0cmFjdFVwZGF0YWJsZVJlc291cmNlLFxuICBVcGRhdGFibGVSZXNvdXJjZSxcbiAgVXBkYXRhYmxlUmVzb3VyY2VDYWxsYmFja1xufSBmcm9tICdAcmVzb3VyY2VzL3VwZGF0YWJsZS1yZXNvdXJjZSc7XG5pbXBvcnQgeyBIVFRQIH0gZnJvbSAnQHNlc3Npb24vc2lnYWEtaHR0cCc7XG5pbXBvcnQgeyBTaWdhYUZvcm0gfSBmcm9tICdAc2Vzc2lvbi9zaWdhYS1wYWdlJztcblxuLyoqXG4gKiBAY2F0ZWdvcnkgSW50ZXJuYWxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBOZXdzRGF0YSBleHRlbmRzIFVwZGF0YWJsZVJlc291cmNlRGF0YSB7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIGZvcm06IFNpZ2FhRm9ybTtcbiAgaWQ6IHN0cmluZztcbn1cblxuLyoqXG4gKiBAY2F0ZWdvcnkgUHVibGljXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTmV3cyBleHRlbmRzIFVwZGF0YWJsZVJlc291cmNlPE5ld3NEYXRhPiB7XG4gIHJlYWRvbmx5IHRpdGxlOiBzdHJpbmc7XG4gIGdldENvbnRlbnQoKTogUHJvbWlzZTxzdHJpbmc+O1xuICBnZXREYXRlKCk6IFByb21pc2U8RGF0ZT47XG59XG5cbi8qKlxuICogQGNhdGVnb3J5IEludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBTaWdhYU5ld3MgZXh0ZW5kcyBBYnN0cmFjdFVwZGF0YWJsZVJlc291cmNlIGltcGxlbWVudHMgTmV3cyB7XG4gIHByaXZhdGUgX2Zvcm0hOiBTaWdhYUZvcm07XG4gIHByaXZhdGUgX3RpdGxlITogc3RyaW5nO1xuICBwcml2YXRlIF9jb250ZW50Pzogc3RyaW5nO1xuICBwcml2YXRlIF9kYXRlPzogRGF0ZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGh0dHA6IEhUVFAsXG4gICAgcHJpdmF0ZSBwYXJzZXI6IFBhcnNlcixcbiAgICBvcHRpb25zOiBOZXdzRGF0YSxcbiAgICB1cGRhdGVyOiBVcGRhdGFibGVSZXNvdXJjZUNhbGxiYWNrXG4gICkge1xuICAgIHN1cGVyKG9wdGlvbnMuaW5zdGFuY2VJbmRlbnRpZmllciwgdXBkYXRlcik7XG4gICAgdGhpcy51cGRhdGUob3B0aW9ucyk7XG4gIH1cblxuICB1cGRhdGUobmV3c09wdGlvbnM6IE5ld3NEYXRhKTogdm9pZCB7XG4gICAgdGhpcy5fdGl0bGUgPSBuZXdzT3B0aW9ucy50aXRsZTtcbiAgICB0aGlzLl9mb3JtID0gbmV3c09wdGlvbnMuZm9ybTtcbiAgICB0aGlzLmlzQ2xvc2VkID0gZmFsc2U7XG4gIH1cblxuICBnZXQgaWQoKTogc3RyaW5nIHtcbiAgICB0aGlzLmNoZWNrSWZJdFdhc0Nsb3NlZCgpO1xuICAgIHJldHVybiB0aGlzLl9mb3JtLnBvc3RWYWx1ZXMuaWQ7XG4gIH1cblxuICBnZXQgdGl0bGUoKTogc3RyaW5nIHtcbiAgICB0aGlzLmNoZWNrSWZJdFdhc0Nsb3NlZCgpO1xuICAgIHJldHVybiB0aGlzLl90aXRsZTtcbiAgfVxuXG4gIGFzeW5jIGdldENvbnRlbnQoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICB0aGlzLmNoZWNrSWZJdFdhc0Nsb3NlZCgpO1xuICAgIGlmICh0aGlzLl9jb250ZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGF3YWl0IHRoaXMuZ2V0RnVsbE5ld3MoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQgYXMgc3RyaW5nO1xuICB9XG5cbiAgYXN5bmMgZ2V0RGF0ZSgpOiBQcm9taXNlPERhdGU+IHtcbiAgICB0aGlzLmNoZWNrSWZJdFdhc0Nsb3NlZCgpO1xuICAgIGlmICh0aGlzLl9kYXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGF3YWl0IHRoaXMuZ2V0RnVsbE5ld3MoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2RhdGUgYXMgRGF0ZTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZ2V0RnVsbE5ld3MocmV0cnkgPSB0cnVlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHBhZ2UgPSBhd2FpdCB0aGlzLmh0dHAucG9zdChcbiAgICAgICAgdGhpcy5fZm9ybS5hY3Rpb24uaHJlZixcbiAgICAgICAgdGhpcy5fZm9ybS5wb3N0VmFsdWVzXG4gICAgICApO1xuICAgICAgaWYgKHBhZ2Uuc3RhdHVzQ29kZSAhPT0gMjAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU0lHQUE6IEludmFsaWQgc3RhdHVzIGNvZGUgYXQgbmV3cyBwYWdlLicpO1xuICAgICAgfVxuICAgICAgY29uc3QgbmV3c0VsZW1lbnQgPSBwYWdlLiQoJ3VsLmZvcm0nKTtcbiAgICAgIGlmIChuZXdzRWxlbWVudC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTSUdBQTogSW52YWxpZCBuZXdzIHBhZ2UuJyk7XG4gICAgICB9XG4gICAgICBjb25zdCBlbHMgPSBuZXdzRWxlbWVudC5maW5kKCdzcGFuJyk7XG4gICAgICBjb25zdCBkYXRlU3RyaW5nID0gdGhpcy5wYXJzZXIucmVtb3ZlVGFnc0h0bWwoZWxzLmVxKDEpLmh0bWwoKSk7XG4gICAgICB0aGlzLl9kYXRlID0gdGhpcy5wYXJzZXIucGFyc2VEYXRlcyhkYXRlU3RyaW5nLCAxKVswXTtcbiAgICAgIHRoaXMuX2NvbnRlbnQgPSB0aGlzLnBhcnNlci5yZW1vdmVUYWdzSHRtbChcbiAgICAgICAgbmV3c0VsZW1lbnQuZmluZCgnZGl2JykuaHRtbCgpXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKHJldHJ5KSB7XG4gICAgICAgIGF3YWl0IHRoaXMudXBkYXRlSW5zdGFuY2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RnVsbE5ld3MoZmFsc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19