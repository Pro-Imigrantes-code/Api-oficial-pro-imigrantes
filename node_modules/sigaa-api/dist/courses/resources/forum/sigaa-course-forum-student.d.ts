import { Parser } from '..\..\..\helpers/sigaa-parser';
import { File } from '..\..\..\resources/sigaa-file';
import { AbstractUpdatableResource, UpdatableResource, UpdatableResourceCallback } from '..\..\..\resources/updatable-resource';
import { HTTP } from '..\..\..\session/sigaa-http';
import { SigaaForm } from '..\..\..\session/sigaa-page';
import { CourseResourcesFactory } from '..\../sigaa-course-resources-factory';
import { UpdatableResourceData } from '..\..\..\resources/sigaa-resource-manager';
/**
 * Object that contains basic information about the class forum.
 * @category Internal
 */
export interface ForumData extends UpdatableResourceData {
    /**
     * Title of the forum.
     */
    title: string;
    /**
     * Id of the forum. This is unique
     */
    id: string;
    /**
     * Form with parameters and url to load the forum page.
     */
    form: SigaaForm;
    /**
     * creation date of the forum.
     */
    creationDate?: Date;
    /**
     * Like 'Uma única discussão simples'
     */
    forumType?: string;
    /**
     * Forum creator.
     */
    author?: string;
    /**
     * Number of topics
     */
    numOfTopics?: number;
}
/**
 * @category Public
 */
export interface CourseForum extends UpdatableResource<ForumData> {
    readonly type: 'forum';
    /**
     * If read monitoring is enabled.
     */
    getFlagMonitorReading(): Promise<boolean>;
    /**
     * Number of topics
     */
    getNumOfTopics(): Promise<number>;
    /**
     * Post topic in forum
     * @param title title of topic
     * @param body body of topic
     * @param file buffer of file attachment
     * @param notify if notify members
     */
    postTopic(title: string, body: string, file: string, notify: boolean): Promise<void>;
    /**
     * Post author
     */
    getAuthor(): Promise<string>;
    /**
     * File attached to the forum.
     */
    getFile(): Promise<File | undefined>;
    /**
     * Like 'Uma única discussão simples'
     */
    getForumType(): Promise<string>;
    readonly title: string;
    /**
     * creation date of the forum.
     */
    getCreationDate(): Promise<Date>;
}
/**
 * @category Internal
 */
export declare class SigaaCourseForum extends AbstractUpdatableResource implements CourseForum {
    private http;
    private parser;
    private courseResourcesFactory;
    /**
     * Type of instance
     */
    readonly type = "forum";
    /**
     * Form with parameters and url to load the forum page.
     */
    private _form;
    /**
     * Title of the forum.
     */
    private _title;
    /**
     * Number of topics
     */
    private _numOfTopics?;
    /**
     * Forum creator.
     */
    private _author?;
    /**
     * Like 'Uma única discussão simples'
     */
    private _forumType?;
    /**
     * Description of the forum.
     */
    private _description?;
    /**
     * Form to submit topics in the forum.
     */
    private _submitTopicPageForm?;
    /**
     * File attached to the forum.
     */
    private _file?;
    /**
     * the forum id.
     */
    private _id;
    /**
     * If read monitoring is enabled.
     */
    private _flagMonitorReading?;
    /**
     *
     */
    private _fullForumPromise;
    /**
     * creation date of the forum.
     */
    private _creationDate?;
    constructor(http: HTTP, parser: Parser, courseResourcesFactory: CourseResourcesFactory, forumOptions: ForumData, updater: UpdatableResourceCallback);
    update(forumOptions: ForumData): void;
    /**
     * Loads the forum page.
     * @param retry
     */
    private getForumPage;
    /**
     * Parse submit form in forum page.
     * @param page
     */
    private parseSubmitPageForm;
    /**
     * Parse main page of forum.
     * @param page
     */
    private parseForumTable;
    private loadForumPage;
    get title(): string;
    /**
     * Like 'Uma única discussão simples'
     */
    getForumType(): Promise<string>;
    getDescription(): Promise<string>;
    /**
     * Post author
     */
    getAuthor(): Promise<string>;
    /**
     * If notifications are enabled
     */
    getFlagMonitorReading(): Promise<boolean>;
    /**
     * creation date of the forum.
     */
    getCreationDate(): Promise<Date>;
    /**
     * File attached to the forum.
     */
    getFile(): Promise<File | undefined>;
    /**
     * Number of topics
     */
    getNumOfTopics(): Promise<number>;
    get id(): string;
    /**
     * Post topic in forum
     * @param title title of topic
     * @param body body of topic
     * @param file buffer of file attachment
     * @param notify if notify members
     */
    postTopic(title: string, body: string, file: string, notify: boolean): Promise<void>;
    getTopics(): Generator<Promise<boolean>, void, void>;
}
