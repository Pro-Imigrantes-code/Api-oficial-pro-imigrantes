"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SigaaCourseForum = void 0;

require("source-map-support/register");

var _url = require("url");

var _formdataNode = require("formdata-node");

var _updatableResource = require("../../../resources/updatable-resource");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @category Internal
 */
class SigaaCourseForum extends _updatableResource.AbstractUpdatableResource {
  /**
   * Type of instance
   */

  /**
   * Form with parameters and url to load the forum page.
   */

  /**
   * Title of the forum.
   */

  /**
   * Number of topics
   */

  /**
   * Forum creator.
   */

  /**
   * Like 'Uma única discussão simples'
   */

  /**
   * Description of the forum.
   */

  /**
   * Form to submit topics in the forum.
   */

  /**
   * File attached to the forum.
   */

  /**
   * the forum id.
   */

  /**
   * If read monitoring is enabled.
   */

  /**
   *
   */

  /**
   * creation date of the forum.
   */
  constructor(http, parser, courseResourcesFactory, forumOptions, updater) {
    super(forumOptions.instanceIndentifier, updater);
    this.http = http;
    this.parser = parser;
    this.courseResourcesFactory = courseResourcesFactory;

    _defineProperty(this, "type", 'forum');

    _defineProperty(this, "_form", void 0);

    _defineProperty(this, "_title", void 0);

    _defineProperty(this, "_numOfTopics", void 0);

    _defineProperty(this, "_author", void 0);

    _defineProperty(this, "_forumType", void 0);

    _defineProperty(this, "_description", void 0);

    _defineProperty(this, "_submitTopicPageForm", void 0);

    _defineProperty(this, "_file", void 0);

    _defineProperty(this, "_id", void 0);

    _defineProperty(this, "_flagMonitorReading", void 0);

    _defineProperty(this, "_fullForumPromise", null);

    _defineProperty(this, "_creationDate", void 0);

    this.update(forumOptions);
  }

  update(forumOptions) {
    this._title = forumOptions.title;
    this._form = forumOptions.form;
    this._id = forumOptions.id;

    if (forumOptions.forumType !== undefined) {
      this._forumType = forumOptions.forumType;
    }

    if (forumOptions.numOfTopics !== undefined) {
      this._numOfTopics = forumOptions.numOfTopics;
    }

    if (forumOptions.author !== undefined) {
      this._author = forumOptions.author;
    }
  }
  /**
   * Loads the forum page.
   * @param retry
   */


  async getForumPage(retry = true) {
    try {
      const page = await this.http.post(this._form.action.href, this._form.postValues);
      this.parseForumTable(page);
      this.parseSubmitPageForm(page);
    } catch (err) {
      if (retry) {
        await this.updateInstance();
        return this.getForumPage(false);
      } else {
        throw err;
      }
    }
  }
  /**
   * Parse submit form in forum page.
   * @param page
   */


  parseSubmitPageForm(page) {
    const formElement = page.$('form#form');
    const action = formElement.attr('action');
    if (!action) throw new Error('SIGAA: Forum submit page has form without action.');
    const actionURL = new _url.URL(action, page.url.href);
    const postValues = {};
    formElement.find("input:not([type='button'])").each((index, element) => {
      const name = page.$(element).attr('name');
      if (name) postValues[name] = page.$(element).val();
    });
    this._submitTopicPageForm = {
      action: actionURL,
      postValues
    };
  }
  /**
   * Parse main page of forum.
   * @param page
   */


  parseForumTable(page) {
    const tableElement = page.$('table.formAva > tbody');
    if (tableElement.length === 0) throw new Error('SIGAA: Unexpected forum page without table element.');
    const rows = tableElement.find('tr').toArray();

    for (const row of rows) {
      const headCellElement = page.$(row).find('th');
      const dataCellElement = page.$(row).find('td');
      const label = this.parser.removeTagsHtml(headCellElement.html());
      const content = this.parser.removeTagsHtml(dataCellElement.html());

      switch (label) {
        case 'Título:':
          {
            this._title = content;
            break;
          }

        case 'Descrição:':
          {
            this._description = content;
            break;
          }

        case 'Autor(a):':
          {
            this._author = content;
            break;
          }

        case 'Arquivo:':
          {
            const linkElement = page.$(dataCellElement).find('a');

            if (linkElement.length === 1) {
              const title = this.parser.removeTagsHtml(linkElement.html());
              const onClick = linkElement.attr('onclick');
              if (!onClick) throw new Error('SIGAA: Invalid file format at forum page.');
              const form = page.parseJSFCLJS(onClick);
              const fileObj = {
                title,
                description: '',
                form,
                id: form.postValues.id,
                instanceIndentifier: form.postValues.id
              };

              if (this._file) {
                this._file.update(fileObj);
              } else {
                this._file = this.courseResourcesFactory.createFileFromFileData(fileObj, this.http, async () => {
                  await this.getForumPage();
                });
              }
            } else {
              this._file = undefined;
            }

            break;
          }

        case 'Monitorar Leitura:':
          {
            if (content === 'SIM') {
              this._flagMonitorReading = true;
            } else {
              this._flagMonitorReading = false;
            }

            break;
          }

        case 'Tipo:':
          {
            this._forumType = content;
            break;
          }

        case 'Ordenação Padrão:':
          {
            //TODO
            break;
          }

        case 'Criado em:':
          {
            const dates = this.parser.parseDates(content, 1);
            this._creationDate = dates[0];
            break;
          }

        default:
          {
            console.log('WARNING:forum label not recognized:' + label);
          }
      }
    }
  }

  async loadForumPage() {
    if (!this._fullForumPromise) {
      this._fullForumPromise = this.getForumPage();

      this._fullForumPromise.finally(() => {
        this._fullForumPromise = null;
      });
    }

    return this._fullForumPromise;
  }

  get title() {
    this.checkIfItWasClosed();
    return this._title;
  }
  /**
   * Like 'Uma única discussão simples'
   */


  async getForumType() {
    this.checkIfItWasClosed();

    if (this._forumType === undefined) {
      await this.loadForumPage();
    }

    if (!this._forumType) throw new Error('SIGAA: Forum type could not be loaded.');
    return this._forumType;
  }

  async getDescription() {
    this.checkIfItWasClosed();

    if (this._description === undefined) {
      await this.loadForumPage();
    }

    if (!this._description) throw new Error('SIGAA: Forum description could not be loaded.');
    return this._description;
  }
  /**
   * Post author
   */


  async getAuthor() {
    this.checkIfItWasClosed();

    if (this._author === undefined) {
      await this.loadForumPage();
    }

    if (!this._author) throw new Error('SIGAA: Forum author could not be loaded.');
    return this._author;
  }
  /**
   * If notifications are enabled
   */


  async getFlagMonitorReading() {
    this.checkIfItWasClosed();

    if (this._flagMonitorReading === undefined) {
      await this.loadForumPage();
    }

    if (!this._flagMonitorReading) throw new Error('SIGAA: Forum monitor reading flag could not be loaded.');
    return this._flagMonitorReading;
  }
  /**
   * creation date of the forum.
   */


  async getCreationDate() {
    this.checkIfItWasClosed();

    if (this._creationDate === undefined) {
      await this.loadForumPage();
    }

    if (!this._creationDate) throw new Error('SIGAA: Forum creation date could not be loaded.');
    return this._creationDate;
  }
  /**
   * File attached to the forum.
   */


  async getFile() {
    this.checkIfItWasClosed();

    if (this._file === undefined) {
      await this.loadForumPage();
    }

    return this._file;
  }
  /**
   * Number of topics
   */


  async getNumOfTopics() {
    this.checkIfItWasClosed();

    if (this._numOfTopics === undefined) {
      await this.updateInstance();
    }

    if (!this._numOfTopics) throw new Error('SIGAA: Forum number of topics could not be loaded.');
    return this._numOfTopics;
  }

  get id() {
    this.checkIfItWasClosed();
    return this._id;
  }
  /**
   * Post topic in forum
   * @param title title of topic
   * @param body body of topic
   * @param file buffer of file attachment
   * @param notify if notify members
   */


  async postTopic(title, body, file, notify) {
    if (!title) {
      throw new Error('SIGAA: Title topic forum cannot be empty.');
    }

    if (!body) {
      throw new Error('SIGAA: Title body forum cannot be empty.');
    }

    if (!this._submitTopicPageForm) {
      await this.loadForumPage();
    }

    if (!this._submitTopicPageForm) throw new Error('SIGAA: Could not get the forum form.');
    const page = await this.http.post(this._submitTopicPageForm.action.href, this._submitTopicPageForm.postValues);
    const formElement = page.$('form#form');
    const action = formElement.attr('action');
    if (!action) throw new Error('SIGAA: Forum post page has form without action.');
    const actionURl = new _url.URL(action, page.url.href);
    const inputHiddens = formElement.find('form#form input[type="hidden"]').toArray();
    const fileInput = formElement.find('input[type="file"]');
    const submitButton = formElement.find('input[name="form:btnSalvar"]');
    const notifyCheckbox = formElement.find('input[type="checkbox"]');
    if (inputHiddens.length === 0 || submitButton.length !== 1 || notifyCheckbox.length !== 1 || fileInput.length !== 1) throw new Error('SIGAA: Forum post page format is different than expected.');
    const formData = new _formdataNode.FormData();

    for (const input of inputHiddens) {
      const name = page.$(input).attr('name');
      if (name) formData.set(name, page.$(input).val());
    }

    if (file) {
      const name = fileInput.attr('name');
      if (!name) throw new Error('SIGAA: Forum post page has input file without name.');
      formData.set(name, file);
    }

    if (notify) {
      const name = notifyCheckbox.attr('name');
      if (!name) throw new Error('SIGAA: Forum post page has notify checkbox without name.');
      formData.set(name, 'on');
    }

    formData.set('form:assunto', title);
    formData.set('form:mensagem', body);
    const sumbitName = page.$(submitButton).attr('name');
    if (!sumbitName) throw new Error('SIGAA: Forum post page has submit button without name.');
    formData.set(sumbitName, page.$(submitButton).val());
    const responsePage = await this.http.postMultipart(actionURl.href, formData);

    if (!responsePage.bodyDecoded.includes('Operação realizada com sucesso!')) {
      throw new Error('SIGAA: Unexpected response forum post page.');
    }
  }

  *getTopics() {
    let stillHaveTopics = true;

    while (stillHaveTopics) {
      yield (async () => {
        stillHaveTopics = false;
        return true;
      })();
    }
  }

}

exports.SigaaCourseForum = SigaaCourseForum;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb3Vyc2VzL3Jlc291cmNlcy9mb3J1bS9zaWdhYS1jb3Vyc2UtZm9ydW0tc3R1ZGVudC50cyJdLCJuYW1lcyI6WyJTaWdhYUNvdXJzZUZvcnVtIiwiQWJzdHJhY3RVcGRhdGFibGVSZXNvdXJjZSIsImNvbnN0cnVjdG9yIiwiaHR0cCIsInBhcnNlciIsImNvdXJzZVJlc291cmNlc0ZhY3RvcnkiLCJmb3J1bU9wdGlvbnMiLCJ1cGRhdGVyIiwiaW5zdGFuY2VJbmRlbnRpZmllciIsInVwZGF0ZSIsIl90aXRsZSIsInRpdGxlIiwiX2Zvcm0iLCJmb3JtIiwiX2lkIiwiaWQiLCJmb3J1bVR5cGUiLCJ1bmRlZmluZWQiLCJfZm9ydW1UeXBlIiwibnVtT2ZUb3BpY3MiLCJfbnVtT2ZUb3BpY3MiLCJhdXRob3IiLCJfYXV0aG9yIiwiZ2V0Rm9ydW1QYWdlIiwicmV0cnkiLCJwYWdlIiwicG9zdCIsImFjdGlvbiIsImhyZWYiLCJwb3N0VmFsdWVzIiwicGFyc2VGb3J1bVRhYmxlIiwicGFyc2VTdWJtaXRQYWdlRm9ybSIsImVyciIsInVwZGF0ZUluc3RhbmNlIiwiZm9ybUVsZW1lbnQiLCIkIiwiYXR0ciIsIkVycm9yIiwiYWN0aW9uVVJMIiwiVVJMIiwidXJsIiwiZmluZCIsImVhY2giLCJpbmRleCIsImVsZW1lbnQiLCJuYW1lIiwidmFsIiwiX3N1Ym1pdFRvcGljUGFnZUZvcm0iLCJ0YWJsZUVsZW1lbnQiLCJsZW5ndGgiLCJyb3dzIiwidG9BcnJheSIsInJvdyIsImhlYWRDZWxsRWxlbWVudCIsImRhdGFDZWxsRWxlbWVudCIsImxhYmVsIiwicmVtb3ZlVGFnc0h0bWwiLCJodG1sIiwiY29udGVudCIsIl9kZXNjcmlwdGlvbiIsImxpbmtFbGVtZW50Iiwib25DbGljayIsInBhcnNlSlNGQ0xKUyIsImZpbGVPYmoiLCJkZXNjcmlwdGlvbiIsIl9maWxlIiwiY3JlYXRlRmlsZUZyb21GaWxlRGF0YSIsIl9mbGFnTW9uaXRvclJlYWRpbmciLCJkYXRlcyIsInBhcnNlRGF0ZXMiLCJfY3JlYXRpb25EYXRlIiwiY29uc29sZSIsImxvZyIsImxvYWRGb3J1bVBhZ2UiLCJfZnVsbEZvcnVtUHJvbWlzZSIsImZpbmFsbHkiLCJjaGVja0lmSXRXYXNDbG9zZWQiLCJnZXRGb3J1bVR5cGUiLCJnZXREZXNjcmlwdGlvbiIsImdldEF1dGhvciIsImdldEZsYWdNb25pdG9yUmVhZGluZyIsImdldENyZWF0aW9uRGF0ZSIsImdldEZpbGUiLCJnZXROdW1PZlRvcGljcyIsInBvc3RUb3BpYyIsImJvZHkiLCJmaWxlIiwibm90aWZ5IiwiYWN0aW9uVVJsIiwiaW5wdXRIaWRkZW5zIiwiZmlsZUlucHV0Iiwic3VibWl0QnV0dG9uIiwibm90aWZ5Q2hlY2tib3giLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwiaW5wdXQiLCJzZXQiLCJzdW1iaXROYW1lIiwicmVzcG9uc2VQYWdlIiwicG9zdE11bHRpcGFydCIsImJvZHlEZWNvZGVkIiwiaW5jbHVkZXMiLCJnZXRUb3BpY3MiLCJzdGlsbEhhdmVUb3BpY3MiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUdBOzs7O0FBc0dBO0FBQ0E7QUFDQTtBQUNPLE1BQU1BLGdCQUFOLFNBQ0dDLDRDQURILENBR1A7QUFDRTtBQUNGO0FBQ0E7O0FBR0U7QUFDRjtBQUNBOztBQUdFO0FBQ0Y7QUFDQTs7QUFHRTtBQUNGO0FBQ0E7O0FBR0U7QUFDRjtBQUNBOztBQUdFO0FBQ0Y7QUFDQTs7QUFHRTtBQUNGO0FBQ0E7O0FBR0U7QUFDRjtBQUNBOztBQUdFO0FBQ0Y7QUFDQTs7QUFHRTtBQUNGO0FBQ0E7O0FBRUU7QUFDRjtBQUNBOztBQUdFO0FBQ0Y7QUFDQTs7QUFHRTtBQUNGO0FBQ0E7QUFHRUMsRUFBQUEsV0FBVyxDQUNEQyxJQURDLEVBRURDLE1BRkMsRUFHREMsc0JBSEMsRUFJVEMsWUFKUyxFQUtUQyxPQUxTLEVBTVQ7QUFDQSxVQUFNRCxZQUFZLENBQUNFLG1CQUFuQixFQUF3Q0QsT0FBeEM7QUFE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RixJQUFMLENBQVVnRyxhQUFWLENBQ3pCWCxTQUFTLENBQUM1RCxJQURlLEVBRXpCaUUsUUFGeUIsQ0FBM0I7O0FBSUEsUUFBSSxDQUFDSyxZQUFZLENBQUNFLFdBQWIsQ0FBeUJDLFFBQXpCLENBQWtDLGlDQUFsQyxDQUFMLEVBQTJFO0FBQ3pFLFlBQU0sSUFBSWhFLEtBQUosQ0FBVSw2Q0FBVixDQUFOO0FBQ0Q7QUFDRjs7QUFFUyxHQUFUaUUsU0FBUyxHQUE0QztBQUNwRCxRQUFJQyxlQUFlLEdBQUcsSUFBdEI7O0FBQ0EsV0FBT0EsZUFBUCxFQUF3QjtBQUN0QixZQUFNLENBQUMsWUFBOEI7QUFDbkNBLFFBQUFBLGVBQWUsR0FBRyxLQUFsQjtBQUNBLGVBQU8sSUFBUDtBQUNELE9BSEssR0FBTjtBQUlEO0FBQ0Y7O0FBemFIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVVJMIH0gZnJvbSAndXJsJztcbmltcG9ydCB7IEZvcm1EYXRhIH0gZnJvbSAnZm9ybWRhdGEtbm9kZSc7XG5pbXBvcnQgeyBQYXJzZXIgfSBmcm9tICdAaGVscGVycy9zaWdhYS1wYXJzZXInO1xuaW1wb3J0IHsgRmlsZSwgRmlsZURhdGEgfSBmcm9tICdAcmVzb3VyY2VzL3NpZ2FhLWZpbGUnO1xuaW1wb3J0IHtcbiAgQWJzdHJhY3RVcGRhdGFibGVSZXNvdXJjZSxcbiAgVXBkYXRhYmxlUmVzb3VyY2UsXG4gIFVwZGF0YWJsZVJlc291cmNlQ2FsbGJhY2tcbn0gZnJvbSAnQHJlc291cmNlcy91cGRhdGFibGUtcmVzb3VyY2UnO1xuaW1wb3J0IHsgSFRUUCB9IGZyb20gJ0BzZXNzaW9uL3NpZ2FhLWh0dHAnO1xuaW1wb3J0IHsgU2lnYWFGb3JtLCBQYWdlIH0gZnJvbSAnQHNlc3Npb24vc2lnYWEtcGFnZSc7XG5pbXBvcnQgeyBDb3Vyc2VSZXNvdXJjZXNGYWN0b3J5IH0gZnJvbSAnQGNvdXJzZXMvc2lnYWEtY291cnNlLXJlc291cmNlcy1mYWN0b3J5JztcbmltcG9ydCB7IFVwZGF0YWJsZVJlc291cmNlRGF0YSB9IGZyb20gJ0ByZXNvdXJjZXMvc2lnYWEtcmVzb3VyY2UtbWFuYWdlcic7XG5cbi8qKlxuICogT2JqZWN0IHRoYXQgY29udGFpbnMgYmFzaWMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNsYXNzIGZvcnVtLlxuICogQGNhdGVnb3J5IEludGVybmFsXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRm9ydW1EYXRhIGV4dGVuZHMgVXBkYXRhYmxlUmVzb3VyY2VEYXRhIHtcbiAgLyoqXG4gICAqIFRpdGxlIG9mIHRoZSBmb3J1bS5cbiAgICovXG4gIHRpdGxlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIElkIG9mIHRoZSBmb3J1bS4gVGhpcyBpcyB1bmlxdWVcbiAgICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEZvcm0gd2l0aCBwYXJhbWV0ZXJzIGFuZCB1cmwgdG8gbG9hZCB0aGUgZm9ydW0gcGFnZS5cbiAgICovXG4gIGZvcm06IFNpZ2FhRm9ybTtcblxuICAvKipcbiAgICogY3JlYXRpb24gZGF0ZSBvZiB0aGUgZm9ydW0uXG4gICAqL1xuICBjcmVhdGlvbkRhdGU/OiBEYXRlO1xuXG4gIC8qKlxuICAgKiBMaWtlICdVbWEgw7puaWNhIGRpc2N1c3PDo28gc2ltcGxlcydcbiAgICovXG4gIGZvcnVtVHlwZT86IHN0cmluZztcblxuICAvKipcbiAgICogRm9ydW0gY3JlYXRvci5cbiAgICovXG4gIGF1dGhvcj86IHN0cmluZztcblxuICAvKipcbiAgICogTnVtYmVyIG9mIHRvcGljc1xuICAgKi9cbiAgbnVtT2ZUb3BpY3M/OiBudW1iZXI7XG59XG5cbi8qKlxuICogQGNhdGVnb3J5IFB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIENvdXJzZUZvcnVtIGV4dGVuZHMgVXBkYXRhYmxlUmVzb3VyY2U8Rm9ydW1EYXRhPiB7XG4gIHJlYWRvbmx5IHR5cGU6ICdmb3J1bSc7XG5cbiAgLyoqXG4gICAqIElmIHJlYWQgbW9uaXRvcmluZyBpcyBlbmFibGVkLlxuICAgKi9cbiAgZ2V0RmxhZ01vbml0b3JSZWFkaW5nKCk6IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiB0b3BpY3NcbiAgICovXG4gIGdldE51bU9mVG9waWNzKCk6IFByb21pc2U8bnVtYmVyPjtcblxuICAvKipcbiAgICogUG9zdCB0b3BpYyBpbiBmb3J1bVxuICAgKiBAcGFyYW0gdGl0bGUgdGl0bGUgb2YgdG9waWNcbiAgICogQHBhcmFtIGJvZHkgYm9keSBvZiB0b3BpY1xuICAgKiBAcGFyYW0gZmlsZSBidWZmZXIgb2YgZmlsZSBhdHRhY2htZW50XG4gICAqIEBwYXJhbSBub3RpZnkgaWYgbm90aWZ5IG1lbWJlcnNcbiAgICovXG4gIHBvc3RUb3BpYyhcbiAgICB0aXRsZTogc3RyaW5nLFxuICAgIGJvZHk6IHN0cmluZyxcbiAgICBmaWxlOiBzdHJpbmcsXG4gICAgbm90aWZ5OiBib29sZWFuXG4gICk6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIFBvc3QgYXV0aG9yXG4gICAqL1xuICBnZXRBdXRob3IoKTogUHJvbWlzZTxzdHJpbmc+O1xuICAvKipcbiAgICogRmlsZSBhdHRhY2hlZCB0byB0aGUgZm9ydW0uXG4gICAqL1xuICBnZXRGaWxlKCk6IFByb21pc2U8RmlsZSB8IHVuZGVmaW5lZD47XG4gIC8qKlxuICAgKiBMaWtlICdVbWEgw7puaWNhIGRpc2N1c3PDo28gc2ltcGxlcydcbiAgICovXG4gIGdldEZvcnVtVHlwZSgpOiBQcm9taXNlPHN0cmluZz47XG5cbiAgcmVhZG9ubHkgdGl0bGU6IHN0cmluZztcblxuICAvKipcbiAgICogY3JlYXRpb24gZGF0ZSBvZiB0aGUgZm9ydW0uXG4gICAqL1xuICBnZXRDcmVhdGlvbkRhdGUoKTogUHJvbWlzZTxEYXRlPjtcbn1cblxuLyoqXG4gKiBAY2F0ZWdvcnkgSW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNsYXNzIFNpZ2FhQ291cnNlRm9ydW1cbiAgZXh0ZW5kcyBBYnN0cmFjdFVwZGF0YWJsZVJlc291cmNlXG4gIGltcGxlbWVudHMgQ291cnNlRm9ydW1cbntcbiAgLyoqXG4gICAqIFR5cGUgb2YgaW5zdGFuY2VcbiAgICovXG4gIHJlYWRvbmx5IHR5cGUgPSAnZm9ydW0nO1xuXG4gIC8qKlxuICAgKiBGb3JtIHdpdGggcGFyYW1ldGVycyBhbmQgdXJsIHRvIGxvYWQgdGhlIGZvcnVtIHBhZ2UuXG4gICAqL1xuICBwcml2YXRlIF9mb3JtITogU2lnYWFGb3JtO1xuXG4gIC8qKlxuICAgKiBUaXRsZSBvZiB0aGUgZm9ydW0uXG4gICAqL1xuICBwcml2YXRlIF90aXRsZSE6IHN0cmluZztcblxuICAvKipcbiAgICogTnVtYmVyIG9mIHRvcGljc1xuICAgKi9cbiAgcHJpdmF0ZSBfbnVtT2ZUb3BpY3M/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEZvcnVtIGNyZWF0b3IuXG4gICAqL1xuICBwcml2YXRlIF9hdXRob3I/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIExpa2UgJ1VtYSDDum5pY2EgZGlzY3Vzc8OjbyBzaW1wbGVzJ1xuICAgKi9cbiAgcHJpdmF0ZSBfZm9ydW1UeXBlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBEZXNjcmlwdGlvbiBvZiB0aGUgZm9ydW0uXG4gICAqL1xuICBwcml2YXRlIF9kZXNjcmlwdGlvbj86IHN0cmluZztcblxuICAvKipcbiAgICogRm9ybSB0byBzdWJtaXQgdG9waWNzIGluIHRoZSBmb3J1bS5cbiAgICovXG4gIHByaXZhdGUgX3N1Ym1pdFRvcGljUGFnZUZvcm0/OiBTaWdhYUZvcm07XG5cbiAgLyoqXG4gICAqIEZpbGUgYXR0YWNoZWQgdG8gdGhlIGZvcnVtLlxuICAgKi9cbiAgcHJpdmF0ZSBfZmlsZT86IEZpbGU7XG5cbiAgLyoqXG4gICAqIHRoZSBmb3J1bSBpZC5cbiAgICovXG4gIHByaXZhdGUgX2lkITogc3RyaW5nO1xuICAvKipcbiAgICogSWYgcmVhZCBtb25pdG9yaW5nIGlzIGVuYWJsZWQuXG4gICAqL1xuICBwcml2YXRlIF9mbGFnTW9uaXRvclJlYWRpbmc/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgcHJpdmF0ZSBfZnVsbEZvcnVtUHJvbWlzZTogUHJvbWlzZTx2b2lkPiB8IG51bGwgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBjcmVhdGlvbiBkYXRlIG9mIHRoZSBmb3J1bS5cbiAgICovXG4gIHByaXZhdGUgX2NyZWF0aW9uRGF0ZT86IERhdGU7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBodHRwOiBIVFRQLFxuICAgIHByaXZhdGUgcGFyc2VyOiBQYXJzZXIsXG4gICAgcHJpdmF0ZSBjb3Vyc2VSZXNvdXJjZXNGYWN0b3J5OiBDb3Vyc2VSZXNvdXJjZXNGYWN0b3J5LFxuICAgIGZvcnVtT3B0aW9uczogRm9ydW1EYXRhLFxuICAgIHVwZGF0ZXI6IFVwZGF0YWJsZVJlc291cmNlQ2FsbGJhY2tcbiAgKSB7XG4gICAgc3VwZXIoZm9ydW1PcHRpb25zLmluc3RhbmNlSW5kZW50aWZpZXIsIHVwZGF0ZXIpO1xuICAgIHRoaXMudXBkYXRlKGZvcnVtT3B0aW9ucyk7XG4gIH1cblxuICB1cGRhdGUoZm9ydW1PcHRpb25zOiBGb3J1bURhdGEpOiB2b2lkIHtcbiAgICB0aGlzLl90aXRsZSA9IGZvcnVtT3B0aW9ucy50aXRsZTtcbiAgICB0aGlzLl9mb3JtID0gZm9ydW1PcHRpb25zLmZvcm07XG4gICAgdGhpcy5faWQgPSBmb3J1bU9wdGlvbnMuaWQ7XG5cbiAgICBpZiAoZm9ydW1PcHRpb25zLmZvcnVtVHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl9mb3J1bVR5cGUgPSBmb3J1bU9wdGlvbnMuZm9ydW1UeXBlO1xuICAgIH1cbiAgICBpZiAoZm9ydW1PcHRpb25zLm51bU9mVG9waWNzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX251bU9mVG9waWNzID0gZm9ydW1PcHRpb25zLm51bU9mVG9waWNzO1xuICAgIH1cbiAgICBpZiAoZm9ydW1PcHRpb25zLmF1dGhvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl9hdXRob3IgPSBmb3J1bU9wdGlvbnMuYXV0aG9yO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkcyB0aGUgZm9ydW0gcGFnZS5cbiAgICogQHBhcmFtIHJldHJ5XG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGdldEZvcnVtUGFnZShyZXRyeSA9IHRydWUpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcGFnZSA9IGF3YWl0IHRoaXMuaHR0cC5wb3N0KFxuICAgICAgICB0aGlzLl9mb3JtLmFjdGlvbi5ocmVmLFxuICAgICAgICB0aGlzLl9mb3JtLnBvc3RWYWx1ZXNcbiAgICAgICk7XG5cbiAgICAgIHRoaXMucGFyc2VGb3J1bVRhYmxlKHBhZ2UpO1xuICAgICAgdGhpcy5wYXJzZVN1Ym1pdFBhZ2VGb3JtKHBhZ2UpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKHJldHJ5KSB7XG4gICAgICAgIGF3YWl0IHRoaXMudXBkYXRlSW5zdGFuY2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Rm9ydW1QYWdlKGZhbHNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFBhcnNlIHN1Ym1pdCBmb3JtIGluIGZvcnVtIHBhZ2UuXG4gICAqIEBwYXJhbSBwYWdlXG4gICAqL1xuICBwcml2YXRlIHBhcnNlU3VibWl0UGFnZUZvcm0ocGFnZTogUGFnZSk6IHZvaWQge1xuICAgIGNvbnN0IGZvcm1FbGVtZW50ID0gcGFnZS4kKCdmb3JtI2Zvcm0nKTtcbiAgICBjb25zdCBhY3Rpb24gPSBmb3JtRWxlbWVudC5hdHRyKCdhY3Rpb24nKTtcbiAgICBpZiAoIWFjdGlvbilcbiAgICAgIHRocm93IG5ldyBFcnJvcignU0lHQUE6IEZvcnVtIHN1Ym1pdCBwYWdlIGhhcyBmb3JtIHdpdGhvdXQgYWN0aW9uLicpO1xuICAgIGNvbnN0IGFjdGlvblVSTCA9IG5ldyBVUkwoYWN0aW9uLCBwYWdlLnVybC5ocmVmKTtcbiAgICBjb25zdCBwb3N0VmFsdWVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge307XG4gICAgZm9ybUVsZW1lbnRcbiAgICAgIC5maW5kKFwiaW5wdXQ6bm90KFt0eXBlPSdidXR0b24nXSlcIilcbiAgICAgIC5lYWNoKChpbmRleDogbnVtYmVyLCBlbGVtZW50OiBjaGVlcmlvLkVsZW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgbmFtZSA9IHBhZ2UuJChlbGVtZW50KS5hdHRyKCduYW1lJyk7XG4gICAgICAgIGlmIChuYW1lKSBwb3N0VmFsdWVzW25hbWVdID0gcGFnZS4kKGVsZW1lbnQpLnZhbCgpO1xuICAgICAgfSk7XG5cbiAgICB0aGlzLl9zdWJtaXRUb3BpY1BhZ2VGb3JtID0ge1xuICAgICAgYWN0aW9uOiBhY3Rpb25VUkwsXG4gICAgICBwb3N0VmFsdWVzXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSBtYWluIHBhZ2Ugb2YgZm9ydW0uXG4gICAqIEBwYXJhbSBwYWdlXG4gICAqL1xuICBwcml2YXRlIHBhcnNlRm9ydW1UYWJsZShwYWdlOiBQYWdlKTogdm9pZCB7XG4gICAgY29uc3QgdGFibGVFbGVtZW50ID0gcGFnZS4kKCd0YWJsZS5mb3JtQXZhID4gdGJvZHknKTtcbiAgICBpZiAodGFibGVFbGVtZW50Lmxlbmd0aCA9PT0gMClcbiAgICAgIHRocm93IG5ldyBFcnJvcignU0lHQUE6IFVuZXhwZWN0ZWQgZm9ydW0gcGFnZSB3aXRob3V0IHRhYmxlIGVsZW1lbnQuJyk7XG5cbiAgICBjb25zdCByb3dzID0gdGFibGVFbGVtZW50LmZpbmQoJ3RyJykudG9BcnJheSgpO1xuICAgIGZvciAoY29uc3Qgcm93IG9mIHJvd3MpIHtcbiAgICAgIGNvbnN0IGhlYWRDZWxsRWxlbWVudCA9IHBhZ2UuJChyb3cpLmZpbmQoJ3RoJyk7XG4gICAgICBjb25zdCBkYXRhQ2VsbEVsZW1lbnQgPSBwYWdlLiQocm93KS5maW5kKCd0ZCcpO1xuICAgICAgY29uc3QgbGFiZWwgPSB0aGlzLnBhcnNlci5yZW1vdmVUYWdzSHRtbChoZWFkQ2VsbEVsZW1lbnQuaHRtbCgpKTtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSB0aGlzLnBhcnNlci5yZW1vdmVUYWdzSHRtbChkYXRhQ2VsbEVsZW1lbnQuaHRtbCgpKTtcbiAgICAgIHN3aXRjaCAobGFiZWwpIHtcbiAgICAgICAgY2FzZSAnVMOtdHVsbzonOiB7XG4gICAgICAgICAgdGhpcy5fdGl0bGUgPSBjb250ZW50O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ0Rlc2NyacOnw6NvOic6IHtcbiAgICAgICAgICB0aGlzLl9kZXNjcmlwdGlvbiA9IGNvbnRlbnQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnQXV0b3IoYSk6Jzoge1xuICAgICAgICAgIHRoaXMuX2F1dGhvciA9IGNvbnRlbnQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnQXJxdWl2bzonOiB7XG4gICAgICAgICAgY29uc3QgbGlua0VsZW1lbnQgPSBwYWdlLiQoZGF0YUNlbGxFbGVtZW50KS5maW5kKCdhJyk7XG4gICAgICAgICAgaWYgKGxpbmtFbGVtZW50Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgY29uc3QgdGl0bGUgPSB0aGlzLnBhcnNlci5yZW1vdmVUYWdzSHRtbChsaW5rRWxlbWVudC5odG1sKCkpO1xuICAgICAgICAgICAgY29uc3Qgb25DbGljayA9IGxpbmtFbGVtZW50LmF0dHIoJ29uY2xpY2snKTtcbiAgICAgICAgICAgIGlmICghb25DbGljaylcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTSUdBQTogSW52YWxpZCBmaWxlIGZvcm1hdCBhdCBmb3J1bSBwYWdlLicpO1xuICAgICAgICAgICAgY29uc3QgZm9ybSA9IHBhZ2UucGFyc2VKU0ZDTEpTKG9uQ2xpY2spO1xuICAgICAgICAgICAgY29uc3QgZmlsZU9iajogRmlsZURhdGEgPSB7XG4gICAgICAgICAgICAgIHRpdGxlLFxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJycsXG4gICAgICAgICAgICAgIGZvcm0sXG4gICAgICAgICAgICAgIGlkOiBmb3JtLnBvc3RWYWx1ZXMuaWQsXG4gICAgICAgICAgICAgIGluc3RhbmNlSW5kZW50aWZpZXI6IGZvcm0ucG9zdFZhbHVlcy5pZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9maWxlKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2ZpbGUudXBkYXRlKGZpbGVPYmopO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5fZmlsZSA9IHRoaXMuY291cnNlUmVzb3VyY2VzRmFjdG9yeS5jcmVhdGVGaWxlRnJvbUZpbGVEYXRhKFxuICAgICAgICAgICAgICAgIGZpbGVPYmosXG4gICAgICAgICAgICAgICAgdGhpcy5odHRwLFxuICAgICAgICAgICAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZ2V0Rm9ydW1QYWdlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9maWxlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdNb25pdG9yYXIgTGVpdHVyYTonOiB7XG4gICAgICAgICAgaWYgKGNvbnRlbnQgPT09ICdTSU0nKSB7XG4gICAgICAgICAgICB0aGlzLl9mbGFnTW9uaXRvclJlYWRpbmcgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9mbGFnTW9uaXRvclJlYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnVGlwbzonOiB7XG4gICAgICAgICAgdGhpcy5fZm9ydW1UeXBlID0gY29udGVudDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdPcmRlbmHDp8OjbyBQYWRyw6NvOic6IHtcbiAgICAgICAgICAvL1RPRE9cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdDcmlhZG8gZW06Jzoge1xuICAgICAgICAgIGNvbnN0IGRhdGVzID0gdGhpcy5wYXJzZXIucGFyc2VEYXRlcyhjb250ZW50LCAxKTtcbiAgICAgICAgICB0aGlzLl9jcmVhdGlvbkRhdGUgPSBkYXRlc1swXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1dBUk5JTkc6Zm9ydW0gbGFiZWwgbm90IHJlY29nbml6ZWQ6JyArIGxhYmVsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgbG9hZEZvcnVtUGFnZSgpIHtcbiAgICBpZiAoIXRoaXMuX2Z1bGxGb3J1bVByb21pc2UpIHtcbiAgICAgIHRoaXMuX2Z1bGxGb3J1bVByb21pc2UgPSB0aGlzLmdldEZvcnVtUGFnZSgpO1xuICAgICAgdGhpcy5fZnVsbEZvcnVtUHJvbWlzZS5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgdGhpcy5fZnVsbEZvcnVtUHJvbWlzZSA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2Z1bGxGb3J1bVByb21pc2U7XG4gIH1cblxuICBnZXQgdGl0bGUoKTogc3RyaW5nIHtcbiAgICB0aGlzLmNoZWNrSWZJdFdhc0Nsb3NlZCgpO1xuICAgIHJldHVybiB0aGlzLl90aXRsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaWtlICdVbWEgw7puaWNhIGRpc2N1c3PDo28gc2ltcGxlcydcbiAgICovXG4gIGFzeW5jIGdldEZvcnVtVHlwZSgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHRoaXMuY2hlY2tJZkl0V2FzQ2xvc2VkKCk7XG4gICAgaWYgKHRoaXMuX2ZvcnVtVHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBhd2FpdCB0aGlzLmxvYWRGb3J1bVBhZ2UoKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLl9mb3J1bVR5cGUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NJR0FBOiBGb3J1bSB0eXBlIGNvdWxkIG5vdCBiZSBsb2FkZWQuJyk7XG4gICAgcmV0dXJuIHRoaXMuX2ZvcnVtVHlwZTtcbiAgfVxuXG4gIGFzeW5jIGdldERlc2NyaXB0aW9uKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgdGhpcy5jaGVja0lmSXRXYXNDbG9zZWQoKTtcbiAgICBpZiAodGhpcy5fZGVzY3JpcHRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgYXdhaXQgdGhpcy5sb2FkRm9ydW1QYWdlKCk7XG4gICAgfVxuICAgIGlmICghdGhpcy5fZGVzY3JpcHRpb24pXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NJR0FBOiBGb3J1bSBkZXNjcmlwdGlvbiBjb3VsZCBub3QgYmUgbG9hZGVkLicpO1xuICAgIHJldHVybiB0aGlzLl9kZXNjcmlwdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBQb3N0IGF1dGhvclxuICAgKi9cbiAgYXN5bmMgZ2V0QXV0aG9yKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgdGhpcy5jaGVja0lmSXRXYXNDbG9zZWQoKTtcbiAgICBpZiAodGhpcy5fYXV0aG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGF3YWl0IHRoaXMubG9hZEZvcnVtUGFnZSgpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuX2F1dGhvcilcbiAgICAgIHRocm93IG5ldyBFcnJvcignU0lHQUE6IEZvcnVtIGF1dGhvciBjb3VsZCBub3QgYmUgbG9hZGVkLicpO1xuICAgIHJldHVybiB0aGlzLl9hdXRob3I7XG4gIH1cblxuICAvKipcbiAgICogSWYgbm90aWZpY2F0aW9ucyBhcmUgZW5hYmxlZFxuICAgKi9cbiAgYXN5bmMgZ2V0RmxhZ01vbml0b3JSZWFkaW5nKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHRoaXMuY2hlY2tJZkl0V2FzQ2xvc2VkKCk7XG4gICAgaWYgKHRoaXMuX2ZsYWdNb25pdG9yUmVhZGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBhd2FpdCB0aGlzLmxvYWRGb3J1bVBhZ2UoKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLl9mbGFnTW9uaXRvclJlYWRpbmcpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NJR0FBOiBGb3J1bSBtb25pdG9yIHJlYWRpbmcgZmxhZyBjb3VsZCBub3QgYmUgbG9hZGVkLicpO1xuICAgIHJldHVybiB0aGlzLl9mbGFnTW9uaXRvclJlYWRpbmc7XG4gIH1cblxuICAvKipcbiAgICogY3JlYXRpb24gZGF0ZSBvZiB0aGUgZm9ydW0uXG4gICAqL1xuICBhc3luYyBnZXRDcmVhdGlvbkRhdGUoKTogUHJvbWlzZTxEYXRlPiB7XG4gICAgdGhpcy5jaGVja0lmSXRXYXNDbG9zZWQoKTtcbiAgICBpZiAodGhpcy5fY3JlYXRpb25EYXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGF3YWl0IHRoaXMubG9hZEZvcnVtUGFnZSgpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuX2NyZWF0aW9uRGF0ZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcignU0lHQUE6IEZvcnVtIGNyZWF0aW9uIGRhdGUgY291bGQgbm90IGJlIGxvYWRlZC4nKTtcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRpb25EYXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbGUgYXR0YWNoZWQgdG8gdGhlIGZvcnVtLlxuICAgKi9cbiAgYXN5bmMgZ2V0RmlsZSgpOiBQcm9taXNlPEZpbGUgfCB1bmRlZmluZWQ+IHtcbiAgICB0aGlzLmNoZWNrSWZJdFdhc0Nsb3NlZCgpO1xuICAgIGlmICh0aGlzLl9maWxlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGF3YWl0IHRoaXMubG9hZEZvcnVtUGFnZSgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fZmlsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgdG9waWNzXG4gICAqL1xuICBhc3luYyBnZXROdW1PZlRvcGljcygpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIHRoaXMuY2hlY2tJZkl0V2FzQ2xvc2VkKCk7XG4gICAgaWYgKHRoaXMuX251bU9mVG9waWNzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGF3YWl0IHRoaXMudXBkYXRlSW5zdGFuY2UoKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLl9udW1PZlRvcGljcylcbiAgICAgIHRocm93IG5ldyBFcnJvcignU0lHQUE6IEZvcnVtIG51bWJlciBvZiB0b3BpY3MgY291bGQgbm90IGJlIGxvYWRlZC4nKTtcbiAgICByZXR1cm4gdGhpcy5fbnVtT2ZUb3BpY3M7XG4gIH1cblxuICBnZXQgaWQoKTogc3RyaW5nIHtcbiAgICB0aGlzLmNoZWNrSWZJdFdhc0Nsb3NlZCgpO1xuICAgIHJldHVybiB0aGlzLl9pZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBQb3N0IHRvcGljIGluIGZvcnVtXG4gICAqIEBwYXJhbSB0aXRsZSB0aXRsZSBvZiB0b3BpY1xuICAgKiBAcGFyYW0gYm9keSBib2R5IG9mIHRvcGljXG4gICAqIEBwYXJhbSBmaWxlIGJ1ZmZlciBvZiBmaWxlIGF0dGFjaG1lbnRcbiAgICogQHBhcmFtIG5vdGlmeSBpZiBub3RpZnkgbWVtYmVyc1xuICAgKi9cbiAgYXN5bmMgcG9zdFRvcGljKFxuICAgIHRpdGxlOiBzdHJpbmcsXG4gICAgYm9keTogc3RyaW5nLFxuICAgIGZpbGU6IHN0cmluZyxcbiAgICBub3RpZnk6IGJvb2xlYW5cbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKCF0aXRsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTSUdBQTogVGl0bGUgdG9waWMgZm9ydW0gY2Fubm90IGJlIGVtcHR5LicpO1xuICAgIH1cbiAgICBpZiAoIWJvZHkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignU0lHQUE6IFRpdGxlIGJvZHkgZm9ydW0gY2Fubm90IGJlIGVtcHR5LicpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuX3N1Ym1pdFRvcGljUGFnZUZvcm0pIHtcbiAgICAgIGF3YWl0IHRoaXMubG9hZEZvcnVtUGFnZSgpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuX3N1Ym1pdFRvcGljUGFnZUZvcm0pXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NJR0FBOiBDb3VsZCBub3QgZ2V0IHRoZSBmb3J1bSBmb3JtLicpO1xuICAgIGNvbnN0IHBhZ2UgPSBhd2FpdCB0aGlzLmh0dHAucG9zdChcbiAgICAgIHRoaXMuX3N1Ym1pdFRvcGljUGFnZUZvcm0uYWN0aW9uLmhyZWYsXG4gICAgICB0aGlzLl9zdWJtaXRUb3BpY1BhZ2VGb3JtLnBvc3RWYWx1ZXNcbiAgICApO1xuXG4gICAgY29uc3QgZm9ybUVsZW1lbnQgPSBwYWdlLiQoJ2Zvcm0jZm9ybScpO1xuICAgIGNvbnN0IGFjdGlvbiA9IGZvcm1FbGVtZW50LmF0dHIoJ2FjdGlvbicpO1xuICAgIGlmICghYWN0aW9uKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTSUdBQTogRm9ydW0gcG9zdCBwYWdlIGhhcyBmb3JtIHdpdGhvdXQgYWN0aW9uLicpO1xuICAgIGNvbnN0IGFjdGlvblVSbCA9IG5ldyBVUkwoYWN0aW9uLCBwYWdlLnVybC5ocmVmKTtcblxuICAgIGNvbnN0IGlucHV0SGlkZGVucyA9IGZvcm1FbGVtZW50XG4gICAgICAuZmluZCgnZm9ybSNmb3JtIGlucHV0W3R5cGU9XCJoaWRkZW5cIl0nKVxuICAgICAgLnRvQXJyYXkoKTtcbiAgICBjb25zdCBmaWxlSW5wdXQgPSBmb3JtRWxlbWVudC5maW5kKCdpbnB1dFt0eXBlPVwiZmlsZVwiXScpO1xuICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGZvcm1FbGVtZW50LmZpbmQoJ2lucHV0W25hbWU9XCJmb3JtOmJ0blNhbHZhclwiXScpO1xuICAgIGNvbnN0IG5vdGlmeUNoZWNrYm94ID0gZm9ybUVsZW1lbnQuZmluZCgnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJyk7XG4gICAgaWYgKFxuICAgICAgaW5wdXRIaWRkZW5zLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgc3VibWl0QnV0dG9uLmxlbmd0aCAhPT0gMSB8fFxuICAgICAgbm90aWZ5Q2hlY2tib3gubGVuZ3RoICE9PSAxIHx8XG4gICAgICBmaWxlSW5wdXQubGVuZ3RoICE9PSAxXG4gICAgKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnU0lHQUE6IEZvcnVtIHBvc3QgcGFnZSBmb3JtYXQgaXMgZGlmZmVyZW50IHRoYW4gZXhwZWN0ZWQuJ1xuICAgICAgKTtcblxuICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgZm9yIChjb25zdCBpbnB1dCBvZiBpbnB1dEhpZGRlbnMpIHtcbiAgICAgIGNvbnN0IG5hbWUgPSBwYWdlLiQoaW5wdXQpLmF0dHIoJ25hbWUnKTtcbiAgICAgIGlmIChuYW1lKSBmb3JtRGF0YS5zZXQobmFtZSwgcGFnZS4kKGlucHV0KS52YWwoKSk7XG4gICAgfVxuICAgIGlmIChmaWxlKSB7XG4gICAgICBjb25zdCBuYW1lID0gZmlsZUlucHV0LmF0dHIoJ25hbWUnKTtcbiAgICAgIGlmICghbmFtZSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTSUdBQTogRm9ydW0gcG9zdCBwYWdlIGhhcyBpbnB1dCBmaWxlIHdpdGhvdXQgbmFtZS4nKTtcbiAgICAgIGZvcm1EYXRhLnNldChuYW1lLCBmaWxlKTtcbiAgICB9XG4gICAgaWYgKG5vdGlmeSkge1xuICAgICAgY29uc3QgbmFtZSA9IG5vdGlmeUNoZWNrYm94LmF0dHIoJ25hbWUnKTtcbiAgICAgIGlmICghbmFtZSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdTSUdBQTogRm9ydW0gcG9zdCBwYWdlIGhhcyBub3RpZnkgY2hlY2tib3ggd2l0aG91dCBuYW1lLidcbiAgICAgICAgKTtcbiAgICAgIGZvcm1EYXRhLnNldChuYW1lLCAnb24nKTtcbiAgICB9XG4gICAgZm9ybURhdGEuc2V0KCdmb3JtOmFzc3VudG8nLCB0aXRsZSk7XG4gICAgZm9ybURhdGEuc2V0KCdmb3JtOm1lbnNhZ2VtJywgYm9keSk7XG4gICAgY29uc3Qgc3VtYml0TmFtZSA9IHBhZ2UuJChzdWJtaXRCdXR0b24pLmF0dHIoJ25hbWUnKTtcbiAgICBpZiAoIXN1bWJpdE5hbWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NJR0FBOiBGb3J1bSBwb3N0IHBhZ2UgaGFzIHN1Ym1pdCBidXR0b24gd2l0aG91dCBuYW1lLicpO1xuXG4gICAgZm9ybURhdGEuc2V0KHN1bWJpdE5hbWUsIHBhZ2UuJChzdWJtaXRCdXR0b24pLnZhbCgpKTtcbiAgICBjb25zdCByZXNwb25zZVBhZ2UgPSBhd2FpdCB0aGlzLmh0dHAucG9zdE11bHRpcGFydChcbiAgICAgIGFjdGlvblVSbC5ocmVmLFxuICAgICAgZm9ybURhdGFcbiAgICApO1xuICAgIGlmICghcmVzcG9uc2VQYWdlLmJvZHlEZWNvZGVkLmluY2x1ZGVzKCdPcGVyYcOnw6NvIHJlYWxpemFkYSBjb20gc3VjZXNzbyEnKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTSUdBQTogVW5leHBlY3RlZCByZXNwb25zZSBmb3J1bSBwb3N0IHBhZ2UuJyk7XG4gICAgfVxuICB9XG5cbiAgKmdldFRvcGljcygpOiBHZW5lcmF0b3I8UHJvbWlzZTxib29sZWFuPiwgdm9pZCwgdm9pZD4ge1xuICAgIGxldCBzdGlsbEhhdmVUb3BpY3MgPSB0cnVlO1xuICAgIHdoaWxlIChzdGlsbEhhdmVUb3BpY3MpIHtcbiAgICAgIHlpZWxkIChhc3luYyAoKTogUHJvbWlzZTxib29sZWFuPiA9PiB7XG4gICAgICAgIHN0aWxsSGF2ZVRvcGljcyA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pKCk7XG4gICAgfVxuICB9XG59XG4iXX0=