"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SigaaHomework = void 0;

require("source-map-support/register");

var _url = require("url");

var _updatableResource = require("../../../resources/updatable-resource");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @category Internal
 */
class SigaaHomework extends _updatableResource.AbstractUpdatableResource {
  constructor(http, courseResourcesFactory, options, updater) {
    super(options.instanceIndentifier, updater);
    this.http = http;
    this.courseResourcesFactory = courseResourcesFactory;

    _defineProperty(this, "type", 'homework');

    _defineProperty(this, "_title", void 0);

    _defineProperty(this, "_startDate", void 0);

    _defineProperty(this, "_endDate", void 0);

    _defineProperty(this, "_id", void 0);

    _defineProperty(this, "_formSendHomework", void 0);

    _defineProperty(this, "_formViewHomeworkSubmitted", void 0);

    _defineProperty(this, "_description", void 0);

    _defineProperty(this, "_haveGrade", void 0);

    _defineProperty(this, "_isGroupHomework", void 0);

    _defineProperty(this, "_file", void 0);

    this.update(options);
  }

  update(options) {
    this._title = options.title;
    this._startDate = options.startDate;
    this._endDate = options.endDate;
    this._id = options.id;
    this._formSendHomework = options.formSendHomework;
    this._formViewHomeworkSubmitted = options.formViewHomeworkSubmitted;
    this._description = options.description;
    this._haveGrade = options.haveGrade;
    this._isGroupHomework = options.isGroupHomework;
    this.isClosed = false;
  }

  get title() {
    this.checkIfItWasClosed();
    return this._title;
  }

  get id() {
    this.checkIfItWasClosed();
    return this._id || null;
  }

  async getFlagHaveGrade() {
    if (this._haveGrade === undefined) {
      await this.updateInstance();
    }

    this.checkIfItWasClosed();
    if (this._haveGrade === undefined) throw new Error('SIGAA: Homework have grade could not be loaded.');
    return this._haveGrade;
  }

  async getFlagIsGroupHomework() {
    if (this._isGroupHomework === undefined) {
      await this.updateInstance();
    }

    this.checkIfItWasClosed();
    if (this._isGroupHomework === undefined) throw new Error('SIGAA: Homework group flag could not be loaded.');
    return this._isGroupHomework;
  }

  async getDescription() {
    if (!this._description) {
      await this.updateInstance();
    }

    this.checkIfItWasClosed();
    if (!this._description) throw new Error('SIGAA: Homework description could not be loaded.');
    return this._description;
  }

  get endDate() {
    this.checkIfItWasClosed();
    return this._endDate;
  }

  get startDate() {
    this.checkIfItWasClosed();
    return this._startDate;
  }
  /**
   * @inheritdoc
   */


  async getAttachmentFile() {
    if (this._formSendHomework === undefined && this._formViewHomeworkSubmitted === undefined) await this.updateInstance();
    if (!this._formSendHomework) throw new Error('SIGAA: Homework has been submitted.');
    const page = await this.http.post(this._formSendHomework.action.href, this._formSendHomework.postValues);
    const path = page.$('ul.form > li > div > a').attr('href');
    if (!path) throw new Error('SIGAA: Homework has no file.');
    const url = new _url.URL(path, page.url);
    const fileKey = url.searchParams.get('key');
    const fileId = url.searchParams.get('idArquivo');
    if (fileId == null || fileKey == null) throw new Error('SIGAA: File URL is invalid.');
    const file = {
      title: '',
      description: '',
      key: fileKey,
      id: fileId,
      instanceIndentifier: fileId
    };

    if (!this._file) {
      this._file = this.courseResourcesFactory.createFileFromFileData(file, this.http, async () => {
        throw new Error('SIGAA: Invalid file in Homework.');
      });
    } else {
      this._file.update(file);
    }

    return this._file;
  }

}

exports.SigaaHomework = SigaaHomework;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,