"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CourseResourcesManager = void 0;

require("source-map-support/register");

var _sigaaResourceManager = require("../resources/sigaa-resource-manager");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Class that stores course resources.
 * @category Internal
 */
class CourseResourcesManager {
  constructor(http, courseResourcesFactory, course) {
    _defineProperty(this, "lessons", void 0);

    _defineProperty(this, "files", void 0);

    _defineProperty(this, "homework", void 0);

    _defineProperty(this, "forums", void 0);

    _defineProperty(this, "quizzes", void 0);

    _defineProperty(this, "survey", void 0);

    _defineProperty(this, "webContents", void 0);

    _defineProperty(this, "news", void 0);

    this.lessons = new _sigaaResourceManager.ResourceManager(options => courseResourcesFactory.createLessonFromLessonData(options, http, async () => {
      await course.getLessons();
    }));
    this.files = new _sigaaResourceManager.ResourceManager(options => courseResourcesFactory.createFileFromFileData(options, http, async () => {
      await course.getFiles();
    }));
    this.homework = new _sigaaResourceManager.ResourceManager(options => courseResourcesFactory.createHomeworkFromHomeworkData(options, http, async () => {
      await course.getHomeworks();
    }));
    this.forums = new _sigaaResourceManager.ResourceManager(options => courseResourcesFactory.createForumFromForumData(options, http, async () => {
      await course.getForums();
    }));
    this.quizzes = new _sigaaResourceManager.ResourceManager(options => courseResourcesFactory.createQuizFromQuizData(options, http, async () => {
      await course.getQuizzes();
    }));
    this.news = new _sigaaResourceManager.ResourceManager(options => courseResourcesFactory.createNewsFromNewsData(options, http, async () => {
      await course.getNews();
    }));
    this.webContents = new _sigaaResourceManager.ResourceManager(options => courseResourcesFactory.createWebContentFromWebContentData(options, http, async () => {
      await course.getWebContents();
    }));
    this.survey = new _sigaaResourceManager.ResourceManager(options => courseResourcesFactory.createSurveyFromSurveyData(options, http, async () => {
      await course.getSurveys();
    }));
  }

}

exports.CourseResourcesManager = CourseResourcesManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3Vyc2VzL3NpZ2FhLWNvdXJzZS1yZXNvdXJjZXMtbWFuYWdlci50cyJdLCJuYW1lcyI6WyJDb3Vyc2VSZXNvdXJjZXNNYW5hZ2VyIiwiY29uc3RydWN0b3IiLCJodHRwIiwiY291cnNlUmVzb3VyY2VzRmFjdG9yeSIsImNvdXJzZSIsImxlc3NvbnMiLCJSZXNvdXJjZU1hbmFnZXIiLCJvcHRpb25zIiwiY3JlYXRlTGVzc29uRnJvbUxlc3NvbkRhdGEiLCJnZXRMZXNzb25zIiwiZmlsZXMiLCJjcmVhdGVGaWxlRnJvbUZpbGVEYXRhIiwiZ2V0RmlsZXMiLCJob21ld29yayIsImNyZWF0ZUhvbWV3b3JrRnJvbUhvbWV3b3JrRGF0YSIsImdldEhvbWV3b3JrcyIsImZvcnVtcyIsImNyZWF0ZUZvcnVtRnJvbUZvcnVtRGF0YSIsImdldEZvcnVtcyIsInF1aXp6ZXMiLCJjcmVhdGVRdWl6RnJvbVF1aXpEYXRhIiwiZ2V0UXVpenplcyIsIm5ld3MiLCJjcmVhdGVOZXdzRnJvbU5ld3NEYXRhIiwiZ2V0TmV3cyIsIndlYkNvbnRlbnRzIiwiY3JlYXRlV2ViQ29udGVudEZyb21XZWJDb250ZW50RGF0YSIsImdldFdlYkNvbnRlbnRzIiwic3VydmV5IiwiY3JlYXRlU3VydmV5RnJvbVN1cnZleURhdGEiLCJnZXRTdXJ2ZXlzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFLQTs7OztBQWFBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sTUFBTUEsc0JBQU4sQ0FBNkI7QUFDbENDLEVBQUFBLFdBQVcsQ0FDVEMsSUFEUyxFQUVUQyxzQkFGUyxFQUdUQyxNQUhTLEVBSVQ7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFDQSxTQUFLQyxPQUFMLEdBQWUsSUFBSUMscUNBQUosQ0FBcUJDLE9BQUQsSUFDakNKLHNCQUFzQixDQUFDSywwQkFBdkIsQ0FDRUQsT0FERixFQUVFTCxJQUZGLEVBR0UsWUFBWTtBQUNWLFlBQU1FLE1BQU0sQ0FBQ0ssVUFBUCxFQUFOO0FBQ0QsS0FMSCxDQURhLENBQWY7QUFVQSxTQUFLQyxLQUFMLEdBQWEsSUFBSUoscUNBQUosQ0FBcUJDLE9BQUQsSUFDL0JKLHNCQUFzQixDQUFDUSxzQkFBdkIsQ0FBOENKLE9BQTlDLEVBQXVETCxJQUF2RCxFQUE2RCxZQUFZO0FBQ3ZFLFlBQU1FLE1BQU0sQ0FBQ1EsUUFBUCxFQUFOO0FBQ0QsS0FGRCxDQURXLENBQWI7QUFNQSxTQUFLQyxRQUFMLEdBQWdCLElBQUlQLHFDQUFKLENBQXFCQyxPQUFELElBQ2xDSixzQkFBc0IsQ0FBQ1csOEJBQXZCLENBQ0VQLE9BREYsRUFFRUwsSUFGRixFQUdFLFlBQVk7QUFDVixZQUFNRSxNQUFNLENBQUNXLFlBQVAsRUFBTjtBQUNELEtBTEgsQ0FEYyxDQUFoQjtBQVVBLFNBQUtDLE1BQUwsR0FBYyxJQUFJVixxQ0FBSixDQUFxQkMsT0FBRCxJQUNoQ0osc0JBQXNCLENBQUNjLHdCQUF2QixDQUNFVixPQURGLEVBRUVMLElBRkYsRUFHRSxZQUFZO0FBQ1YsWUFBTUUsTUFBTSxDQUFDYyxTQUFQLEVBQU47QUFDRCxLQUxILENBRFksQ0FBZDtBQVVBLFNBQUtDLE9BQUwsR0FBZSxJQUFJYixxQ0FBSixDQUFxQkMsT0FBRCxJQUNqQ0osc0JBQXNCLENBQUNpQixzQkFBdkIsQ0FBOENiLE9BQTlDLEVBQXVETCxJQUF2RCxFQUE2RCxZQUFZO0FBQ3ZFLFlBQU1FLE1BQU0sQ0FBQ2lCLFVBQVAsRUFBTjtBQUNELEtBRkQsQ0FEYSxDQUFmO0FBTUEsU0FBS0MsSUFBTCxHQUFZLElBQUloQixxQ0FBSixDQUFxQkMsT0FBRCxJQUM5Qkosc0JBQXNCLENBQUNvQixzQkFBdkIsQ0FBOENoQixPQUE5QyxFQUF1REwsSUFBdkQsRUFBNkQsWUFBWTtBQUN2RSxZQUFNRSxNQUFNLENBQUNvQixPQUFQLEVBQU47QUFDRCxLQUZELENBRFUsQ0FBWjtBQU1BLFNBQUtDLFdBQUwsR0FBbUIsSUFBSW5CLHFDQUFKLENBQXFCQyxPQUFELElBQ3JDSixzQkFBc0IsQ0FBQ3VCLGtDQUF2QixDQUNFbkIsT0FERixFQUVFTCxJQUZGLEVBR0UsWUFBWTtBQUNWLFlBQU1FLE1BQU0sQ0FBQ3VCLGNBQVAsRUFBTjtBQUNELEtBTEgsQ0FEaUIsQ0FBbkI7QUFVQSxTQUFLQyxNQUFMLEdBQWMsSUFBSXRCLHFDQUFKLENBQXFCQyxPQUFELElBQ2hDSixzQkFBc0IsQ0FBQzBCLDBCQUF2QixDQUNFdEIsT0FERixFQUVFTCxJQUZGLEVBR0UsWUFBWTtBQUNWLFlBQU1FLE1BQU0sQ0FBQzBCLFVBQVAsRUFBTjtBQUNELEtBTEgsQ0FEWSxDQUFkO0FBU0Q7O0FBekVpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhUVFAgfSBmcm9tICdAc2Vzc2lvbi9zaWdhYS1odHRwJztcbmltcG9ydCB7IEhvbWV3b3JrLCBIb21ld29ya0RhdGEgfSBmcm9tICdAYXR0YWNobWVudHMvc2lnYWEtaG9tZXdvcmstc3R1ZGVudCc7XG5pbXBvcnQgeyBRdWl6LCBRdWl6RGF0YSB9IGZyb20gJ0BhdHRhY2htZW50cy9zaWdhYS1xdWl6LXN0dWRlbnQnO1xuaW1wb3J0IHsgU3VydmV5LCBTdXJ2ZXlEYXRhIH0gZnJvbSAnQGF0dGFjaG1lbnRzL3NpZ2FhLXN1cnZleS1zdHVkZW50JztcbmltcG9ydCB7IEZpbGVEYXRhLCBGaWxlIH0gZnJvbSAnQHJlc291cmNlcy9zaWdhYS1maWxlJztcbmltcG9ydCB7IFJlc291cmNlTWFuYWdlciB9IGZyb20gJ0ByZXNvdXJjZXMvc2lnYWEtcmVzb3VyY2UtbWFuYWdlcic7XG5pbXBvcnQgeyBDb3Vyc2VSZXNvdXJjZXNGYWN0b3J5IH0gZnJvbSAnLi9zaWdhYS1jb3Vyc2UtcmVzb3VyY2VzLWZhY3RvcnknO1xuaW1wb3J0IHsgTGVzc29uLCBMZXNzb25EYXRhIH0gZnJvbSAnLi9yZXNvdXJjZXMvc2lnYWEtbGVzc29uLXN0dWRlbnQnO1xuaW1wb3J0IHsgTmV3cywgTmV3c0RhdGEgfSBmcm9tICcuL3Jlc291cmNlcy9zaWdhYS1uZXdzLXN0dWRlbnQnO1xuaW1wb3J0IHsgQ291cnNlU3R1ZGVudCB9IGZyb20gJy4vc2lnYWEtY291cnNlLXN0dWRlbnQnO1xuaW1wb3J0IHtcbiAgQ291cnNlRm9ydW0sXG4gIEZvcnVtRGF0YVxufSBmcm9tICdAY291cnNlUmVzb3VyY2VzL2ZvcnVtL3NpZ2FhLWNvdXJzZS1mb3J1bS1zdHVkZW50JztcbmltcG9ydCB7XG4gIFdlYkNvbnRlbnQsXG4gIFdlYkNvbnRlbnREYXRhXG59IGZyb20gJ0BhdHRhY2htZW50cy9zaWdhYS13ZWItY29udGVudC1zdHVkZW50Jztcbi8qKlxuICogQ2xhc3MgdGhhdCBzdG9yZXMgY291cnNlIHJlc291cmNlcy5cbiAqIEBjYXRlZ29yeSBJbnRlcm5hbFxuICovXG5leHBvcnQgY2xhc3MgQ291cnNlUmVzb3VyY2VzTWFuYWdlciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIGh0dHA6IEhUVFAsXG4gICAgY291cnNlUmVzb3VyY2VzRmFjdG9yeTogQ291cnNlUmVzb3VyY2VzRmFjdG9yeSxcbiAgICBjb3Vyc2U6IENvdXJzZVN0dWRlbnRcbiAgKSB7XG4gICAgdGhpcy5sZXNzb25zID0gbmV3IFJlc291cmNlTWFuYWdlcigob3B0aW9ucykgPT5cbiAgICAgIGNvdXJzZVJlc291cmNlc0ZhY3RvcnkuY3JlYXRlTGVzc29uRnJvbUxlc3NvbkRhdGEoXG4gICAgICAgIG9wdGlvbnMsXG4gICAgICAgIGh0dHAsXG4gICAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgICBhd2FpdCBjb3Vyc2UuZ2V0TGVzc29ucygpO1xuICAgICAgICB9XG4gICAgICApXG4gICAgKTtcblxuICAgIHRoaXMuZmlsZXMgPSBuZXcgUmVzb3VyY2VNYW5hZ2VyKChvcHRpb25zKSA9PlxuICAgICAgY291cnNlUmVzb3VyY2VzRmFjdG9yeS5jcmVhdGVGaWxlRnJvbUZpbGVEYXRhKG9wdGlvbnMsIGh0dHAsIGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgY291cnNlLmdldEZpbGVzKCk7XG4gICAgICB9KVxuICAgICk7XG5cbiAgICB0aGlzLmhvbWV3b3JrID0gbmV3IFJlc291cmNlTWFuYWdlcigob3B0aW9ucykgPT5cbiAgICAgIGNvdXJzZVJlc291cmNlc0ZhY3RvcnkuY3JlYXRlSG9tZXdvcmtGcm9tSG9tZXdvcmtEYXRhKFxuICAgICAgICBvcHRpb25zLFxuICAgICAgICBodHRwLFxuICAgICAgICBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgYXdhaXQgY291cnNlLmdldEhvbWV3b3JrcygpO1xuICAgICAgICB9XG4gICAgICApXG4gICAgKTtcblxuICAgIHRoaXMuZm9ydW1zID0gbmV3IFJlc291cmNlTWFuYWdlcigob3B0aW9ucykgPT5cbiAgICAgIGNvdXJzZVJlc291cmNlc0ZhY3RvcnkuY3JlYXRlRm9ydW1Gcm9tRm9ydW1EYXRhKFxuICAgICAgICBvcHRpb25zLFxuICAgICAgICBodHRwLFxuICAgICAgICBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgYXdhaXQgY291cnNlLmdldEZvcnVtcygpO1xuICAgICAgICB9XG4gICAgICApXG4gICAgKTtcblxuICAgIHRoaXMucXVpenplcyA9IG5ldyBSZXNvdXJjZU1hbmFnZXIoKG9wdGlvbnMpID0+XG4gICAgICBjb3Vyc2VSZXNvdXJjZXNGYWN0b3J5LmNyZWF0ZVF1aXpGcm9tUXVpekRhdGEob3B0aW9ucywgaHR0cCwgYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCBjb3Vyc2UuZ2V0UXVpenplcygpO1xuICAgICAgfSlcbiAgICApO1xuXG4gICAgdGhpcy5uZXdzID0gbmV3IFJlc291cmNlTWFuYWdlcigob3B0aW9ucykgPT5cbiAgICAgIGNvdXJzZVJlc291cmNlc0ZhY3RvcnkuY3JlYXRlTmV3c0Zyb21OZXdzRGF0YShvcHRpb25zLCBodHRwLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IGNvdXJzZS5nZXROZXdzKCk7XG4gICAgICB9KVxuICAgICk7XG5cbiAgICB0aGlzLndlYkNvbnRlbnRzID0gbmV3IFJlc291cmNlTWFuYWdlcigob3B0aW9ucykgPT5cbiAgICAgIGNvdXJzZVJlc291cmNlc0ZhY3RvcnkuY3JlYXRlV2ViQ29udGVudEZyb21XZWJDb250ZW50RGF0YShcbiAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgaHR0cCxcbiAgICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgIGF3YWl0IGNvdXJzZS5nZXRXZWJDb250ZW50cygpO1xuICAgICAgICB9XG4gICAgICApXG4gICAgKTtcblxuICAgIHRoaXMuc3VydmV5ID0gbmV3IFJlc291cmNlTWFuYWdlcigob3B0aW9ucykgPT5cbiAgICAgIGNvdXJzZVJlc291cmNlc0ZhY3RvcnkuY3JlYXRlU3VydmV5RnJvbVN1cnZleURhdGEoXG4gICAgICAgIG9wdGlvbnMsXG4gICAgICAgIGh0dHAsXG4gICAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgICBhd2FpdCBjb3Vyc2UuZ2V0U3VydmV5cygpO1xuICAgICAgICB9XG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIGxlc3NvbnM6IFJlc291cmNlTWFuYWdlcjxMZXNzb24sIExlc3NvbkRhdGE+O1xuICBmaWxlczogUmVzb3VyY2VNYW5hZ2VyPEZpbGUsIEZpbGVEYXRhPjtcbiAgaG9tZXdvcms6IFJlc291cmNlTWFuYWdlcjxIb21ld29yaywgSG9tZXdvcmtEYXRhPjtcbiAgZm9ydW1zOiBSZXNvdXJjZU1hbmFnZXI8Q291cnNlRm9ydW0sIEZvcnVtRGF0YT47XG4gIHF1aXp6ZXM6IFJlc291cmNlTWFuYWdlcjxRdWl6LCBRdWl6RGF0YT47XG4gIHN1cnZleTogUmVzb3VyY2VNYW5hZ2VyPFN1cnZleSwgU3VydmV5RGF0YT47XG4gIHdlYkNvbnRlbnRzOiBSZXNvdXJjZU1hbmFnZXI8V2ViQ29udGVudCwgV2ViQ29udGVudERhdGE+O1xuICBuZXdzOiBSZXNvdXJjZU1hbmFnZXI8TmV3cywgTmV3c0RhdGE+O1xufVxuIl19