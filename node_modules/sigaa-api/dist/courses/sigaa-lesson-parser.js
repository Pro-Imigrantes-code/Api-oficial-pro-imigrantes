"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SigaaLessonParser = void 0;

require("source-map-support/register");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @category Internal
 */
class SigaaLessonParser {
  constructor(parser, resources) {
    this.parser = parser;
    this.resources = resources;

    _defineProperty(this, "forumsIdIndex", 0);
  }

  /**
   * Parse the page and retrieves the HTML elements that are the topics of the lesson
   * @param page
   */
  getElements(page) {
    return page.$('#conteudo .topico-aula').toArray();
  }

  parsePagedPage(page) {
    const lessonOptionElements = page.$('#formAva\\:escolherTopico option').toArray();
    const lessonIdsWithReferences = [];

    for (let index = 0; index < lessonOptionElements.length; index++) {
      const optionElement = page.$(lessonOptionElements[index]);
      const lessonId = optionElement.attr('value');
      if (!lessonId) throw new Error('SIGAA: cannot find the lesson id.');
      const titleFull = this.parser.removeTagsHtml(optionElement.html());
      const lessonDatesString = titleFull.slice(titleFull.indexOf('(') + 1, titleFull.indexOf(')'));
      const title = titleFull.slice(titleFull.indexOf(')') + 1).trim();
      const [startDate, endDate] = this.parserDate(lessonDatesString);
      lessonIdsWithReferences.push({
        title,
        index,
        id: lessonId,
        startDate,
        endDate
      });
    }

    return lessonIdsWithReferences;
  }

  parseLessonPages(pageLessonsList, pageLessonsPaged) {
    const lessonsElements = this.getElements(pageLessonsList);
    const lessonIdsWithReferences = this.parsePagedPage(pageLessonsPaged);
    this.resources.lessons.keepOnly(lessonsElements.map((lessonElement, index) => this.resources.lessons.upsert(this.parseLesson(pageLessonsList, lessonIdsWithReferences[index], lessonElement))._instanceIndentifier));
  }

  parserDate(lessonDatesString) {
    let startDateListPage, endDateListPage;

    try {
      const lessonDate = this.parser.parseDates(lessonDatesString, 2);
      startDateListPage = lessonDate[0];
      endDateListPage = lessonDate[1];
    } catch (err) {
      const lessonDate = this.parser.parseDates(lessonDatesString, 1);
      startDateListPage = lessonDate[0];
      endDateListPage = lessonDate[0];
    }

    return [startDateListPage, endDateListPage];
  }
  /**
   * Parse each lesson topic HTML element
   */


  parseLesson(page, lessonIdWithReference, lessonElement) {
    const titleElement = page.$(lessonElement).find('.titulo');
    const titleFull = this.parser.removeTagsHtml(titleElement.html());
    const lessonDatesString = titleFull.slice(titleFull.lastIndexOf('(') + 1, titleFull.lastIndexOf(')'));
    const [startDate, endDate] = this.parserDate(lessonDatesString);
    const title = titleFull.slice(0, titleFull.lastIndexOf('(')).trim();
    if (lessonIdWithReference.startDate.valueOf() !== startDate.valueOf() && lessonIdWithReference.endDate.valueOf() !== endDate.valueOf() && lessonIdWithReference.title != title) console.error(new Error('SIGAA: The result of the lesson list parser is different than expected because the title or date does not match.'));
    const lessonContentElement = page.$(lessonElement).find('.conteudotopico');
    const id = lessonIdWithReference.id;
    const lessonHTML = lessonContentElement.html();
    if (!lessonHTML) throw new Error('SIGAA: Lesson without content.');
    const lessonContent = this.parser.removeTagsHtml(lessonHTML.replace(/<div([\S\s]*?)div>/gm, ''));
    const attachments = this.parseAttachmentsFromLesson(page, lessonContentElement);
    const contentText = attachments.reduce((reducer, attachment) => {
      if (attachment.type === 'text') return `${reducer}\n${attachment.body}`;
      return reducer;
    }, lessonContent);
    const lesson = {
      title,
      contentText,
      startDate: startDate,
      id,
      instanceIndentifier: id,
      endDate: endDate,
      attachments: attachments.filter(attachment => attachment.type !== 'text')
    };
    return lesson;
  }
  /**
   * Receive each class topic and parse each attachment in them
   * @param page
   * @param lessonContentElement
   */


  parseAttachmentsFromLesson(page, lessonContentElement) {
    const lessonAttachments = [];
    const attachmentElements = lessonContentElement.find('span[id] > div.item').toArray();

    if (attachmentElements.length !== 0) {
      for (const attachmentElement of attachmentElements) {
        const iconElement = page.$(attachmentElement).find('img');
        const iconSrc = iconElement.attr('src');

        try {
          if (iconSrc === undefined) {
            const attachmentText = {
              type: 'text',
              body: this.parser.removeTagsHtml(page.$(attachmentElement).html())
            };
            lessonAttachments.push(attachmentText);
          } else if (iconSrc.includes('questionario.png')) {
            const quiz = this.parseAttachmentQuiz(page, attachmentElement);
            lessonAttachments.push(quiz);
          } else if (iconSrc.includes('video.png')) {
            const video = this.parseAttachmentVideo(page, attachmentElement);
            lessonAttachments.push(video);
          } else if (iconSrc.includes('tarefa.png')) {
            const homework = this.parseAttachmentHomework(page, attachmentElement);
            lessonAttachments.push(homework);
          } else if (iconSrc.includes('pesquisa.png')) {
            const survey = this.parseAttachmentSurvey(page, attachmentElement);
            lessonAttachments.push(survey);
          } else if (iconSrc.includes('conteudo.png')) {
            const webContents = this.parseAttachmentWebContent(page, attachmentElement);
            lessonAttachments.push(webContents);
          } else if (iconSrc.includes('forumava.png')) {
            const genericOptions = this.parseAttachmentGeneric(page, attachmentElement);
            const forumOptions = { ...genericOptions,
              instanceIndentifier: this.forumsIdIndex.toString()
            };
            this.forumsIdIndex++;
            const forum = this.resources.forums.upsert(forumOptions);
            lessonAttachments.push(forum);
          } else if (iconSrc.includes('portal_turma/site_add.png')) {
            const link = this.parseAttachmentLink(page, attachmentElement);
            lessonAttachments.push(link);
          } else {
            const file = this.parseAttachmentFile(page, attachmentElement);
            lessonAttachments.push(file);
          }
        } catch (error) {
          error.iconSrc = iconSrc;
          error.htmlAttachment = page.$(attachmentElement).html();
          throw error;
        }
      }
    }

    return lessonAttachments;
  }
  /**
   * Parse the file attached to the lesson topic
   * @param page
   * @param attachmentElement
   */


  parseAttachmentFile(page, attachmentElement) {
    const fileData = this.parseAttachmentGeneric(page, attachmentElement);
    return this.resources.files.upsert(fileData);
  }
  /**
   * Parse the web content attached to the lesson topic
   * @param page
   * @param attachmentElement
   */


  parseAttachmentWebContent(page, attachmentElement) {
    const webContentOptions = this.parseAttachmentGeneric(page, attachmentElement);
    return this.resources.webContents.upsert(webContentOptions);
  }
  /**
   * Parse a generic attachment (a link) attached to the lesson topic
   * @param page
   * @param attachmentElement
   */


  parseAttachmentGeneric(page, attachmentElement) {
    const titleElement = page.$(attachmentElement).find('span').children().first();
    const title = this.parser.removeTagsHtml(titleElement.html());
    const titleOnClick = titleElement.attr('onclick');
    if (!titleOnClick) throw new Error('SIGAA: Attachment title without onclick event.');
    const form = page.parseJSFCLJS(titleOnClick);
    const id = form.postValues.id;
    const descriptionElement = page.$(attachmentElement).find('div.descricao-item');
    const description = this.parser.removeTagsHtml(descriptionElement.html());
    return {
      title,
      form,
      id,
      instanceIndentifier: id,
      description
    };
  }
  /**
   * Parse the survey (Enquete) attached to the lesson topic
   * @param page
   * @param attachmentElement
   */


  parseAttachmentSurvey(page, attachmentElement) {
    const titleElement = page.$(attachmentElement).find('span > a');
    const title = this.parser.removeTagsHtml(titleElement.html());
    const titleOnClick = titleElement.attr('onclick');
    if (!titleOnClick) throw new Error('SIGAA: Survey title without onclick event.');
    const form = page.parseJSFCLJS(titleOnClick);
    const surveyOptions = {
      title,
      form,
      id: form.postValues.id,
      instanceIndentifier: form.postValues.id
    };
    return this.resources.survey.upsert(surveyOptions);
  }
  /**
   * Parse the homework attached to the lesson topic
   * @param page
   * @param attachmentElement
   */


  parseAttachmentHomework(page, attachmentElement) {
    const titleElement = page.$(attachmentElement).find('span > a');
    const titleOnClick = titleElement.attr('onclick');
    if (!titleOnClick) throw new Error('SIGAA: Homework title without onclick event.');
    const form = page.parseJSFCLJS(titleOnClick);
    const id = form.postValues.id;
    const title = this.parser.removeTagsHtml(titleElement.html());
    const descriptionElement = page.$(attachmentElement).find('div.descricao-item');
    const description = this.parser.removeTagsHtml(descriptionElement.html());
    const dates = this.parser.parseDates(description, 2);
    const startDate = dates[0];
    const endDate = dates[1];
    const homeworkOptions = {
      id,
      title,
      instanceIndentifier: id,
      startDate,
      endDate
    };
    return this.resources.homework.upsert(homeworkOptions);
  }
  /**
   * Parse the video attached to the lesson topic
   * @param page
   * @param attachmentElement
   */


  parseAttachmentVideo(page, attachmentElement) {
    const titleElement = page.$(attachmentElement).find('span[id] > span[id] a');
    const href = titleElement.attr('href');
    const descriptionElement = page.$(attachmentElement).find('div.descricao-item');
    const description = this.parser.removeTagsHtml(descriptionElement.html());
    let title = this.parser.removeTagsHtml(titleElement.html());
    let src;

    if (href) {
      title = title.replace(/\(Link Externo\)$/g, '');
      src = href;
    } else {
      const titleElement = page.$(attachmentElement).find('span[id] > span[id]');
      title = this.parser.removeTagsHtml(titleElement.html());
      const srcIframe = page.$(attachmentElement).find('iframe').attr('src');
      if (!srcIframe) throw new Error('SIGAA: Video iframe without url.');
      src = srcIframe;
    }

    return {
      type: 'video',
      title,
      src,
      description
    };
  }
  /**
   * Parse the external link attached to the lesson topic
   * @param page
   * @param attachmentElement
   */


  parseAttachmentLink(page, attachmentElement) {
    const type = 'link';
    const titleElement = page.$(attachmentElement).find('span[id] > a');
    const title = this.parser.removeTagsHtml(titleElement.html());
    const href = titleElement.attr('href');
    if (!href) throw new Error('SIGAA: Link attachment does not have href.');
    const descriptionElement = page.$(attachmentElement).find('div.descricao-item');
    const description = this.parser.removeTagsHtml(descriptionElement.html());
    return {
      type,
      title,
      href,
      description
    };
  }
  /**
   * Parse the quiz (questionário) attached to the lesson topic
   * @param page
   * @param attachmentElement
   */


  parseAttachmentQuiz(page, attachmentElement) {
    const titleElement = page.$(attachmentElement).find('span > a');
    const title = this.parser.removeTagsHtml(titleElement.html());
    const onClick = titleElement.attr('onclick');
    if (!onClick) throw new Error('SIGAA: Quiz attachment without onclick event.');
    const form = page.parseJSFCLJS(onClick);
    const id = form.postValues.id;
    const descriptionElement = page.$(attachmentElement).find('div.descricao-item');
    const description = this.parser.removeTagsHtml(descriptionElement.html());
    const dates = this.parser.parseDates(description, 2);
    const startDate = dates[0];
    const endDate = dates[1];
    const quizOptions = {
      title,
      id,
      instanceIndentifier: id,
      startDate,
      endDate
    };
    return this.resources.quizzes.upsert(quizOptions);
  }

}

exports.SigaaLessonParser = SigaaLessonParser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,