import { Lesson } from './resources/sigaa-lesson-student';
import { News } from './resources/sigaa-news-student';
import { Parser } from '..\helpers/sigaa-parser';
import { File } from '..\resources/sigaa-file';
import { HTTP } from '..\session/sigaa-http';
import { SigaaForm, Page } from '..\session/sigaa-page';
import { Quiz } from './resources\attachments/sigaa-quiz-student';
import { Homework } from './resources\attachments/sigaa-homework-student';
import { SigaaSurvey } from './resources\attachments/sigaa-survey-student';
import { CourseResourcesManagerFactory } from './sigaa-course-resources-manager-factory';
import { Exam } from './resources/sigaa-exam-student';
import { Syllabus } from './resources/sigaa-syllabus-student';
import { LessonParserFactory } from './sigaa-lesson-parser-factory';
import { GradeGroup } from './resources/sigaa-grades-student';
import { CourseForum } from './resources/forum/sigaa-course-forum-student';
import { WebContent } from './resources\attachments/sigaa-web-content-student';
import { AbsenceList } from './resources/sigaa-absence-list-student';
import { MemberList } from './resources/sigaa-member-list-student';
/**
 * @category Internal
 */
export interface CourseStudentData {
    id: string;
    title: string;
    code: string;
    numberOfStudents: number;
    period: string;
    schedule: string;
    form: SigaaForm;
}
/**
 * Course in the student's view.
 * @category Public
 **/
export interface CourseStudent {
    /**
     * Single string indicating the course.
     *
     * String única indicando o curso.
     */
    readonly id: string;
    /**
     * Course title (Nome da turma).
     */
    readonly title: string;
    /**
     * Course name abbreviation.
     *
     * Código (abreviação) da turma.
     */
    readonly code: string;
    /**
     * Course Schedule.
     *
     * Horário das aulas.
     */
    readonly schedule: string;
    /**
     * Number of students, is 0 if the course of the period is not the current one.
     */
    readonly numberOfStudents: number;
    /**
     * Course Semester.
     */
    readonly period: string;
    /**
     * Returns the list of lessons.
     */
    getLessons(): Promise<Lesson[]>;
    /**
     * Returns to the list of files provided by the teacher.
     */
    getFiles(): Promise<File[]>;
    /**
     * Returns the courses forum.
     */
    getForums(): Promise<CourseForum[]>;
    /**
     * Returns the courses news.
     */
    getNews(): Promise<News[]>;
    /**
     * Returns your absences.
     */
    getAbsence(): Promise<AbsenceList>;
    /**
     * Parse the side evaluation card and returns the name of each evaluation and the date if it has
     */
    getExamCalendar(): Promise<Exam[]>;
    /**
     * Returns the courses quizzes.
     */
    getQuizzes(): Promise<Quiz[]>;
    /**
     * Returns the course WebContent Array.
     */
    getWebContents(): Promise<WebContent[]>;
    /**
     * To do
     */
    getSurveys(): Promise<SigaaSurvey[]>;
    /**
     * Returns yours homework.
     */
    getHomeworks(): Promise<Homework[]>;
    /**
     * Get members object.
     */
    getMembers(): Promise<MemberList>;
    /**
     * Get grades array.
     */
    getGrades(): Promise<GradeGroup[]>;
    /**
     * Get Syllabus (Plano de ensino).
     */
    getSyllabus(): Promise<Syllabus>;
}
/**
 * Course in the student's view.
 *
 * @category Internal
 **/
export declare class SigaaCourseStudent implements CourseStudent {
    private http;
    private parser;
    /**
     * @inheritdoc
     */
    readonly title: string;
    /**
     * @inheritdoc
     */
    readonly code: string;
    /**
     * @inheritdoc
     */
    readonly numberOfStudents: number;
    /**
     * @inheritdoc
     */
    readonly schedule: string;
    /**
     * @inheritdoc
     */
    readonly id: string;
    /**
     * @inheritdoc
     */
    readonly period: string;
    private form;
    private resources;
    private lessonParser;
    currentPageCache?: Page;
    constructor(courseData: CourseStudentData, http: HTTP, parser: Parser, resourcesManagerFactory: CourseResourcesManagerFactory, lessonParserFactory: LessonParserFactory);
    /**
     *
     */
    private currentCoursePage;
    /**
     * Request the course page using the course ID,
     * it is slower than requestCoursePageUsingForm,
     * but works if the form is invalid.
     * @returns Response page.
     */
    private requestCoursePageUsingId;
    /**
     * Request the course page using the course POST Form,
     * it is faster than requestCoursePageUsingId,
     * but don`t works if the form is invalid or expired.
     */
    private requestCoursePageUsingForm;
    /**
     * Request the course page using requestCoursePageUsingForm,
     * fallback to requestCoursePageUsingId.
     * @returns Response page.
     */
    private requestCoursePage;
    private verifyIfCoursePageIsValid;
    /**
     * Receive the name of the side tab and load the tab page
     * @param buttonLabel
     * @param retry
     */
    private getCourseSubMenu;
    /**
     * Receive the name of the card on the right of the page and return it
     * @param page
     * @param cardTitle
     */
    private getRightSidebarCard;
    private static getLessonPageType;
    /**
     * @inheritdoc
     */
    getLessons(): Promise<Lesson[]>;
    /**
     * @inheritdoc
     */
    getFiles(): Promise<File[]>;
    /**
     * @inheritdoc
     */
    getForums(): Promise<CourseForum[]>;
    /**
     * @inheritdoc
     */
    getNews(): Promise<News[]>;
    /**
     * @inheritdoc
     */
    getAbsence(): Promise<AbsenceList>;
    /**
     * Parse the side evaluation card and returns the name of each evaluation and the date if it has
     */
    getExamCalendar(): Promise<Exam[]>;
    /**
     * @inheritdoc
     */
    getQuizzes(): Promise<Quiz[]>;
    /**
     * @inheritdoc
     */
    getWebContents(): Promise<WebContent[]>;
    /**
     * @inheritdoc
     */
    getSurveys(): Promise<SigaaSurvey[]>;
    /**
     * @inheritdoc
     */
    getHomeworks(): Promise<Homework[]>;
    /**
     * @inheritdoc
     */
    getMembers(): Promise<MemberList>;
    /**
     * @inheritdoc
     */
    getGrades(retry?: boolean): Promise<GradeGroup[]>;
    /**
     * @inheritdoc
     */
    getSyllabus(): Promise<Syllabus>;
}
