"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sharedReturn = sharedReturn;

require("source-map-support/register");

/* eslint-disable @typescript-eslint/no-unused-vars */

/**
 * @category Internal
 * Method decorator to cache the return,
 * it identifies the returns based on the
 * parameter id of the first argument.
 **/
function sharedReturn() {
  return function (target, propertyKey, descriptor) {
    if (target.kind !== 'method') throw new Error('SIGAA: SharedReturn is only supported on methods.');
    const originalMethod = target.descriptor.value; // save a reference to the original method

    const store = '__sharedReturn' + target.key;

    target.descriptor.value = function (...args) {
      if (!this[store]) {
        this[store] = new Map();
      }

      const id = args[0].id;
      if (!id) return originalMethod.apply(this, args);
      const ref = this[store].get(id);

      if (ref) {
        const cacheInstance = ref.deref();

        if (cacheInstance) {
          return cacheInstance;
        }

        this[store].delete(id);
      }

      const instance = originalMethod.apply(this, args);
      this[store].set(id, new WeakRef(instance));
      return instance;
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL3NpZ2FhLXNoYXJlZC1yZXR1cm4tZGVjb3JhdG9yLWZhY3RvcnkudHMiXSwibmFtZXMiOlsic2hhcmVkUmV0dXJuIiwidGFyZ2V0IiwicHJvcGVydHlLZXkiLCJkZXNjcmlwdG9yIiwia2luZCIsIkVycm9yIiwib3JpZ2luYWxNZXRob2QiLCJ2YWx1ZSIsInN0b3JlIiwia2V5IiwiYXJncyIsIk1hcCIsImlkIiwiYXBwbHkiLCJyZWYiLCJnZXQiLCJjYWNoZUluc3RhbmNlIiwiZGVyZWYiLCJkZWxldGUiLCJpbnN0YW5jZSIsInNldCIsIldlYWtSZWYiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNBLFlBQVQsR0FBd0I7QUFDN0IsU0FBTyxVQUNMQyxNQURLLEVBRUxDLFdBRkssRUFHTEMsVUFISyxFQUlDO0FBQ04sUUFBSUYsTUFBTSxDQUFDRyxJQUFQLEtBQWdCLFFBQXBCLEVBQ0UsTUFBTSxJQUFJQyxLQUFKLENBQVUsbURBQVYsQ0FBTjtBQUVGLFVBQU1DLGNBQWMsR0FBR0wsTUFBTSxDQUFDRSxVQUFQLENBQWtCSSxLQUF6QyxDQUpNLENBSTBDOztBQUNoRCxVQUFNQyxLQUFLLEdBQUcsbUJBQW1CUCxNQUFNLENBQUNRLEdBQXhDOztBQUNBUixJQUFBQSxNQUFNLENBQUNFLFVBQVAsQ0FBa0JJLEtBQWxCLEdBQTBCLFVBQVUsR0FBR0csSUFBYixFQUErQjtBQUN2RCxVQUFJLENBQUMsS0FBS0YsS0FBTCxDQUFMLEVBQWtCO0FBQ2hCLGFBQUtBLEtBQUwsSUFBYyxJQUFJRyxHQUFKLEVBQWQ7QUFDRDs7QUFFRCxZQUFNQyxFQUFFLEdBQUdGLElBQUksQ0FBQyxDQUFELENBQUosQ0FBUUUsRUFBbkI7QUFDQSxVQUFJLENBQUNBLEVBQUwsRUFBUyxPQUFPTixjQUFjLENBQUNPLEtBQWYsQ0FBcUIsSUFBckIsRUFBMkJILElBQTNCLENBQVA7QUFFVCxZQUFNSSxHQUFHLEdBQUcsS0FBS04sS0FBTCxFQUFZTyxHQUFaLENBQWdCSCxFQUFoQixDQUFaOztBQUNBLFVBQUlFLEdBQUosRUFBUztBQUNQLGNBQU1FLGFBQWEsR0FBR0YsR0FBRyxDQUFDRyxLQUFKLEVBQXRCOztBQUVBLFlBQUlELGFBQUosRUFBbUI7QUFDakIsaUJBQU9BLGFBQVA7QUFDRDs7QUFDRCxhQUFLUixLQUFMLEVBQVlVLE1BQVosQ0FBbUJOLEVBQW5CO0FBQ0Q7O0FBQ0QsWUFBTU8sUUFBUSxHQUFHYixjQUFjLENBQUNPLEtBQWYsQ0FBcUIsSUFBckIsRUFBMkJILElBQTNCLENBQWpCO0FBQ0EsV0FBS0YsS0FBTCxFQUFZWSxHQUFaLENBQWdCUixFQUFoQixFQUFvQixJQUFJUyxPQUFKLENBQVlGLFFBQVosQ0FBcEI7QUFDQSxhQUFPQSxRQUFQO0FBQ0QsS0FwQkQ7QUFxQkQsR0EvQkQ7QUFnQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBAY2F0ZWdvcnkgSW50ZXJuYWxcbiAqIE1ldGhvZCBkZWNvcmF0b3IgdG8gY2FjaGUgdGhlIHJldHVybixcbiAqIGl0IGlkZW50aWZpZXMgdGhlIHJldHVybnMgYmFzZWQgb24gdGhlXG4gKiBwYXJhbWV0ZXIgaWQgb2YgdGhlIGZpcnN0IGFyZ3VtZW50LlxuICoqL1xuZXhwb3J0IGZ1bmN0aW9uIHNoYXJlZFJldHVybigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChcbiAgICB0YXJnZXQ6IGFueSxcbiAgICBwcm9wZXJ0eUtleTogc3RyaW5nLFxuICAgIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvclxuICApOiB2b2lkIHtcbiAgICBpZiAodGFyZ2V0LmtpbmQgIT09ICdtZXRob2QnKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTSUdBQTogU2hhcmVkUmV0dXJuIGlzIG9ubHkgc3VwcG9ydGVkIG9uIG1ldGhvZHMuJyk7XG5cbiAgICBjb25zdCBvcmlnaW5hbE1ldGhvZCA9IHRhcmdldC5kZXNjcmlwdG9yLnZhbHVlOyAvLyBzYXZlIGEgcmVmZXJlbmNlIHRvIHRoZSBvcmlnaW5hbCBtZXRob2RcbiAgICBjb25zdCBzdG9yZSA9ICdfX3NoYXJlZFJldHVybicgKyB0YXJnZXQua2V5O1xuICAgIHRhcmdldC5kZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24gKC4uLmFyZ3M6IGFueVtdKTogYW55IHtcbiAgICAgIGlmICghdGhpc1tzdG9yZV0pIHtcbiAgICAgICAgdGhpc1tzdG9yZV0gPSBuZXcgTWFwPHN0cmluZywgV2Vha1JlZjxhbnk+PigpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBpZCA9IGFyZ3NbMF0uaWQ7XG4gICAgICBpZiAoIWlkKSByZXR1cm4gb3JpZ2luYWxNZXRob2QuYXBwbHkodGhpcywgYXJncyk7XG5cbiAgICAgIGNvbnN0IHJlZiA9IHRoaXNbc3RvcmVdLmdldChpZCk7XG4gICAgICBpZiAocmVmKSB7XG4gICAgICAgIGNvbnN0IGNhY2hlSW5zdGFuY2UgPSByZWYuZGVyZWYoKTtcblxuICAgICAgICBpZiAoY2FjaGVJbnN0YW5jZSkge1xuICAgICAgICAgIHJldHVybiBjYWNoZUluc3RhbmNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXNbc3RvcmVdLmRlbGV0ZShpZCk7XG4gICAgICB9XG4gICAgICBjb25zdCBpbnN0YW5jZSA9IG9yaWdpbmFsTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgdGhpc1tzdG9yZV0uc2V0KGlkLCBuZXcgV2Vha1JlZihpbnN0YW5jZSkpO1xuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH07XG4gIH07XG59XG4iXX0=