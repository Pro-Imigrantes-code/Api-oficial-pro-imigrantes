"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SigaaPromiseStack = void 0;

require("source-map-support/register");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Class to control promise order
 * Performs chain functions and waits for each promise that the functions return.
 * @category Internal
 */
class SigaaPromiseStack {
  /**
   * Order type.
   * If it is reverse, the last entered will be the first executed. default is normal.
   */

  /**
   * Current promise running object as {key, promiseFunction, promise}.
   */

  /**
   * store all promises objects as {key, promiseFunction, promise}
   */

  /**
   * @param PromiseStackOrder [order] order of execution of the promises, if it is reverse, the last entered will be the first executed. default is normal.
   */
  constructor(order) {
    _defineProperty(this, "order", void 0);

    _defineProperty(this, "promiseRunning", void 0);

    _defineProperty(this, "storedPromises", []);

    this.order = order || 'normal';
  }
  /**
   * @inheritdoc
   */


  flush() {
    this.storedPromises = [];
    this.promiseRunning = undefined;
  }
  /**
   * @inheritdoc
   */


  get promises() {
    if (this.promiseRunning) {
      return [this.promiseRunning, ...this.storedPromises];
    } else {
      return this.storedPromises;
    }
  }
  /**
   * Loop to execute the entire promise stack
   */


  async promiseExecutor() {
    if (!this.promiseRunning) {
      while (this.storedPromises.length > 0) {
        if (this.order === 'normal') {
          this.promiseRunning = this.storedPromises.shift();
        } else if (this.order === 'reverse') {
          this.promiseRunning = this.storedPromises.pop();
        }

        try {
          var _this$promiseRunning;

          if ((_this$promiseRunning = this.promiseRunning) !== null && _this$promiseRunning !== void 0 && _this$promiseRunning.promiseFunction) {
            await this.promiseRunning.promiseFunction();
          }
        } finally {
          this.promiseRunning = undefined;
        }
      }
    }
  }
  /**
   * @inheritdoc
   */


  addPromise(key, promiseFunction) {
    const promiseObject = {
      key
    };
    const promise = new Promise((resolve, reject) => {
      promiseObject.promiseFunction = () => {
        return promiseFunction().then(resolve, reject);
      };
    });
    promiseObject.promise = promise;
    this.storedPromises.push(promiseObject);
    this.promiseExecutor();
    return promise;
  }

}

exports.SigaaPromiseStack = SigaaPromiseStack;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL3NpZ2FhLXByb21pc2Utc3RhY2sudHMiXSwibmFtZXMiOlsiU2lnYWFQcm9taXNlU3RhY2siLCJjb25zdHJ1Y3RvciIsIm9yZGVyIiwiZmx1c2giLCJzdG9yZWRQcm9taXNlcyIsInByb21pc2VSdW5uaW5nIiwidW5kZWZpbmVkIiwicHJvbWlzZXMiLCJwcm9taXNlRXhlY3V0b3IiLCJsZW5ndGgiLCJzaGlmdCIsInBvcCIsInByb21pc2VGdW5jdGlvbiIsImFkZFByb21pc2UiLCJrZXkiLCJwcm9taXNlT2JqZWN0IiwicHJvbWlzZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwidGhlbiIsInB1c2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBNkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQSxpQkFBTixDQUE0RDtBQUNqRTtBQUNGO0FBQ0E7QUFDQTs7QUFHRTtBQUNGO0FBQ0E7O0FBR0U7QUFDRjtBQUNBOztBQUdFO0FBQ0Y7QUFDQTtBQUNFQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBNEI7QUFBQTs7QUFBQTs7QUFBQSw0Q0FMWSxFQUtaOztBQUNyQyxTQUFLQSxLQUFMLEdBQWFBLEtBQUssSUFBSSxRQUF0QjtBQUNEO0FBQ0Q7QUFDRjtBQUNBOzs7QUFDRUMsRUFBQUEsS0FBSyxHQUFTO0FBQ1osU0FBS0MsY0FBTCxHQUFzQixFQUF0QjtBQUNBLFNBQUtDLGNBQUwsR0FBc0JDLFNBQXRCO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7OztBQUNjLE1BQVJDLFFBQVEsR0FBNkI7QUFDdkMsUUFBSSxLQUFLRixjQUFULEVBQXlCO0FBQ3ZCLGFBQU8sQ0FBQyxLQUFLQSxjQUFOLEVBQXNCLEdBQUcsS0FBS0QsY0FBOUIsQ0FBUDtBQUNELEtBRkQsTUFFTztBQUNMLGFBQU8sS0FBS0EsY0FBWjtBQUNEO0FBQ0Y7QUFFRDtBQUNGO0FBQ0E7OztBQUMrQixRQUFmSSxlQUFlLEdBQWtCO0FBQzdDLFFBQUksQ0FBQyxLQUFLSCxjQUFWLEVBQTBCO0FBQ3hCLGFBQU8sS0FBS0QsY0FBTCxDQUFvQkssTUFBcEIsR0FBNkIsQ0FBcEMsRUFBdUM7QUFDckMsWUFBSSxLQUFLUCxLQUFMLEtBQWUsUUFBbkIsRUFBNkI7QUFDM0IsZUFBS0csY0FBTCxHQUFzQixLQUFLRCxjQUFMLENBQW9CTSxLQUFwQixFQUF0QjtBQUNELFNBRkQsTUFFTyxJQUFJLEtBQUtSLEtBQUwsS0FBZSxTQUFuQixFQUE4QjtBQUNuQyxlQUFLRyxjQUFMLEdBQXNCLEtBQUtELGNBQUwsQ0FBb0JPLEdBQXBCLEVBQXRCO0FBQ0Q7O0FBQ0QsWUFBSTtBQUFBOztBQUNGLHNDQUFJLEtBQUtOLGNBQVQsaURBQUkscUJBQXFCTyxlQUF6QixFQUEwQztBQUN4QyxrQkFBTSxLQUFLUCxjQUFMLENBQW9CTyxlQUFwQixFQUFOO0FBQ0Q7QUFDRixTQUpELFNBSVU7QUFDUixlQUFLUCxjQUFMLEdBQXNCQyxTQUF0QjtBQUNEO0FBQ0Y7QUFDRjtBQUNGO0FBRUQ7QUFDRjtBQUNBOzs7QUFDU08sRUFBQUEsVUFBVSxDQUFDQyxHQUFELEVBQVNGLGVBQVQsRUFBMEQ7QUFDekUsVUFBTUcsYUFBcUMsR0FBRztBQUFFRCxNQUFBQTtBQUFGLEtBQTlDO0FBQ0EsVUFBTUUsT0FBTyxHQUFHLElBQUlDLE9BQUosQ0FBZSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFDbERKLE1BQUFBLGFBQWEsQ0FBQ0gsZUFBZCxHQUFnQyxNQUFNO0FBQ3BDLGVBQU9BLGVBQWUsR0FBR1EsSUFBbEIsQ0FBdUJGLE9BQXZCLEVBQWdDQyxNQUFoQyxDQUFQO0FBQ0QsT0FGRDtBQUdELEtBSmUsQ0FBaEI7QUFLQUosSUFBQUEsYUFBYSxDQUFDQyxPQUFkLEdBQXdCQSxPQUF4QjtBQUNBLFNBQUtaLGNBQUwsQ0FBb0JpQixJQUFwQixDQUF5Qk4sYUFBekI7QUFDQSxTQUFLUCxlQUFMO0FBRUEsV0FBT1EsT0FBUDtBQUNEOztBQS9FZ0UiLCJzb3VyY2VzQ29udGVudCI6WyJ0eXBlIFByb21pc2VTdGFja09yZGVyID0gJ25vcm1hbCcgfCAncmV2ZXJzZSc7XG5cbi8qKlxuICogQGNhdGVnb3J5IEludGVybmFsXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRnVuY3Rpb25Qcm9taXNlPFQ+IHtcbiAgKCk6IFByb21pc2U8VD47XG59XG5cbi8qKlxuICogSXRlbSBpbiBzdGFjay5cbiAqIEBjYXRlZ29yeSBJbnRlcm5hbFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFByb21pc2VJdGVtU3RhY2s8SywgVD4ge1xuICBrZXk6IEs7XG4gIHByb21pc2VGdW5jdGlvbj8oKTogUHJvbWlzZTx2b2lkPjtcbiAgcHJvbWlzZT86IFByb21pc2U8VD47XG59XG5cbi8qKlxuICogQWJzdHJhY3Rpb24gdG8gcmVwcmVzZW50IGEgY2xhc3MgdGhhdCBwZXJmb3JtcyBjaGFpbiBmdW5jdGlvbnMgYW5kIHdhaXRzIGZvciBlYWNoIHByb21pc2UgdGhhdCB0aGUgZnVuY3Rpb25zIHJldHVybi5cbiAqIEBjYXRlZ29yeSBJbnRlcm5hbFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFByb21pc2VTdGFjazxLLCBUPiB7XG4gIC8qKlxuICAgKiBBZGQgcHJvbWlzZSBpbiBzdGFjay5cbiAgICogVGhlIGZ1bmN0aW9uIGlzIG5vdCBjYWxsZWQgdGhlIG1vbWVudCBpdCBpcyBhZGRlZCB0byB0aGUgc3RhY2ssIGJ1dCB3aGVuIGl0IGlzIHlvdXIgdHVybiBvbiB0aGUgc3RhY2tcbiAgICogQHBhcmFtIHByb21pc2VGdW5jdGlvbiBmdW5jdGlvbiB0byBnZW5lcmF0ZSB0aGUgcHJvbWlzZVxuICAgKiBAcGFyYW0ga2V5IEtleSBvZiBwcm9taXNlIGFycmF5LCB0byBpZGVudGlmeSBhIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBmdW5jdGlvbidzIHJlc3BvbnNlLlxuICAgKi9cbiAgYWRkUHJvbWlzZShrZXk6IEssIHByb21pc2VGdW5jdGlvbjogRnVuY3Rpb25Qcm9taXNlPFQ+KTogUHJvbWlzZTxUPjtcblxuICAvKipcbiAgICogR2V0IHByb21pc2VzIG9iamVjdHMuXG4gICAqIFJldHVybnMgdGhlIGZ1bmN0aW9ucyB0aGF0IGFyZSBzdGlsbCBpbiB0aGUgc3RhY2suXG4gICAqL1xuICByZWFkb25seSBwcm9taXNlczogUHJvbWlzZUl0ZW1TdGFjazxLLCBUPltdO1xuXG4gIC8qKlxuICAgKiBmbHVzaCB0aGUgc3RhY2suXG4gICAqL1xuICBmbHVzaCgpOiB2b2lkO1xufVxuXG4vKipcbiAqIENsYXNzIHRvIGNvbnRyb2wgcHJvbWlzZSBvcmRlclxuICogUGVyZm9ybXMgY2hhaW4gZnVuY3Rpb25zIGFuZCB3YWl0cyBmb3IgZWFjaCBwcm9taXNlIHRoYXQgdGhlIGZ1bmN0aW9ucyByZXR1cm4uXG4gKiBAY2F0ZWdvcnkgSW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNsYXNzIFNpZ2FhUHJvbWlzZVN0YWNrPEssIFQ+IGltcGxlbWVudHMgUHJvbWlzZVN0YWNrPEssIFQ+IHtcbiAgLyoqXG4gICAqIE9yZGVyIHR5cGUuXG4gICAqIElmIGl0IGlzIHJldmVyc2UsIHRoZSBsYXN0IGVudGVyZWQgd2lsbCBiZSB0aGUgZmlyc3QgZXhlY3V0ZWQuIGRlZmF1bHQgaXMgbm9ybWFsLlxuICAgKi9cbiAgcHJpdmF0ZSBvcmRlcjogUHJvbWlzZVN0YWNrT3JkZXI7XG5cbiAgLyoqXG4gICAqIEN1cnJlbnQgcHJvbWlzZSBydW5uaW5nIG9iamVjdCBhcyB7a2V5LCBwcm9taXNlRnVuY3Rpb24sIHByb21pc2V9LlxuICAgKi9cbiAgcHJpdmF0ZSBwcm9taXNlUnVubmluZz86IFByb21pc2VJdGVtU3RhY2s8SywgVD47XG5cbiAgLyoqXG4gICAqIHN0b3JlIGFsbCBwcm9taXNlcyBvYmplY3RzIGFzIHtrZXksIHByb21pc2VGdW5jdGlvbiwgcHJvbWlzZX1cbiAgICovXG4gIHByaXZhdGUgc3RvcmVkUHJvbWlzZXM6IFByb21pc2VJdGVtU3RhY2s8SywgVD5bXSA9IFtdO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0gUHJvbWlzZVN0YWNrT3JkZXIgW29yZGVyXSBvcmRlciBvZiBleGVjdXRpb24gb2YgdGhlIHByb21pc2VzLCBpZiBpdCBpcyByZXZlcnNlLCB0aGUgbGFzdCBlbnRlcmVkIHdpbGwgYmUgdGhlIGZpcnN0IGV4ZWN1dGVkLiBkZWZhdWx0IGlzIG5vcm1hbC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9yZGVyPzogUHJvbWlzZVN0YWNrT3JkZXIpIHtcbiAgICB0aGlzLm9yZGVyID0gb3JkZXIgfHwgJ25vcm1hbCc7XG4gIH1cbiAgLyoqXG4gICAqIEBpbmhlcml0ZG9jXG4gICAqL1xuICBmbHVzaCgpOiB2b2lkIHtcbiAgICB0aGlzLnN0b3JlZFByb21pc2VzID0gW107XG4gICAgdGhpcy5wcm9taXNlUnVubmluZyA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdGRvY1xuICAgKi9cbiAgZ2V0IHByb21pc2VzKCk6IFByb21pc2VJdGVtU3RhY2s8SywgVD5bXSB7XG4gICAgaWYgKHRoaXMucHJvbWlzZVJ1bm5pbmcpIHtcbiAgICAgIHJldHVybiBbdGhpcy5wcm9taXNlUnVubmluZywgLi4udGhpcy5zdG9yZWRQcm9taXNlc107XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnN0b3JlZFByb21pc2VzO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMb29wIHRvIGV4ZWN1dGUgdGhlIGVudGlyZSBwcm9taXNlIHN0YWNrXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIHByb21pc2VFeGVjdXRvcigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAoIXRoaXMucHJvbWlzZVJ1bm5pbmcpIHtcbiAgICAgIHdoaWxlICh0aGlzLnN0b3JlZFByb21pc2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKHRoaXMub3JkZXIgPT09ICdub3JtYWwnKSB7XG4gICAgICAgICAgdGhpcy5wcm9taXNlUnVubmluZyA9IHRoaXMuc3RvcmVkUHJvbWlzZXMuc2hpZnQoKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm9yZGVyID09PSAncmV2ZXJzZScpIHtcbiAgICAgICAgICB0aGlzLnByb21pc2VSdW5uaW5nID0gdGhpcy5zdG9yZWRQcm9taXNlcy5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICh0aGlzLnByb21pc2VSdW5uaW5nPy5wcm9taXNlRnVuY3Rpb24pIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucHJvbWlzZVJ1bm5pbmcucHJvbWlzZUZ1bmN0aW9uKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHRoaXMucHJvbWlzZVJ1bm5pbmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXRkb2NcbiAgICovXG4gIHB1YmxpYyBhZGRQcm9taXNlKGtleTogSywgcHJvbWlzZUZ1bmN0aW9uOiBGdW5jdGlvblByb21pc2U8VD4pOiBQcm9taXNlPFQ+IHtcbiAgICBjb25zdCBwcm9taXNlT2JqZWN0OiBQcm9taXNlSXRlbVN0YWNrPEssIFQ+ID0geyBrZXkgfTtcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2U8VD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgcHJvbWlzZU9iamVjdC5wcm9taXNlRnVuY3Rpb24gPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBwcm9taXNlRnVuY3Rpb24oKS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHByb21pc2VPYmplY3QucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5zdG9yZWRQcm9taXNlcy5wdXNoKHByb21pc2VPYmplY3QpO1xuICAgIHRoaXMucHJvbWlzZUV4ZWN1dG9yKCk7XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxufVxuIl19