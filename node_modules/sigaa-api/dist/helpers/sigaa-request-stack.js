"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SigaaRequestStack = void 0;

require("source-map-support/register");

var _sigaaPromiseStack = require("./sigaa-promise-stack");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @category Internal
 */
class SigaaRequestStack {
  constructor() {
    _defineProperty(this, "_stacks", {});
  }

  createStacks(domain) {
    const newRequestStacks = {
      noCookie: new _sigaaPromiseStack.SigaaPromiseStack('reverse'),
      get: new _sigaaPromiseStack.SigaaPromiseStack('reverse'),
      post: new _sigaaPromiseStack.SigaaPromiseStack('reverse')
    };
    this._stacks[domain] = newRequestStacks;
    return this._stacks[domain];
  }
  /**
   * @inheritdoc
   */


  getStacksByDomain(domain) {
    return this._stacks[domain] || this.createStacks(domain);
  }
  /**
   * @inheritdoc
   */


  close() {
    for (const domain of Object.keys(this._stacks)) {
      this.getStacksByDomain(domain).noCookie.flush();
      this.getStacksByDomain(domain).get.flush();
      this.getStacksByDomain(domain).post.flush();
    }

    this._stacks = {};
  }

}

exports.SigaaRequestStack = SigaaRequestStack;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL3NpZ2FhLXJlcXVlc3Qtc3RhY2sudHMiXSwibmFtZXMiOlsiU2lnYWFSZXF1ZXN0U3RhY2siLCJjcmVhdGVTdGFja3MiLCJkb21haW4iLCJuZXdSZXF1ZXN0U3RhY2tzIiwibm9Db29raWUiLCJTaWdhYVByb21pc2VTdGFjayIsImdldCIsInBvc3QiLCJfc3RhY2tzIiwiZ2V0U3RhY2tzQnlEb21haW4iLCJjbG9zZSIsIk9iamVjdCIsImtleXMiLCJmbHVzaCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7Ozs7QUEwQ0E7QUFDQTtBQUNBO0FBQ08sTUFBTUEsaUJBQU4sQ0FBc0U7QUFBQTtBQUFBLHFDQUNwQixFQURvQjtBQUFBOztBQUduRUMsRUFBQUEsWUFBWSxDQUFDQyxNQUFELEVBQXNDO0FBQ3hELFVBQU1DLGdCQUFnQixHQUFHO0FBQ3ZCQyxNQUFBQSxRQUFRLEVBQUUsSUFBSUMsb0NBQUosQ0FBNEIsU0FBNUIsQ0FEYTtBQUV2QkMsTUFBQUEsR0FBRyxFQUFFLElBQUlELG9DQUFKLENBQTRCLFNBQTVCLENBRmtCO0FBR3ZCRSxNQUFBQSxJQUFJLEVBQUUsSUFBSUYsb0NBQUosQ0FBNEIsU0FBNUI7QUFIaUIsS0FBekI7QUFLQSxTQUFLRyxPQUFMLENBQWFOLE1BQWIsSUFBdUJDLGdCQUF2QjtBQUNBLFdBQU8sS0FBS0ssT0FBTCxDQUFhTixNQUFiLENBQVA7QUFDRDtBQUVEO0FBQ0Y7QUFDQTs7O0FBQ0VPLEVBQUFBLGlCQUFpQixDQUFDUCxNQUFELEVBQXNDO0FBQ3JELFdBQU8sS0FBS00sT0FBTCxDQUFhTixNQUFiLEtBQXdCLEtBQUtELFlBQUwsQ0FBa0JDLE1BQWxCLENBQS9CO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7OztBQUNFUSxFQUFBQSxLQUFLLEdBQVM7QUFDWixTQUFLLE1BQU1SLE1BQVgsSUFBcUJTLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZLEtBQUtKLE9BQWpCLENBQXJCLEVBQWdEO0FBQzlDLFdBQUtDLGlCQUFMLENBQXVCUCxNQUF2QixFQUErQkUsUUFBL0IsQ0FBd0NTLEtBQXhDO0FBQ0EsV0FBS0osaUJBQUwsQ0FBdUJQLE1BQXZCLEVBQStCSSxHQUEvQixDQUFtQ08sS0FBbkM7QUFDQSxXQUFLSixpQkFBTCxDQUF1QlAsTUFBdkIsRUFBK0JLLElBQS9CLENBQW9DTSxLQUFwQztBQUNEOztBQUNELFNBQUtMLE9BQUwsR0FBZSxFQUFmO0FBQ0Q7O0FBOUIwRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb21pc2VTdGFjaywgU2lnYWFQcm9taXNlU3RhY2sgfSBmcm9tICcuL3NpZ2FhLXByb21pc2Utc3RhY2snO1xuXG4vKipcbiAqIFJlcXVpc2l0aW9uIHN0YWNrIGxpc3QuXG4gKiBAY2F0ZWdvcnkgSW50ZXJuYWxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXF1ZXN0U3RhY2tzPEssIFQ+IHtcbiAgLyoqXG4gICAqIFJlcXVlc3Qgd2l0aG91dCBjb29raWVzICh3aXRob3V0IHNlc3Npb24pLlxuICAgKiBUaGlzIHN0YWNrIHRha2VzIHByZWNlZGVuY2Ugb3ZlciB0aGUgb3RoZXJzLlxuICAgKi9cbiAgbm9Db29raWU6IFByb21pc2VTdGFjazxLLCBUPjtcbiAgLyoqXG4gICAqIE1ldGhvZCBHRVQuXG4gICAqL1xuICBnZXQ6IFByb21pc2VTdGFjazxLLCBUPjtcbiAgLyoqXG4gICAqIG1ldGhvZCBQT1NULlxuICAgKi9cbiAgcG9zdDogUHJvbWlzZVN0YWNrPEssIFQ+O1xufVxuXG4vKipcbiAqIFN0b3JlIHJlcXVlc3Qgc3RhY2suXG4gKiBTZXJ2ZXMgdG8gb3JnYW5pemUgcmVxdWVzdHMgYW5kIGF2b2lkIG11bHRpcGxlIHJlcXVlc3RzIGF0IHRoZSBzYW1lIHRpbWUsXG4gKiBpZiBtdWx0aXBsZSByZXF1ZXN0cyBvY2N1ciBhdCB0aGUgc2FtZSB0aW1lLCBTSUdBQSB3aWxsIG5vdCByZXNwb25kIGNvcnJlY3RseSAoYmxhbmsgcGFnZXMpLlxuICogQGNhdGVnb3J5IEludGVybmFsXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVxdWVzdFN0YWNrQ29udHJvbGxlcjxLLCBUPiB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIFJlcXVlc3RTdGFja3MgZm9yIGRvbWFpbi5cbiAgICogQHBhcmFtIGRvbWFpbiBkb21haW5cbiAgICogQHJldHVybnMgUmVxdWVzdFN0YWNrcy5cbiAgICovXG4gIGdldFN0YWNrc0J5RG9tYWluKGRvbWFpbjogc3RyaW5nKTogUmVxdWVzdFN0YWNrczxLLCBUPjtcblxuICAvKipcbiAgICogZmx1c2ggYWxsIHN0YWNrcy5cbiAgICovXG4gIGNsb3NlKCk6IHZvaWQ7XG59XG5cbi8qKlxuICogQGNhdGVnb3J5IEludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBTaWdhYVJlcXVlc3RTdGFjazxLLCBUPiBpbXBsZW1lbnRzIFJlcXVlc3RTdGFja0NvbnRyb2xsZXI8SywgVD4ge1xuICBwcml2YXRlIF9zdGFja3M6IFJlY29yZDxzdHJpbmcsIFJlcXVlc3RTdGFja3M8SywgVD4+ID0ge307XG5cbiAgcHJpdmF0ZSBjcmVhdGVTdGFja3MoZG9tYWluOiBzdHJpbmcpOiBSZXF1ZXN0U3RhY2tzPEssIFQ+IHtcbiAgICBjb25zdCBuZXdSZXF1ZXN0U3RhY2tzID0ge1xuICAgICAgbm9Db29raWU6IG5ldyBTaWdhYVByb21pc2VTdGFjazxLLCBUPigncmV2ZXJzZScpLFxuICAgICAgZ2V0OiBuZXcgU2lnYWFQcm9taXNlU3RhY2s8SywgVD4oJ3JldmVyc2UnKSxcbiAgICAgIHBvc3Q6IG5ldyBTaWdhYVByb21pc2VTdGFjazxLLCBUPigncmV2ZXJzZScpXG4gICAgfTtcbiAgICB0aGlzLl9zdGFja3NbZG9tYWluXSA9IG5ld1JlcXVlc3RTdGFja3M7XG4gICAgcmV0dXJuIHRoaXMuX3N0YWNrc1tkb21haW5dO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0ZG9jXG4gICAqL1xuICBnZXRTdGFja3NCeURvbWFpbihkb21haW46IHN0cmluZyk6IFJlcXVlc3RTdGFja3M8SywgVD4ge1xuICAgIHJldHVybiB0aGlzLl9zdGFja3NbZG9tYWluXSB8fCB0aGlzLmNyZWF0ZVN0YWNrcyhkb21haW4pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0ZG9jXG4gICAqL1xuICBjbG9zZSgpOiB2b2lkIHtcbiAgICBmb3IgKGNvbnN0IGRvbWFpbiBvZiBPYmplY3Qua2V5cyh0aGlzLl9zdGFja3MpKSB7XG4gICAgICB0aGlzLmdldFN0YWNrc0J5RG9tYWluKGRvbWFpbikubm9Db29raWUuZmx1c2goKTtcbiAgICAgIHRoaXMuZ2V0U3RhY2tzQnlEb21haW4oZG9tYWluKS5nZXQuZmx1c2goKTtcbiAgICAgIHRoaXMuZ2V0U3RhY2tzQnlEb21haW4oZG9tYWluKS5wb3N0LmZsdXNoKCk7XG4gICAgfVxuICAgIHRoaXMuX3N0YWNrcyA9IHt9O1xuICB9XG59XG4iXX0=