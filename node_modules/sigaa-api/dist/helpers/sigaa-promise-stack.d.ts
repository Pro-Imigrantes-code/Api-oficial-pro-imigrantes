declare type PromiseStackOrder = 'normal' | 'reverse';
/**
 * @category Internal
 */
export interface FunctionPromise<T> {
    (): Promise<T>;
}
/**
 * Item in stack.
 * @category Internal
 */
export interface PromiseItemStack<K, T> {
    key: K;
    promiseFunction?(): Promise<void>;
    promise?: Promise<T>;
}
/**
 * Abstraction to represent a class that performs chain functions and waits for each promise that the functions return.
 * @category Internal
 */
export interface PromiseStack<K, T> {
    /**
     * Add promise in stack.
     * The function is not called the moment it is added to the stack, but when it is your turn on the stack
     * @param promiseFunction function to generate the promise
     * @param key Key of promise array, to identify a function.
     * @returns A promise that resolves with the function's response.
     */
    addPromise(key: K, promiseFunction: FunctionPromise<T>): Promise<T>;
    /**
     * Get promises objects.
     * Returns the functions that are still in the stack.
     */
    readonly promises: PromiseItemStack<K, T>[];
    /**
     * flush the stack.
     */
    flush(): void;
}
/**
 * Class to control promise order
 * Performs chain functions and waits for each promise that the functions return.
 * @category Internal
 */
export declare class SigaaPromiseStack<K, T> implements PromiseStack<K, T> {
    /**
     * Order type.
     * If it is reverse, the last entered will be the first executed. default is normal.
     */
    private order;
    /**
     * Current promise running object as {key, promiseFunction, promise}.
     */
    private promiseRunning?;
    /**
     * store all promises objects as {key, promiseFunction, promise}
     */
    private storedPromises;
    /**
     * @param PromiseStackOrder [order] order of execution of the promises, if it is reverse, the last entered will be the first executed. default is normal.
     */
    constructor(order?: PromiseStackOrder);
    /**
     * @inheritdoc
     */
    flush(): void;
    /**
     * @inheritdoc
     */
    get promises(): PromiseItemStack<K, T>[];
    /**
     * Loop to execute the entire promise stack
     */
    private promiseExecutor;
    /**
     * @inheritdoc
     */
    addPromise(key: K, promiseFunction: FunctionPromise<T>): Promise<T>;
}
export {};
