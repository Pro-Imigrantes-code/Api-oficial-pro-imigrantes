"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SigaaSearchTeacherResult = void 0;

require("source-map-support/register");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @category Internal
 */
class SigaaSearchTeacherResult {
  constructor(http, parser, options) {
    this.http = http;
    this.parser = parser;

    _defineProperty(this, "_name", void 0);

    _defineProperty(this, "_department", void 0);

    _defineProperty(this, "_pageURL", void 0);

    _defineProperty(this, "_photoURL", void 0);

    this._name = options.name;
    this._department = options.department;
    this._pageURL = options.pageURL;
    this._photoURL = options.photoURL;
  }

  async getEmail() {
    const page = await this.http.get(this.pageURL.href);
    const contactElements = page.$('#contato').children().toArray();
    let email;

    for (const contactElement of contactElements) {
      const name = this.parser.removeTagsHtml(page.$(contactElement).find('dt').html());

      if (name === 'Endereço eletrônico') {
        email = this.parser.removeTagsHtml(page.$(contactElement).find('dd').html());
        break;
      }
    }

    if (email && email !== 'não informado') {
      return email;
    } else {
      return undefined;
    }
  }

  get name() {
    return this._name;
  }

  get profilePictureURL() {
    return this._photoURL;
  }

  downloadProfilePicture(basepath, callback) {
    if (!this.profilePictureURL) throw new Error("SIGAA: This teacher doesn't have profile picture");
    return this.http.downloadFileByGet(this.profilePictureURL.href, basepath, callback);
  }

  get department() {
    return this._department;
  }

  get pageURL() {
    return this._pageURL;
  }

}

exports.SigaaSearchTeacherResult = SigaaSearchTeacherResult;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZWFyY2gvc2lnYWEtc2VhcmNoLXRlYWNoZXItcmVzdWx0LnRzIl0sIm5hbWVzIjpbIlNpZ2FhU2VhcmNoVGVhY2hlclJlc3VsdCIsImNvbnN0cnVjdG9yIiwiaHR0cCIsInBhcnNlciIsIm9wdGlvbnMiLCJfbmFtZSIsIm5hbWUiLCJfZGVwYXJ0bWVudCIsImRlcGFydG1lbnQiLCJfcGFnZVVSTCIsInBhZ2VVUkwiLCJfcGhvdG9VUkwiLCJwaG90b1VSTCIsImdldEVtYWlsIiwicGFnZSIsImdldCIsImhyZWYiLCJjb250YWN0RWxlbWVudHMiLCIkIiwiY2hpbGRyZW4iLCJ0b0FycmF5IiwiZW1haWwiLCJjb250YWN0RWxlbWVudCIsInJlbW92ZVRhZ3NIdG1sIiwiZmluZCIsImh0bWwiLCJ1bmRlZmluZWQiLCJwcm9maWxlUGljdHVyZVVSTCIsImRvd25sb2FkUHJvZmlsZVBpY3R1cmUiLCJiYXNlcGF0aCIsImNhbGxiYWNrIiwiRXJyb3IiLCJkb3dubG9hZEZpbGVCeUdldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFzQ0E7QUFDQTtBQUNBO0FBQ08sTUFBTUEsd0JBQU4sQ0FBd0Q7QUFNN0RDLEVBQUFBLFdBQVcsQ0FDREMsSUFEQyxFQUVEQyxNQUZDLEVBR1RDLE9BSFMsRUFJVDtBQUFBLFNBSFFGLElBR1IsR0FIUUEsSUFHUjtBQUFBLFNBRlFDLE1BRVIsR0FGUUEsTUFFUjs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFDQSxTQUFLRSxLQUFMLEdBQWFELE9BQU8sQ0FBQ0UsSUFBckI7QUFDQSxTQUFLQyxXQUFMLEdBQW1CSCxPQUFPLENBQUNJLFVBQTNCO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQkwsT0FBTyxDQUFDTSxPQUF4QjtBQUNBLFNBQUtDLFNBQUwsR0FBaUJQLE9BQU8sQ0FBQ1EsUUFBekI7QUFDRDs7QUFFYSxRQUFSQyxRQUFRLEdBQWdDO0FBQzVDLFVBQU1DLElBQUksR0FBRyxNQUFNLEtBQUtaLElBQUwsQ0FBVWEsR0FBVixDQUFjLEtBQUtMLE9BQUwsQ0FBYU0sSUFBM0IsQ0FBbkI7QUFFQSxVQUFNQyxlQUFlLEdBQUdILElBQUksQ0FBQ0ksQ0FBTCxDQUFPLFVBQVAsRUFBbUJDLFFBQW5CLEdBQThCQyxPQUE5QixFQUF4QjtBQUNBLFFBQUlDLEtBQUo7O0FBQ0EsU0FBSyxNQUFNQyxjQUFYLElBQTZCTCxlQUE3QixFQUE4QztBQUM1QyxZQUFNWCxJQUFJLEdBQUcsS0FBS0gsTUFBTCxDQUFZb0IsY0FBWixDQUNYVCxJQUFJLENBQUNJLENBQUwsQ0FBT0ksY0FBUCxFQUF1QkUsSUFBdkIsQ0FBNEIsSUFBNUIsRUFBa0NDLElBQWxDLEVBRFcsQ0FBYjs7QUFHQSxVQUFJbkIsSUFBSSxLQUFLLHFCQUFiLEVBQW9DO0FBQ2xDZSxRQUFBQSxLQUFLLEdBQUcsS0FBS2xCLE1BQUwsQ0FBWW9CLGNBQVosQ0FDTlQsSUFBSSxDQUFDSSxDQUFMLENBQU9JLGNBQVAsRUFBdUJFLElBQXZCLENBQTRCLElBQTVCLEVBQWtDQyxJQUFsQyxFQURNLENBQVI7QUFHQTtBQUNEO0FBQ0Y7O0FBQ0QsUUFBSUosS0FBSyxJQUFJQSxLQUFLLEtBQUssZUFBdkIsRUFBd0M7QUFDdEMsYUFBT0EsS0FBUDtBQUNELEtBRkQsTUFFTztBQUNMLGFBQU9LLFNBQVA7QUFDRDtBQUNGOztBQUVPLE1BQUpwQixJQUFJLEdBQVc7QUFDakIsV0FBTyxLQUFLRCxLQUFaO0FBQ0Q7O0FBRW9CLE1BQWpCc0IsaUJBQWlCLEdBQW9CO0FBQ3ZDLFdBQU8sS0FBS2hCLFNBQVo7QUFDRDs7QUFFRGlCLEVBQUFBLHNCQUFzQixDQUNwQkMsUUFEb0IsRUFFcEJDLFFBRm9CLEVBR0g7QUFDakIsUUFBSSxDQUFDLEtBQUtILGlCQUFWLEVBQ0UsTUFBTSxJQUFJSSxLQUFKLENBQVUsa0RBQVYsQ0FBTjtBQUNGLFdBQU8sS0FBSzdCLElBQUwsQ0FBVThCLGlCQUFWLENBQ0wsS0FBS0wsaUJBQUwsQ0FBdUJYLElBRGxCLEVBRUxhLFFBRkssRUFHTEMsUUFISyxDQUFQO0FBS0Q7O0FBRWEsTUFBVnRCLFVBQVUsR0FBVztBQUN2QixXQUFPLEtBQUtELFdBQVo7QUFDRDs7QUFFVSxNQUFQRyxPQUFPLEdBQVE7QUFDakIsV0FBTyxLQUFLRCxRQUFaO0FBQ0Q7O0FBbkU0RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhcnNlciB9IGZyb20gJ0BoZWxwZXJzL3NpZ2FhLXBhcnNlcic7XG5pbXBvcnQgeyBIVFRQLCBQcm9ncmVzc0NhbGxiYWNrIH0gZnJvbSAnQHNlc3Npb24vc2lnYWEtaHR0cCc7XG5cbi8qKlxuICogQGNhdGVnb3J5IEludGVybmFsXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGVhY2hlclJlc3VsdERhdGEge1xuICBuYW1lOiBzdHJpbmc7XG4gIGRlcGFydG1lbnQ6IHN0cmluZztcbiAgcGhvdG9VUkw/OiBVUkw7XG4gIHBhZ2VVUkw6IFVSTDtcbn1cblxuLyoqXG4gKiBAY2F0ZWdvcnkgUHVibGljXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGVhY2hlclJlc3VsdCB7XG4gIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgcmVhZG9ubHkgZGVwYXJ0bWVudDogc3RyaW5nO1xuICByZWFkb25seSBwYWdlVVJMOiBVUkw7XG4gIHJlYWRvbmx5IHByb2ZpbGVQaWN0dXJlVVJMPzogVVJMO1xuICAvKipcbiAgICogTWF5IHJldHVybiB1bmRlZmluZWQgaWYgdGhlIHRlYWNoZXIgaGFzIG5vIHJlZ2lzdGVyZWQgZW1haWxcbiAgICovXG4gIGdldEVtYWlsKCk6IFByb21pc2U8c3RyaW5nIHwgdW5kZWZpbmVkPjtcbiAgLyoqXG4gICAqIERvd25sb2FkIHVzZXIgcHJvZmlsZSBwaWN0dXJlLCBzYXZlIGluIGJhc2VwYXRoXG4gICAqIFJldHVybnMgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSBmaWxlIG9uIHRoZSBmaWxlIHN5c3RlbVxuICAgKiBUaHJvd3MgYW4gZXhjZXB0aW9uIGlmIHRoZSB0ZWFjaGVyIGRvZXMgbm90IGhhdmUgYSBwaG90b1xuICAgKiBAcGFyYW0gYmFzZXBhdGggcGF0aCB0byBzYXZlIGZpbGVcbiAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAqL1xuICBkb3dubG9hZFByb2ZpbGVQaWN0dXJlKFxuICAgIGJhc2VwYXRoOiBzdHJpbmcsXG4gICAgY2FsbGJhY2s6IFByb2dyZXNzQ2FsbGJhY2tcbiAgKTogUHJvbWlzZTxzdHJpbmc+O1xufVxuXG4vKipcbiAqIEBjYXRlZ29yeSBJbnRlcm5hbFxuICovXG5leHBvcnQgY2xhc3MgU2lnYWFTZWFyY2hUZWFjaGVyUmVzdWx0IGltcGxlbWVudHMgVGVhY2hlclJlc3VsdCB7XG4gIHByaXZhdGUgX25hbWU6IHN0cmluZztcbiAgcHJpdmF0ZSBfZGVwYXJ0bWVudDogc3RyaW5nO1xuICBwcml2YXRlIF9wYWdlVVJMOiBVUkw7XG4gIHByaXZhdGUgX3Bob3RvVVJMPzogVVJMO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaHR0cDogSFRUUCxcbiAgICBwcml2YXRlIHBhcnNlcjogUGFyc2VyLFxuICAgIG9wdGlvbnM6IFRlYWNoZXJSZXN1bHREYXRhXG4gICkge1xuICAgIHRoaXMuX25hbWUgPSBvcHRpb25zLm5hbWU7XG4gICAgdGhpcy5fZGVwYXJ0bWVudCA9IG9wdGlvbnMuZGVwYXJ0bWVudDtcbiAgICB0aGlzLl9wYWdlVVJMID0gb3B0aW9ucy5wYWdlVVJMO1xuICAgIHRoaXMuX3Bob3RvVVJMID0gb3B0aW9ucy5waG90b1VSTDtcbiAgfVxuXG4gIGFzeW5jIGdldEVtYWlsKCk6IFByb21pc2U8c3RyaW5nIHwgdW5kZWZpbmVkPiB7XG4gICAgY29uc3QgcGFnZSA9IGF3YWl0IHRoaXMuaHR0cC5nZXQodGhpcy5wYWdlVVJMLmhyZWYpO1xuXG4gICAgY29uc3QgY29udGFjdEVsZW1lbnRzID0gcGFnZS4kKCcjY29udGF0bycpLmNoaWxkcmVuKCkudG9BcnJheSgpO1xuICAgIGxldCBlbWFpbDtcbiAgICBmb3IgKGNvbnN0IGNvbnRhY3RFbGVtZW50IG9mIGNvbnRhY3RFbGVtZW50cykge1xuICAgICAgY29uc3QgbmFtZSA9IHRoaXMucGFyc2VyLnJlbW92ZVRhZ3NIdG1sKFxuICAgICAgICBwYWdlLiQoY29udGFjdEVsZW1lbnQpLmZpbmQoJ2R0JykuaHRtbCgpXG4gICAgICApO1xuICAgICAgaWYgKG5hbWUgPT09ICdFbmRlcmXDp28gZWxldHLDtG5pY28nKSB7XG4gICAgICAgIGVtYWlsID0gdGhpcy5wYXJzZXIucmVtb3ZlVGFnc0h0bWwoXG4gICAgICAgICAgcGFnZS4kKGNvbnRhY3RFbGVtZW50KS5maW5kKCdkZCcpLmh0bWwoKVxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVtYWlsICYmIGVtYWlsICE9PSAnbsOjbyBpbmZvcm1hZG8nKSB7XG4gICAgICByZXR1cm4gZW1haWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgZ2V0IG5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZTtcbiAgfVxuXG4gIGdldCBwcm9maWxlUGljdHVyZVVSTCgpOiBVUkwgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl9waG90b1VSTDtcbiAgfVxuXG4gIGRvd25sb2FkUHJvZmlsZVBpY3R1cmUoXG4gICAgYmFzZXBhdGg6IHN0cmluZyxcbiAgICBjYWxsYmFjazogUHJvZ3Jlc3NDYWxsYmFja1xuICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGlmICghdGhpcy5wcm9maWxlUGljdHVyZVVSTClcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlNJR0FBOiBUaGlzIHRlYWNoZXIgZG9lc24ndCBoYXZlIHByb2ZpbGUgcGljdHVyZVwiKTtcbiAgICByZXR1cm4gdGhpcy5odHRwLmRvd25sb2FkRmlsZUJ5R2V0KFxuICAgICAgdGhpcy5wcm9maWxlUGljdHVyZVVSTC5ocmVmLFxuICAgICAgYmFzZXBhdGgsXG4gICAgICBjYWxsYmFja1xuICAgICk7XG4gIH1cblxuICBnZXQgZGVwYXJ0bWVudCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9kZXBhcnRtZW50O1xuICB9XG5cbiAgZ2V0IHBhZ2VVUkwoKTogVVJMIHtcbiAgICByZXR1cm4gdGhpcy5fcGFnZVVSTDtcbiAgfVxufVxuIl19