"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SigaaSearchTeacher = void 0;

require("source-map-support/register");

var _sigaaSearchTeacherResult = require("./sigaa-search-teacher-result");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @category Public
 */
class SigaaSearchTeacher {
  constructor(http, parser) {
    this.http = http;
    this.parser = parser;

    _defineProperty(this, "page", null);
  }

  async loadSearchPage() {
    if (!this.page) {
      this.page = await this.http.get('/sigaa/public/docente/busca_docentes.jsf');
    }
  }

  async getCampusList() {
    await this.loadSearchPage();
    const page = this.page;
    const campusOptionElements = page.$('select#form\\:departamento > option').toArray();
    const list = [];

    for (const campusOptionElement of campusOptionElements) {
      list.push({
        name: this.parser.removeTagsHtml(page.$(campusOptionElement).html()),
        value: this.parser.removeTagsHtml(page.$(campusOptionElement).val())
      });
    }

    return list;
  }

  async search(teacherName, campus) {
    await this.loadSearchPage();
    const page = this.page;
    let campusValue;

    if (!campus) {
      campusValue = '0';
    } else {
      campusValue = campus.value;
    }

    const formElement = page.$('form[name="form"]');
    const action = formElement.attr('action');
    if (!action) throw new Error('SIGAA: Form with action at teacher search page.');
    const url = new URL(action, page.url);
    const postValues = {};
    const inputs = formElement.find("input[name]:not([type='submit'])").toArray();

    for (const input of inputs) {
      const name = page.$(input).attr('name');
      if (name) postValues[name] = page.$(input).val();
    }

    postValues['form:nome'] = teacherName;
    postValues['form:departamento'] = campusValue;
    postValues['form:buscar'] = 'Buscar';
    return this.http.post(url.href, postValues).then(page => this.parseSearchResults(page));
  }

  async parseSearchResults(page) {
    const rowElements = page.$('table.listagem > tbody > tr[class]').toArray();
    const results = [];

    for (const rowElement of rowElements) {
      const name = this.parser.removeTagsHtml(page.$(rowElement).find('span.nome').html());
      const department = this.parser.removeTagsHtml(page.$(rowElement).find('span.departamento').html());
      const pageHREF = this.parser.removeTagsHtml(page.$(rowElement).find('span.pagina > a').attr('href'));
      const photoHREF = this.parser.removeTagsHtml(page.$(rowElement).find('img').attr('src'));
      const pageURL = new URL(pageHREF, page.url);
      const photoURL = photoHREF.includes('no_picture.png') ? undefined : new URL(photoHREF, page.url);
      results.push(new _sigaaSearchTeacherResult.SigaaSearchTeacherResult(this.http, this.parser, {
        name,
        department,
        pageURL,
        photoURL
      }));
    }

    return results;
  }

}

exports.SigaaSearchTeacher = SigaaSearchTeacher;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,