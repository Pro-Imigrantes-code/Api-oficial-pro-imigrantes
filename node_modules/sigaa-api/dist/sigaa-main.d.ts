import { Account } from './account/sigaa-account';
import { BondFactory } from './bonds/sigaa-bond-factory';
import { Parser } from './helpers/sigaa-parser';
import { FileData, SigaaFile } from './resources/sigaa-file';
import { SigaaSearch } from './search/sigaa-search';
import { HTTPSession } from './session/sigaa-http-session';
import { HTTPFactory } from './session/sigaa-http-factory';
import { Login } from './session/login/sigaa-login';
import { Session } from './session/sigaa-session';
import { AccountFactory } from './account/sigaa-account-factory';
import { BondController } from './session/sigaa-bond-controller';
import { CourseFactory } from './courses/sigaa-course-student-factory';
import { CourseResourcesManagerFactory } from './courses/sigaa-course-resources-manager-factory';
import { CourseResourcesFactory } from './courses/sigaa-course-resources-factory';
import { LessonParserFactory } from './courses/sigaa-lesson-parser-factory';
import { XOR } from './sigaa-types';
import { RequestStackController } from './helpers/sigaa-request-stack';
import { Request } from './session/sigaa-http-session';
import { CookiesController } from './session/sigaa-cookies-controller';
import { InstitutionType } from './session/sigaa-institution-controller';
import { ActivityFactory } from './activity/sigaa-activity-factory';
import { Page } from './session/sigaa-page';
/**
 * @category Internal
 */
interface SigaaCommonConstructorOptions {
    login?: Login;
    parser?: Parser;
    session?: Session;
}
interface SigaaConstructorURL {
    url: string;
    bondController?: BondController;
    cookiesController?: CookiesController;
    requestStackController?: RequestStackController<Request, Page>;
}
interface WithAccountFactory {
    accountFactory?: AccountFactory;
}
interface WithBondFactory {
    bondFactory: BondFactory;
}
interface WithCourseFactory {
    courseFactory: CourseFactory;
}
interface WithActivityFactory {
    activityFactory?: ActivityFactory;
}
declare type WithoutCourseFactory = {
    lessonParserFactory?: LessonParserFactory;
} & XOR<{
    courseResourcesManagerFactory?: CourseResourcesManagerFactory;
}, {
    courseResourcesFactory?: CourseResourcesFactory;
}>;
/**
 * @category Internal
 */
interface SigaaConstructorHTTP {
    httpFactory: HTTPFactory;
    httpSession: HTTPSession;
}
/**
 * @category Public
 */
export declare type SigaaOptionsConstructor = SigaaCommonConstructorOptions & XOR<{
    institution: InstitutionType;
    url: string;
}, {
    session: Session;
    httpSession: HTTPSession;
}> & XOR<SigaaConstructorURL, SigaaConstructorHTTP> & XOR<WithAccountFactory, XOR<WithBondFactory, WithActivityFactory & XOR<WithCourseFactory, WithoutCourseFactory>>>;
/**
 * Main class, used to instantiate other classes in standard use.
 * @category Public
 */
export declare class Sigaa {
    /**
     * Instance of login class.
     */
    readonly loginInstance: Login;
    /**
     * Instance of http factory.
     */
    readonly httpFactory: HTTPFactory;
    /**
     * Instance of parser.
     */
    readonly parser: Parser;
    /**
     * Instance of session.
     */
    readonly session: Session;
    /**
     * Instance of account factory.
     */
    readonly accountFactory: AccountFactory;
    /**
     * Instance of http session.
     */
    readonly httpSession: HTTPSession;
    /**
     * Instance of http.
     */
    private http;
    constructor(options: SigaaOptionsConstructor);
    /**
     * User authentication.
     * @param username
     * @param password
     */
    login(username: string, password: string): Promise<Account>;
    /**
     * Load file to download.
     * @param options
     * @param options.id file id
     * @param options.key file key
     */
    loadFile(options: FileData): SigaaFile;
    /**
     * Returns instance of SigaaSearch.
     */
    get search(): SigaaSearch;
    /**
     * Close the instance, it just clears the session data, if you want to log off the system you must use Account.logoff().
     */
    close(): void;
}
export {};
