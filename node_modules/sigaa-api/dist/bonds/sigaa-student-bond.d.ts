/// <reference types="node" />
import { CourseFactory } from '..\courses/sigaa-course-student-factory';
import { Parser } from '..\helpers/sigaa-parser';
import { HTTP } from '..\session/sigaa-http';
import { URL } from 'url';
import { CourseStudent } from '..\courses/sigaa-course-student';
import { Homework } from '..\courses\resources\attachments/sigaa-homework-student';
import { Exam } from '..\courses\resources/sigaa-exam-student';
import { Activity, ActivityFactory } from '..\activity/sigaa-activity-factory';
/**
 * Abstraction to represent a student bond.
 * @category Public
 */
export interface StudentBond {
    readonly type: 'student';
    /**
     * It's the name of the student program, in IFSC it is called "curso".
     */
    readonly program: string;
    /**
     * It is the student registration code, in IFSC it is called "matr√≠cula".
     */
    readonly registration: string;
    /**
     * Get courses, in IFSC it is called "Turmas Virtuais".
     * @param allPeriods if true, all courses will be returned; otherwise, only current courses.
     * @returns Promise with array of courses.
     */
    getCourses(allPeriods?: boolean): Promise<CourseStudent[]>;
    getActivities(): Promise<Activity[]>;
    getCurrentPeriod(): Promise<string>;
}
export interface ActivityTypeHomework {
    type: 'homework';
    course: CourseStudent;
    homework: Homework;
    date: Date;
    done: boolean;
}
export interface ActivityTypeExem {
    type: 'exam';
    title: string;
    course: CourseStudent;
    exem: Exam;
    date: Date;
    done: boolean;
}
/**
 * Class to represent student bond.
 * @category Internal
 */
export declare class SigaaStudentBond implements StudentBond {
    private http;
    private parser;
    private courseFactory;
    private activityFactory;
    readonly program: string;
    readonly registration: string;
    readonly bondSwitchUrl: URL | null;
    constructor(http: HTTP, parser: Parser, courseFactory: CourseFactory, activityFactory: ActivityFactory, program: string, registration: string, bondSwitchUrl: URL | null);
    readonly type = "student";
    private _currentPeriod?;
    /**
     * Get courses, in IFSC it is called "Turmas Virtuais".
     * @param allPeriods if true, all courses will be returned; otherwise, only latest courses.
     * @returns Promise with array of courses.
     */
    getCourses(allPeriods?: boolean): Promise<CourseStudent[]>;
    getActivities(): Promise<Activity[]>;
    getCurrentPeriod(): Promise<string>;
}
