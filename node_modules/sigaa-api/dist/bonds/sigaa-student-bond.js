"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SigaaStudentBond = void 0;

require("source-map-support/register");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Class to represent student bond.
 * @category Internal
 */
class SigaaStudentBond {
  constructor(http, parser, courseFactory, activityFactory, program, registration, bondSwitchUrl) {
    this.http = http;
    this.parser = parser;
    this.courseFactory = courseFactory;
    this.activityFactory = activityFactory;
    this.program = program;
    this.registration = registration;
    this.bondSwitchUrl = bondSwitchUrl;

    _defineProperty(this, "type", 'student');

    _defineProperty(this, "_currentPeriod", void 0);
  }

  /**
   * Get courses, in IFSC it is called "Turmas Virtuais".
   * @param allPeriods if true, all courses will be returned; otherwise, only latest courses.
   * @returns Promise with array of courses.
   */
  async getCourses(allPeriods = false) {
    const coursesPage = await this.http.get('/sigaa/portais/discente/turmas.jsf');
    const table = coursesPage.$('.listagem');
    if (table.length === 0) return [];
    const listCourses = [];
    const rows = table.find('tbody > tr').toArray();
    /* 
       If allPeriods is true then only the last period is
       returned, therefore we need to find out what the 
       value of the last period is, since different 
       versions of SIGAA can have different ordering we 
       can't get the last or first period in the table,
       we need to find out which is the newest regardless
       of table order.
    */

    let periodFilter = null;

    if (!allPeriods) {
      for (let i = 0; i < rows.length; i++) {
        const cellElements = coursesPage.$(rows[i]).find('td');

        if (cellElements.eq(0).hasClass('periodo')) {
          const currentPeriod = this.parser.removeTagsHtml(cellElements.eq(0).html());

          if (periodFilter == null) {
            periodFilter = currentPeriod;
          } else if ([currentPeriod, periodFilter].sort()[1] == currentPeriod) {
            //Check alphabetically if the currentPeriod is the oldest
            periodFilter = currentPeriod;
          } else {
            //If the periodFilter is already the newest, we don't need to look for a newest one.
            break;
          }
        }
      }
    }

    const tableColumnIndexs = {
      title: null,
      class: null,
      schedule: null,
      numberOfStudents: null,
      button: null
    };
    const tableHeaderCellElements = table.find('thead > tr td').toArray();

    for (let column = 0; column < tableHeaderCellElements.length; column++) {
      const cellContent = this.parser.removeTagsHtml(coursesPage.$(tableHeaderCellElements[column]).html());

      switch (cellContent) {
        case 'Disciplina':
          tableColumnIndexs.title = column;
          break;

        case 'Turma':
          tableColumnIndexs.class = column;
          break;

        case 'Horário':
          tableColumnIndexs.schedule = column;
          break;

        case 'Alunos':
          tableColumnIndexs.numberOfStudents = column;
          break;

        case '':
          tableColumnIndexs.button = column;
          break;
      }
    }

    if (tableColumnIndexs.button == null) {
      throw new Error('SIGAA: Invalid courses table, could not find the column with class buttons.');
    }

    if (tableColumnIndexs.title == null) {
      throw new Error('SIGAA: Invalid courses table, could not find the column with class titles.');
    }

    if (tableColumnIndexs.schedule == null) {
      throw new Error('SIGAA: Invalid courses table, could not find the column with class schedules.');
    }

    let period;

    for (const row of rows) {
      const cellElements = coursesPage.$(row).find('td');

      if (cellElements.eq(0).hasClass('periodo')) {
        period = this.parser.removeTagsHtml(cellElements.html());
      } else if (period && (!periodFilter || periodFilter == period)) {
        const fullname = this.parser.removeTagsHtml(cellElements.eq(tableColumnIndexs.title).html());
        const [code, ...titleSlices] = fullname.split(' - ');
        const title = titleSlices.join(' - ');
        const buttonCoursePage = cellElements.eq(tableColumnIndexs.button).find('a[onclick]');
        const buttonOnClickCode = buttonCoursePage.attr('onclick');
        if (!buttonOnClickCode) throw new Error('SIGAA: Courses table without course button.');
        const form = coursesPage.parseJSFCLJS(buttonOnClickCode);
        let numberOfStudents = 0;

        if (tableColumnIndexs.numberOfStudents !== null) {
          numberOfStudents = Number(this.parser.removeTagsHtml(cellElements.eq(tableColumnIndexs.numberOfStudents).html()));
        }

        const schedule = this.parser.removeTagsHtml(cellElements.eq(tableColumnIndexs.schedule).html());
        const id = form.postValues['idTurma'];
        if (!id) throw new Error('SIGAA: Course ID not found.');
        const courseData = {
          title,
          code,
          schedule,
          numberOfStudents,
          period,
          id,
          form
        };
        listCourses.push(this.courseFactory.createCourseStudent(courseData));
      }
    }

    return listCourses;
  }

  async getActivities() {
    const frontPage = await this.http.get('/sigaa/portais/discente/discente.jsf');
    const table = frontPage.$('#avaliacao-portal > table');
    const rows = table.find('tbody > tr').toArray();
    const listActivities = [];

    for (const row of rows) {
      const cellElements = frontPage.$(row).find('td');
      const dateCellContent = this.parser.removeTagsHtml(cellElements.eq(1).html());
      const date = this.parser.parseDates(dateCellContent, 1)[0];
      const done = cellElements.eq(0).find('img').attr('src') === '/sigaa/img/check.png' || date.valueOf() < Date.now();
      const infoTextLines = this.parser.removeTagsHtml(cellElements.eq(2).find('small').html()).split('\n');
      if (infoTextLines.length !== 2) throw new Error('SIGAA: The description of the activity does not correspond to what was expected.');
      const courseTitle = infoTextLines[0];
      const [type, activityTitle] = infoTextLines[1].split(': ');

      if (type === 'Questionário' || type === 'Tarefa') {
        const JSFCLJS = cellElements.eq(2).find('small a[onclick]').attr('onclick');
        if (!JSFCLJS) throw new Error('SIGAA: Activity without link.');
        const form = frontPage.parseJSFCLJS(JSFCLJS);

        if (type === 'Questionário') {
          listActivities.push(this.activityFactory.createActivityQuiz({
            courseTitle,
            quizTitle: activityTitle,
            id: form.postValues.id,
            form,
            done,
            date
          }, this));
        } else {
          listActivities.push(this.activityFactory.createActivityHomework({
            courseTitle,
            homeworkTitle: activityTitle,
            form,
            done,
            date
          }, this));
        }
      } else if (type === 'Avaliação') {
        listActivities.push(this.activityFactory.createActivityExam({
          courseTitle,
          examDescription: activityTitle,
          done,
          date
        }, this));
      }
    }

    return listActivities;
  }

  async getCurrentPeriod() {
    if (this._currentPeriod) return this._currentPeriod;
    const frontPage = await this.http.get('/sigaa/portais/discente/discente.jsf');
    const period = frontPage.$('#info-usuario > p.periodo-atual > strong').text();
    this._currentPeriod = period;
    return period;
  }

}

exports.SigaaStudentBond = SigaaStudentBond;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ib25kcy9zaWdhYS1zdHVkZW50LWJvbmQudHMiXSwibmFtZXMiOlsiU2lnYWFTdHVkZW50Qm9uZCIsImNvbnN0cnVjdG9yIiwiaHR0cCIsInBhcnNlciIsImNvdXJzZUZhY3RvcnkiLCJhY3Rpdml0eUZhY3RvcnkiLCJwcm9ncmFtIiwicmVnaXN0cmF0aW9uIiwiYm9uZFN3aXRjaFVybCIsImdldENvdXJzZXMiLCJhbGxQZXJpb2RzIiwiY291cnNlc1BhZ2UiLCJnZXQiLCJ0YWJsZSIsIiQiLCJsZW5ndGgiLCJsaXN0Q291cnNlcyIsInJvd3MiLCJmaW5kIiwidG9BcnJheSIsInBlcmlvZEZpbHRlciIsImkiLCJjZWxsRWxlbWVudHMiLCJlcSIsImhhc0NsYXNzIiwiY3VycmVudFBlcmlvZCIsInJlbW92ZVRhZ3NIdG1sIiwiaHRtbCIsInNvcnQiLCJ0YWJsZUNvbHVtbkluZGV4cyIsInRpdGxlIiwiY2xhc3MiLCJzY2hlZHVsZSIsIm51bWJlck9mU3R1ZGVudHMiLCJidXR0b24iLCJ0YWJsZUhlYWRlckNlbGxFbGVtZW50cyIsImNvbHVtbiIsImNlbGxDb250ZW50IiwiRXJyb3IiLCJwZXJpb2QiLCJyb3ciLCJmdWxsbmFtZSIsImNvZGUiLCJ0aXRsZVNsaWNlcyIsInNwbGl0Iiwiam9pbiIsImJ1dHRvbkNvdXJzZVBhZ2UiLCJidXR0b25PbkNsaWNrQ29kZSIsImF0dHIiLCJmb3JtIiwicGFyc2VKU0ZDTEpTIiwiTnVtYmVyIiwiaWQiLCJwb3N0VmFsdWVzIiwiY291cnNlRGF0YSIsInB1c2giLCJjcmVhdGVDb3Vyc2VTdHVkZW50IiwiZ2V0QWN0aXZpdGllcyIsImZyb250UGFnZSIsImxpc3RBY3Rpdml0aWVzIiwiZGF0ZUNlbGxDb250ZW50IiwiZGF0ZSIsInBhcnNlRGF0ZXMiLCJkb25lIiwidmFsdWVPZiIsIkRhdGUiLCJub3ciLCJpbmZvVGV4dExpbmVzIiwiY291cnNlVGl0bGUiLCJ0eXBlIiwiYWN0aXZpdHlUaXRsZSIsIkpTRkNMSlMiLCJjcmVhdGVBY3Rpdml0eVF1aXoiLCJxdWl6VGl0bGUiLCJjcmVhdGVBY3Rpdml0eUhvbWV3b3JrIiwiaG9tZXdvcmtUaXRsZSIsImNyZWF0ZUFjdGl2aXR5RXhhbSIsImV4YW1EZXNjcmlwdGlvbiIsImdldEN1cnJlbnRQZXJpb2QiLCJfY3VycmVudFBlcmlvZCIsInRleHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBc0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sTUFBTUEsZ0JBQU4sQ0FBOEM7QUFDbkRDLEVBQUFBLFdBQVcsQ0FDREMsSUFEQyxFQUVEQyxNQUZDLEVBR0RDLGFBSEMsRUFJREMsZUFKQyxFQUtBQyxPQUxBLEVBTUFDLFlBTkEsRUFPQUMsYUFQQSxFQVFUO0FBQUEsU0FQUU4sSUFPUixHQVBRQSxJQU9SO0FBQUEsU0FOUUMsTUFNUixHQU5RQSxNQU1SO0FBQUEsU0FMUUMsYUFLUixHQUxRQSxhQUtSO0FBQUEsU0FKUUMsZUFJUixHQUpRQSxlQUlSO0FBQUEsU0FIU0MsT0FHVCxHQUhTQSxPQUdUO0FBQUEsU0FGU0MsWUFFVCxHQUZTQSxZQUVUO0FBQUEsU0FEU0MsYUFDVCxHQURTQSxhQUNUOztBQUFBLGtDQUVjLFNBRmQ7O0FBQUE7QUFBRTs7QUFJSjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ2tCLFFBQVZDLFVBQVUsQ0FBQ0MsVUFBVSxHQUFHLEtBQWQsRUFBK0M7QUFDN0QsVUFBTUMsV0FBVyxHQUFHLE1BQU0sS0FBS1QsSUFBTCxDQUFVVSxHQUFWLENBQ3hCLG9DQUR3QixDQUExQjtBQUlBLFVBQU1DLEtBQUssR0FBR0YsV0FBVyxDQUFDRyxDQUFaLENBQWMsV0FBZCxDQUFkO0FBQ0EsUUFBSUQsS0FBSyxDQUFDRSxNQUFOLEtBQWlCLENBQXJCLEVBQXdCLE9BQU8sRUFBUDtBQUN4QixVQUFNQyxXQUE0QixHQUFHLEVBQXJDO0FBQ0EsVUFBTUMsSUFBSSxHQUFHSixLQUFLLENBQUNLLElBQU4sQ0FBVyxZQUFYLEVBQXlCQyxPQUF6QixFQUFiO0FBRUE7QUFDSjtB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QSxXQURGO0FBRUVTLFVBQUFBLGVBQWUsRUFBRVAsYUFGbkI7QUFHRVAsVUFBQUEsSUFIRjtBQUlFRixVQUFBQTtBQUpGLFNBREYsRUFPRSxJQVBGLENBREY7QUFXRDtBQUNGOztBQUNELFdBQU9GLGNBQVA7QUFDRDs7QUFDcUIsUUFBaEJtQixnQkFBZ0IsR0FBb0I7QUFDeEMsUUFBSSxLQUFLQyxjQUFULEVBQXlCLE9BQU8sS0FBS0EsY0FBWjtBQUN6QixVQUFNckIsU0FBUyxHQUFHLE1BQU0sS0FBS3hELElBQUwsQ0FBVVUsR0FBVixDQUN0QixzQ0FEc0IsQ0FBeEI7QUFHQSxVQUFNMkIsTUFBTSxHQUFHbUIsU0FBUyxDQUNyQjVDLENBRFksQ0FDViwwQ0FEVSxFQUVaa0UsSUFGWSxFQUFmO0FBR0EsU0FBS0QsY0FBTCxHQUFzQnhDLE1BQXRCO0FBQ0EsV0FBT0EsTUFBUDtBQUNEOztBQTdQa0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb3Vyc2VGYWN0b3J5IH0gZnJvbSAnQGNvdXJzZXMvc2lnYWEtY291cnNlLXN0dWRlbnQtZmFjdG9yeSc7XG5pbXBvcnQgeyBQYXJzZXIgfSBmcm9tICdAaGVscGVycy9zaWdhYS1wYXJzZXInO1xuaW1wb3J0IHsgSFRUUCB9IGZyb20gJ0BzZXNzaW9uL3NpZ2FhLWh0dHAnO1xuaW1wb3J0IHsgVVJMIH0gZnJvbSAndXJsJztcbmltcG9ydCB7XG4gIENvdXJzZVN0dWRlbnQsXG4gIENvdXJzZVN0dWRlbnREYXRhXG59IGZyb20gJ0Bjb3Vyc2VzL3NpZ2FhLWNvdXJzZS1zdHVkZW50JztcbmltcG9ydCB7IEhvbWV3b3JrIH0gZnJvbSAnQGF0dGFjaG1lbnRzL3NpZ2FhLWhvbWV3b3JrLXN0dWRlbnQnO1xuaW1wb3J0IHsgRXhhbSB9IGZyb20gJ0Bjb3Vyc2VSZXNvdXJjZXMvc2lnYWEtZXhhbS1zdHVkZW50JztcbmltcG9ydCB7IEFjdGl2aXR5LCBBY3Rpdml0eUZhY3RvcnkgfSBmcm9tICdAYWN0aXZpdHkvc2lnYWEtYWN0aXZpdHktZmFjdG9yeSc7XG5cbi8qKlxuICogQWJzdHJhY3Rpb24gdG8gcmVwcmVzZW50IGEgc3R1ZGVudCBib25kLlxuICogQGNhdGVnb3J5IFB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFN0dWRlbnRCb25kIHtcbiAgcmVhZG9ubHkgdHlwZTogJ3N0dWRlbnQnO1xuICAvKipcbiAgICogSXQncyB0aGUgbmFtZSBvZiB0aGUgc3R1ZGVudCBwcm9ncmFtLCBpbiBJRlNDIGl0IGlzIGNhbGxlZCBcImN1cnNvXCIuXG4gICAqL1xuICByZWFkb25seSBwcm9ncmFtOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBJdCBpcyB0aGUgc3R1ZGVudCByZWdpc3RyYXRpb24gY29kZSwgaW4gSUZTQyBpdCBpcyBjYWxsZWQgXCJtYXRyw61jdWxhXCIuXG4gICAqL1xuICByZWFkb25seSByZWdpc3RyYXRpb246IHN0cmluZztcbiAgLyoqXG4gICAqIEdldCBjb3Vyc2VzLCBpbiBJRlNDIGl0IGlzIGNhbGxlZCBcIlR1cm1hcyBWaXJ0dWFpc1wiLlxuICAgKiBAcGFyYW0gYWxsUGVyaW9kcyBpZiB0cnVlLCBhbGwgY291cnNlcyB3aWxsIGJlIHJldHVybmVkOyBvdGhlcndpc2UsIG9ubHkgY3VycmVudCBjb3Vyc2VzLlxuICAgKiBAcmV0dXJucyBQcm9taXNlIHdpdGggYXJyYXkgb2YgY291cnNlcy5cbiAgICovXG4gIGdldENvdXJzZXMoYWxsUGVyaW9kcz86IGJvb2xlYW4pOiBQcm9taXNlPENvdXJzZVN0dWRlbnRbXT47XG5cbiAgZ2V0QWN0aXZpdGllcygpOiBQcm9taXNlPEFjdGl2aXR5W10+O1xuXG4gIGdldEN1cnJlbnRQZXJpb2QoKTogUHJvbWlzZTxzdHJpbmc+O1xufVxuZXhwb3J0IGludGVyZmFjZSBBY3Rpdml0eVR5cGVIb21ld29yayB7XG4gIHR5cGU6ICdob21ld29yayc7XG4gIGNvdXJzZTogQ291cnNlU3R1ZGVudDtcbiAgaG9tZXdvcms6IEhvbWV3b3JrO1xuICBkYXRlOiBEYXRlO1xuICBkb25lOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFjdGl2aXR5VHlwZUV4ZW0ge1xuICB0eXBlOiAnZXhhbSc7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIGNvdXJzZTogQ291cnNlU3R1ZGVudDtcbiAgZXhlbTogRXhhbTtcbiAgZGF0ZTogRGF0ZTtcbiAgZG9uZTogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBDbGFzcyB0byByZXByZXNlbnQgc3R1ZGVudCBib25kLlxuICogQGNhdGVnb3J5IEludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBTaWdhYVN0dWRlbnRCb25kIGltcGxlbWVudHMgU3R1ZGVudEJvbmQge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGh0dHA6IEhUVFAsXG4gICAgcHJpdmF0ZSBwYXJzZXI6IFBhcnNlcixcbiAgICBwcml2YXRlIGNvdXJzZUZhY3Rvcnk6IENvdXJzZUZhY3RvcnksXG4gICAgcHJpdmF0ZSBhY3Rpdml0eUZhY3Rvcnk6IEFjdGl2aXR5RmFjdG9yeSxcbiAgICByZWFkb25seSBwcm9ncmFtOiBzdHJpbmcsXG4gICAgcmVhZG9ubHkgcmVnaXN0cmF0aW9uOiBzdHJpbmcsXG4gICAgcmVhZG9ubHkgYm9uZFN3aXRjaFVybDogVVJMIHwgbnVsbFxuICApIHt9XG5cbiAgcmVhZG9ubHkgdHlwZSA9ICdzdHVkZW50JztcbiAgcHJpdmF0ZSBfY3VycmVudFBlcmlvZD86IHN0cmluZztcbiAgLyoqXG4gICAqIEdldCBjb3Vyc2VzLCBpbiBJRlNDIGl0IGlzIGNhbGxlZCBcIlR1cm1hcyBWaXJ0dWFpc1wiLlxuICAgKiBAcGFyYW0gYWxsUGVyaW9kcyBpZiB0cnVlLCBhbGwgY291cnNlcyB3aWxsIGJlIHJldHVybmVkOyBvdGhlcndpc2UsIG9ubHkgbGF0ZXN0IGNvdXJzZXMuXG4gICAqIEByZXR1cm5zIFByb21pc2Ugd2l0aCBhcnJheSBvZiBjb3Vyc2VzLlxuICAgKi9cbiAgYXN5bmMgZ2V0Q291cnNlcyhhbGxQZXJpb2RzID0gZmFsc2UpOiBQcm9taXNlPENvdXJzZVN0dWRlbnRbXT4ge1xuICAgIGNvbnN0IGNvdXJzZXNQYWdlID0gYXdhaXQgdGhpcy5odHRwLmdldChcbiAgICAgICcvc2lnYWEvcG9ydGFpcy9kaXNjZW50ZS90dXJtYXMuanNmJ1xuICAgICk7XG5cbiAgICBjb25zdCB0YWJsZSA9IGNvdXJzZXNQYWdlLiQoJy5saXN0YWdlbScpO1xuICAgIGlmICh0YWJsZS5sZW5ndGggPT09IDApIHJldHVybiBbXTtcbiAgICBjb25zdCBsaXN0Q291cnNlczogQ291cnNlU3R1ZGVudFtdID0gW107XG4gICAgY29uc3Qgcm93cyA9IHRhYmxlLmZpbmQoJ3Rib2R5ID4gdHInKS50b0FycmF5KCk7XG5cbiAgICAvKiBcbiAgICAgICBJZiBhbGxQZXJpb2RzIGlzIHRydWUgdGhlbiBvbmx5IHRoZSBsYXN0IHBlcmlvZCBpc1xuICAgICAgIHJldHVybmVkLCB0aGVyZWZvcmUgd2UgbmVlZCB0byBmaW5kIG91dCB3aGF0IHRoZSBcbiAgICAgICB2YWx1ZSBvZiB0aGUgbGFzdCBwZXJpb2QgaXMsIHNpbmNlIGRpZmZlcmVudCBcbiAgICAgICB2ZXJzaW9ucyBvZiBTSUdBQSBjYW4gaGF2ZSBkaWZmZXJlbnQgb3JkZXJpbmcgd2UgXG4gICAgICAgY2FuJ3QgZ2V0IHRoZSBsYXN0IG9yIGZpcnN0IHBlcmlvZCBpbiB0aGUgdGFibGUsXG4gICAgICAgd2UgbmVlZCB0byBmaW5kIG91dCB3aGljaCBpcyB0aGUgbmV3ZXN0IHJlZ2FyZGxlc3NcbiAgICAgICBvZiB0YWJsZSBvcmRlci5cbiAgICAqL1xuICAgIGxldCBwZXJpb2RGaWx0ZXI6IG51bGwgfCBzdHJpbmcgPSBudWxsO1xuICAgIGlmICghYWxsUGVyaW9kcykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3dzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNlbGxFbGVtZW50cyA9IGNvdXJzZXNQYWdlLiQocm93c1tpXSkuZmluZCgndGQnKTtcbiAgICAgICAgaWYgKGNlbGxFbGVtZW50cy5lcSgwKS5oYXNDbGFzcygncGVyaW9kbycpKSB7XG4gICAgICAgICAgY29uc3QgY3VycmVudFBlcmlvZCA9IHRoaXMucGFyc2VyLnJlbW92ZVRhZ3NIdG1sKFxuICAgICAgICAgICAgY2VsbEVsZW1lbnRzLmVxKDApLmh0bWwoKVxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKHBlcmlvZEZpbHRlciA9PSBudWxsKSB7XG4gICAgICAgICAgICBwZXJpb2RGaWx0ZXIgPSBjdXJyZW50UGVyaW9kO1xuICAgICAgICAgIH0gZWxzZSBpZiAoW2N1cnJlbnRQZXJpb2QsIHBlcmlvZEZpbHRlcl0uc29ydCgpWzFdID09IGN1cnJlbnRQZXJpb2QpIHtcbiAgICAgICAgICAgIC8vQ2hlY2sgYWxwaGFiZXRpY2FsbHkgaWYgdGhlIGN1cnJlbnRQZXJpb2QgaXMgdGhlIG9sZGVzdFxuICAgICAgICAgICAgcGVyaW9kRmlsdGVyID0gY3VycmVudFBlcmlvZDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy9JZiB0aGUgcGVyaW9kRmlsdGVyIGlzIGFscmVhZHkgdGhlIG5ld2VzdCwgd2UgZG9uJ3QgbmVlZCB0byBsb29rIGZvciBhIG5ld2VzdCBvbmUuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCB0YWJsZUNvbHVtbkluZGV4czogUmVjb3JkPHN0cmluZywgbnVsbCB8IG51bWJlcj4gPSB7XG4gICAgICB0aXRsZTogbnVsbCxcbiAgICAgIGNsYXNzOiBudWxsLFxuICAgICAgc2NoZWR1bGU6IG51bGwsXG4gICAgICBudW1iZXJPZlN0dWRlbnRzOiBudWxsLFxuICAgICAgYnV0dG9uOiBudWxsXG4gICAgfTtcblxuICAgIGNvbnN0IHRhYmxlSGVhZGVyQ2VsbEVsZW1lbnRzID0gdGFibGUuZmluZCgndGhlYWQgPiB0ciB0ZCcpLnRvQXJyYXkoKTtcbiAgICBmb3IgKGxldCBjb2x1bW4gPSAwOyBjb2x1bW4gPCB0YWJsZUhlYWRlckNlbGxFbGVtZW50cy5sZW5ndGg7IGNvbHVtbisrKSB7XG4gICAgICBjb25zdCBjZWxsQ29udGVudCA9IHRoaXMucGFyc2VyLnJlbW92ZVRhZ3NIdG1sKFxuICAgICAgICBjb3Vyc2VzUGFnZS4kKHRhYmxlSGVhZGVyQ2VsbEVsZW1lbnRzW2NvbHVtbl0pLmh0bWwoKVxuICAgICAgKTtcbiAgICAgIHN3aXRjaCAoY2VsbENvbnRlbnQpIHtcbiAgICAgICAgY2FzZSAnRGlzY2lwbGluYSc6XG4gICAgICAgICAgdGFibGVDb2x1bW5JbmRleHMudGl0bGUgPSBjb2x1bW47XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ1R1cm1hJzpcbiAgICAgICAgICB0YWJsZUNvbHVtbkluZGV4cy5jbGFzcyA9IGNvbHVtbjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnSG9yw6FyaW8nOlxuICAgICAgICAgIHRhYmxlQ29sdW1uSW5kZXhzLnNjaGVkdWxlID0gY29sdW1uO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdBbHVub3MnOlxuICAgICAgICAgIHRhYmxlQ29sdW1uSW5kZXhzLm51bWJlck9mU3R1ZGVudHMgPSBjb2x1bW47XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJyc6XG4gICAgICAgICAgdGFibGVDb2x1bW5JbmRleHMuYnV0dG9uID0gY29sdW1uO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0YWJsZUNvbHVtbkluZGV4cy5idXR0b24gPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnU0lHQUE6IEludmFsaWQgY291cnNlcyB0YWJsZSwgY291bGQgbm90IGZpbmQgdGhlIGNvbHVtbiB3aXRoIGNsYXNzIGJ1dHRvbnMuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKHRhYmxlQ29sdW1uSW5kZXhzLnRpdGxlID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1NJR0FBOiBJbnZhbGlkIGNvdXJzZXMgdGFibGUsIGNvdWxkIG5vdCBmaW5kIHRoZSBjb2x1bW4gd2l0aCBjbGFzcyB0aXRsZXMuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKHRhYmxlQ29sdW1uSW5kZXhzLnNjaGVkdWxlID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1NJR0FBOiBJbnZhbGlkIGNvdXJzZXMgdGFibGUsIGNvdWxkIG5vdCBmaW5kIHRoZSBjb2x1bW4gd2l0aCBjbGFzcyBzY2hlZHVsZXMuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgbGV0IHBlcmlvZDtcblxuICAgIGZvciAoY29uc3Qgcm93IG9mIHJvd3MpIHtcbiAgICAgIGNvbnN0IGNlbGxFbGVtZW50cyA9IGNvdXJzZXNQYWdlLiQocm93KS5maW5kKCd0ZCcpO1xuICAgICAgaWYgKGNlbGxFbGVtZW50cy5lcSgwKS5oYXNDbGFzcygncGVyaW9kbycpKSB7XG4gICAgICAgIHBlcmlvZCA9IHRoaXMucGFyc2VyLnJlbW92ZVRhZ3NIdG1sKGNlbGxFbGVtZW50cy5odG1sKCkpO1xuICAgICAgfSBlbHNlIGlmIChwZXJpb2QgJiYgKCFwZXJpb2RGaWx0ZXIgfHwgcGVyaW9kRmlsdGVyID09IHBlcmlvZCkpIHtcbiAgICAgICAgY29uc3QgZnVsbG5hbWUgPSB0aGlzLnBhcnNlci5yZW1vdmVUYWdzSHRtbChcbiAgICAgICAgICBjZWxsRWxlbWVudHMuZXEodGFibGVDb2x1bW5JbmRleHMudGl0bGUpLmh0bWwoKVxuICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0IFtjb2RlLCAuLi50aXRsZVNsaWNlc10gPSBmdWxsbmFtZS5zcGxpdCgnIC0gJyk7XG4gICAgICAgIGNvbnN0IHRpdGxlID0gdGl0bGVTbGljZXMuam9pbignIC0gJyk7XG4gICAgICAgIGNvbnN0IGJ1dHRvbkNvdXJzZVBhZ2UgPSBjZWxsRWxlbWVudHNcbiAgICAgICAgICAuZXEodGFibGVDb2x1bW5JbmRleHMuYnV0dG9uKVxuICAgICAgICAgIC5maW5kKCdhW29uY2xpY2tdJyk7XG5cbiAgICAgICAgY29uc3QgYnV0dG9uT25DbGlja0NvZGUgPSBidXR0b25Db3Vyc2VQYWdlLmF0dHIoJ29uY2xpY2snKTtcblxuICAgICAgICBpZiAoIWJ1dHRvbk9uQ2xpY2tDb2RlKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU0lHQUE6IENvdXJzZXMgdGFibGUgd2l0aG91dCBjb3Vyc2UgYnV0dG9uLicpO1xuXG4gICAgICAgIGNvbnN0IGZvcm0gPSBjb3Vyc2VzUGFnZS5wYXJzZUpTRkNMSlMoYnV0dG9uT25DbGlja0NvZGUpO1xuXG4gICAgICAgIGxldCBudW1iZXJPZlN0dWRlbnRzID0gMDtcbiAgICAgICAgaWYgKHRhYmxlQ29sdW1uSW5kZXhzLm51bWJlck9mU3R1ZGVudHMgIT09IG51bGwpIHtcbiAgICAgICAgICBudW1iZXJPZlN0dWRlbnRzID0gTnVtYmVyKFxuICAgICAgICAgICAgdGhpcy5wYXJzZXIucmVtb3ZlVGFnc0h0bWwoXG4gICAgICAgICAgICAgIGNlbGxFbGVtZW50cy5lcSh0YWJsZUNvbHVtbkluZGV4cy5udW1iZXJPZlN0dWRlbnRzKS5odG1sKClcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc2NoZWR1bGUgPSB0aGlzLnBhcnNlci5yZW1vdmVUYWdzSHRtbChcbiAgICAgICAgICBjZWxsRWxlbWVudHMuZXEodGFibGVDb2x1bW5JbmRleHMuc2NoZWR1bGUpLmh0bWwoKVxuICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0IGlkID0gZm9ybS5wb3N0VmFsdWVzWydpZFR1cm1hJ107XG5cbiAgICAgICAgaWYgKCFpZCkgdGhyb3cgbmV3IEVycm9yKCdTSUdBQTogQ291cnNlIElEIG5vdCBmb3VuZC4nKTtcbiAgICAgICAgY29uc3QgY291cnNlRGF0YTogQ291cnNlU3R1ZGVudERhdGEgPSB7XG4gICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgY29kZSxcbiAgICAgICAgICBzY2hlZHVsZSxcbiAgICAgICAgICBudW1iZXJPZlN0dWRlbnRzLFxuICAgICAgICAgIHBlcmlvZCxcbiAgICAgICAgICBpZCxcbiAgICAgICAgICBmb3JtXG4gICAgICAgIH07XG4gICAgICAgIGxpc3RDb3Vyc2VzLnB1c2godGhpcy5jb3Vyc2VGYWN0b3J5LmNyZWF0ZUNvdXJzZVN0dWRlbnQoY291cnNlRGF0YSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGlzdENvdXJzZXM7XG4gIH1cblxuICBhc3luYyBnZXRBY3Rpdml0aWVzKCk6IFByb21pc2U8QWN0aXZpdHlbXT4ge1xuICAgIGNvbnN0IGZyb250UGFnZSA9IGF3YWl0IHRoaXMuaHR0cC5nZXQoXG4gICAgICAnL3NpZ2FhL3BvcnRhaXMvZGlzY2VudGUvZGlzY2VudGUuanNmJ1xuICAgICk7XG4gICAgY29uc3QgdGFibGUgPSBmcm9udFBhZ2UuJCgnI2F2YWxpYWNhby1wb3J0YWwgPiB0YWJsZScpO1xuICAgIGNvbnN0IHJvd3MgPSB0YWJsZS5maW5kKCd0Ym9keSA+IHRyJykudG9BcnJheSgpO1xuICAgIGNvbnN0IGxpc3RBY3Rpdml0aWVzOiBBY3Rpdml0eVtdID0gW107XG4gICAgZm9yIChjb25zdCByb3cgb2Ygcm93cykge1xuICAgICAgY29uc3QgY2VsbEVsZW1lbnRzID0gZnJvbnRQYWdlLiQocm93KS5maW5kKCd0ZCcpO1xuICAgICAgY29uc3QgZGF0ZUNlbGxDb250ZW50ID0gdGhpcy5wYXJzZXIucmVtb3ZlVGFnc0h0bWwoXG4gICAgICAgIGNlbGxFbGVtZW50cy5lcSgxKS5odG1sKClcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IGRhdGUgPSB0aGlzLnBhcnNlci5wYXJzZURhdGVzKGRhdGVDZWxsQ29udGVudCwgMSlbMF07XG5cbiAgICAgIGNvbnN0IGRvbmUgPVxuICAgICAgICBjZWxsRWxlbWVudHMuZXEoMCkuZmluZCgnaW1nJykuYXR0cignc3JjJykgPT09ICcvc2lnYWEvaW1nL2NoZWNrLnBuZycgfHxcbiAgICAgICAgZGF0ZS52YWx1ZU9mKCkgPCBEYXRlLm5vdygpO1xuXG4gICAgICBjb25zdCBpbmZvVGV4dExpbmVzID0gdGhpcy5wYXJzZXJcbiAgICAgICAgLnJlbW92ZVRhZ3NIdG1sKGNlbGxFbGVtZW50cy5lcSgyKS5maW5kKCdzbWFsbCcpLmh0bWwoKSlcbiAgICAgICAgLnNwbGl0KCdcXG4nKTtcblxuICAgICAgaWYgKGluZm9UZXh0TGluZXMubGVuZ3RoICE9PSAyKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ1NJR0FBOiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIGFjdGl2aXR5IGRvZXMgbm90IGNvcnJlc3BvbmQgdG8gd2hhdCB3YXMgZXhwZWN0ZWQuJ1xuICAgICAgICApO1xuXG4gICAgICBjb25zdCBjb3Vyc2VUaXRsZSA9IGluZm9UZXh0TGluZXNbMF07XG4gICAgICBjb25zdCBbdHlwZSwgYWN0aXZpdHlUaXRsZV0gPSBpbmZvVGV4dExpbmVzWzFdLnNwbGl0KCc6ICcpO1xuXG4gICAgICBpZiAodHlwZSA9PT0gJ1F1ZXN0aW9uw6FyaW8nIHx8IHR5cGUgPT09ICdUYXJlZmEnKSB7XG4gICAgICAgIGNvbnN0IEpTRkNMSlMgPSBjZWxsRWxlbWVudHNcbiAgICAgICAgICAuZXEoMilcbiAgICAgICAgICAuZmluZCgnc21hbGwgYVtvbmNsaWNrXScpXG4gICAgICAgICAgLmF0dHIoJ29uY2xpY2snKTtcbiAgICAgICAgaWYgKCFKU0ZDTEpTKSB0aHJvdyBuZXcgRXJyb3IoJ1NJR0FBOiBBY3Rpdml0eSB3aXRob3V0IGxpbmsuJyk7XG4gICAgICAgIGNvbnN0IGZvcm0gPSBmcm9udFBhZ2UucGFyc2VKU0ZDTEpTKEpTRkNMSlMpO1xuXG4gICAgICAgIGlmICh0eXBlID09PSAnUXVlc3Rpb27DoXJpbycpIHtcbiAgICAgICAgICBsaXN0QWN0aXZpdGllcy5wdXNoKFxuICAgICAgICAgICAgdGhpcy5hY3Rpdml0eUZhY3RvcnkuY3JlYXRlQWN0aXZpdHlRdWl6KFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY291cnNlVGl0bGUsXG4gICAgICAgICAgICAgICAgcXVpelRpdGxlOiBhY3Rpdml0eVRpdGxlLFxuICAgICAgICAgICAgICAgIGlkOiBmb3JtLnBvc3RWYWx1ZXMuaWQsXG4gICAgICAgICAgICAgICAgZm9ybSxcbiAgICAgICAgICAgICAgICBkb25lLFxuICAgICAgICAgICAgICAgIGRhdGVcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICAgKVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGlzdEFjdGl2aXRpZXMucHVzaChcbiAgICAgICAgICAgIHRoaXMuYWN0aXZpdHlGYWN0b3J5LmNyZWF0ZUFjdGl2aXR5SG9tZXdvcmsoXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb3Vyc2VUaXRsZSxcbiAgICAgICAgICAgICAgICBob21ld29ya1RpdGxlOiBhY3Rpdml0eVRpdGxlLFxuICAgICAgICAgICAgICAgIGZvcm0sXG4gICAgICAgICAgICAgICAgZG9uZSxcbiAgICAgICAgICAgICAgICBkYXRlXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdBdmFsaWHDp8OjbycpIHtcbiAgICAgICAgbGlzdEFjdGl2aXRpZXMucHVzaChcbiAgICAgICAgICB0aGlzLmFjdGl2aXR5RmFjdG9yeS5jcmVhdGVBY3Rpdml0eUV4YW0oXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGNvdXJzZVRpdGxlLFxuICAgICAgICAgICAgICBleGFtRGVzY3JpcHRpb246IGFjdGl2aXR5VGl0bGUsXG4gICAgICAgICAgICAgIGRvbmUsXG4gICAgICAgICAgICAgIGRhdGVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGlzdEFjdGl2aXRpZXM7XG4gIH1cbiAgYXN5bmMgZ2V0Q3VycmVudFBlcmlvZCgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGlmICh0aGlzLl9jdXJyZW50UGVyaW9kKSByZXR1cm4gdGhpcy5fY3VycmVudFBlcmlvZDtcbiAgICBjb25zdCBmcm9udFBhZ2UgPSBhd2FpdCB0aGlzLmh0dHAuZ2V0KFxuICAgICAgJy9zaWdhYS9wb3J0YWlzL2Rpc2NlbnRlL2Rpc2NlbnRlLmpzZidcbiAgICApO1xuICAgIGNvbnN0IHBlcmlvZCA9IGZyb250UGFnZVxuICAgICAgLiQoJyNpbmZvLXVzdWFyaW8gPiBwLnBlcmlvZG8tYXR1YWwgPiBzdHJvbmcnKVxuICAgICAgLnRleHQoKTtcbiAgICB0aGlzLl9jdXJyZW50UGVyaW9kID0gcGVyaW9kO1xuICAgIHJldHVybiBwZXJpb2Q7XG4gIH1cbn1cbiJdfQ==