"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SigaaBondFactory = void 0;

require("source-map-support/register");

var _sigaaStudentBond = require("./sigaa-student-bond");

var _sigaaTeacherBond = require("./sigaa-teacher-bond");

/**
 * Class to implements BondFactory.
 *
 * Serves to create bond instances.
 * @category Internal
 */
class SigaaBondFactory {
  constructor(httpFactory, parser, courseFactory, activityFactory) {
    this.httpFactory = httpFactory;
    this.parser = parser;
    this.courseFactory = courseFactory;
    this.activityFactory = activityFactory;
  }
  /**
   * Creates a student program instance.
   *
   * @param registration It is the student registration code
   * @param program It's the name of the student program, in Portuguese it is called "curso".
   * @param bondSwitchUrl If the user has more than one bond, the bond link will be used to change the bond
   */


  createStudentBond(registration, program, bondSwitchUrl) {
    let http;

    if (bondSwitchUrl) {
      http = this.httpFactory.createHttpWithBond(bondSwitchUrl);
    } else {
      http = this.httpFactory.createHttp();
    }

    return new _sigaaStudentBond.SigaaStudentBond(http, this.parser, this.courseFactory, this.activityFactory, program, registration, bondSwitchUrl);
  }
  /**
   * Creates a teacher bond instance.
   */


  createTeacherBond() {
    return new _sigaaTeacherBond.SigaaTeacherBond();
  }

}

exports.SigaaBondFactory = SigaaBondFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ib25kcy9zaWdhYS1ib25kLWZhY3RvcnkudHMiXSwibmFtZXMiOlsiU2lnYWFCb25kRmFjdG9yeSIsImNvbnN0cnVjdG9yIiwiaHR0cEZhY3RvcnkiLCJwYXJzZXIiLCJjb3Vyc2VGYWN0b3J5IiwiYWN0aXZpdHlGYWN0b3J5IiwiY3JlYXRlU3R1ZGVudEJvbmQiLCJyZWdpc3RyYXRpb24iLCJwcm9ncmFtIiwiYm9uZFN3aXRjaFVybCIsImh0dHAiLCJjcmVhdGVIdHRwV2l0aEJvbmQiLCJjcmVhdGVIdHRwIiwiU2lnYWFTdHVkZW50Qm9uZCIsImNyZWF0ZVRlYWNoZXJCb25kIiwiU2lnYWFUZWFjaGVyQm9uZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBTUE7O0FBQ0E7O0FBZ0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLE1BQU1BLGdCQUFOLENBQThDO0FBQ25EQyxFQUFBQSxXQUFXLENBQ0RDLFdBREMsRUFFREMsTUFGQyxFQUdEQyxhQUhDLEVBSURDLGVBSkMsRUFLVDtBQUFBLFNBSlFILFdBSVIsR0FKUUEsV0FJUjtBQUFBLFNBSFFDLE1BR1IsR0FIUUEsTUFHUjtBQUFBLFNBRlFDLGFBRVIsR0FGUUEsYUFFUjtBQUFBLFNBRFFDLGVBQ1IsR0FEUUEsZUFDUjtBQUFFO0FBRUo7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNFQyxFQUFBQSxpQkFBaUIsQ0FDZkMsWUFEZSxFQUVmQyxPQUZlLEVBR2ZDLGFBSGUsRUFJRjtBQUNiLFFBQUlDLElBQUo7O0FBQ0EsUUFBSUQsYUFBSixFQUFtQjtBQUNqQkMsTUFBQUEsSUFBSSxHQUFHLEtBQUtSLFdBQUwsQ0FBaUJTLGtCQUFqQixDQUFvQ0YsYUFBcEMsQ0FBUDtBQUNELEtBRkQsTUFFTztBQUNMQyxNQUFBQSxJQUFJLEdBQUcsS0FBS1IsV0FBTCxDQUFpQlUsVUFBakIsRUFBUDtBQUNEOztBQUNELFdBQU8sSUFBSUMsa0NBQUosQ0FDTEgsSUFESyxFQUVMLEtBQUtQLE1BRkEsRUFHTCxLQUFLQyxhQUhBLEVBSUwsS0FBS0MsZUFKQSxFQUtMRyxPQUxLLEVBTUxELFlBTkssRUFPTEUsYUFQSyxDQUFQO0FBU0Q7QUFFRDtBQUNGO0FBQ0E7OztBQUNFSyxFQUFBQSxpQkFBaUIsR0FBZ0I7QUFDL0IsV0FBTyxJQUFJQyxrQ0FBSixFQUFQO0FBQ0Q7O0FBMUNrRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGl2aXR5RmFjdG9yeSB9IGZyb20gJ0BhY3Rpdml0eS9zaWdhYS1hY3Rpdml0eS1mYWN0b3J5JztcbmltcG9ydCB7IENvdXJzZUZhY3RvcnkgfSBmcm9tICdAY291cnNlcy9zaWdhYS1jb3Vyc2Utc3R1ZGVudC1mYWN0b3J5JztcbmltcG9ydCB7IFBhcnNlciB9IGZyb20gJ0BoZWxwZXJzL3NpZ2FhLXBhcnNlcic7XG5pbXBvcnQgeyBIVFRQIH0gZnJvbSAnQHNlc3Npb24vc2lnYWEtaHR0cCc7XG5pbXBvcnQgeyBIVFRQRmFjdG9yeSB9IGZyb20gJ0BzZXNzaW9uL3NpZ2FhLWh0dHAtZmFjdG9yeSc7XG5pbXBvcnQgeyBVUkwgfSBmcm9tICd1cmwnO1xuaW1wb3J0IHsgU2lnYWFTdHVkZW50Qm9uZCwgU3R1ZGVudEJvbmQgfSBmcm9tICcuL3NpZ2FhLXN0dWRlbnQtYm9uZCc7XG5pbXBvcnQgeyBTaWdhYVRlYWNoZXJCb25kLCBUZWFjaGVyQm9uZCB9IGZyb20gJy4vc2lnYWEtdGVhY2hlci1ib25kJztcblxuLyoqXG4gKiBVbmlvbiBvZiBhbGwgYm9uZHMgKFN0dWRlbnRCb250IGFuZCBUZWFjaGVyQm9uZCkuXG4gKiBAY2F0ZWdvcnkgSW50ZXJuYWxcbiAqL1xuZXhwb3J0IHR5cGUgQm9uZFR5cGUgPSBTdHVkZW50Qm9uZCB8IFRlYWNoZXJCb25kO1xuXG4vKipcbiAqIEFic3RyYWN0aW9uIHRvIHJlcHJlc2VudCBhIGNsYXNzIHRoYXQgY3JlYXRlcyBib25kIGluc3RhbmNlcy5cXFxuICogQGNhdGVnb3J5IEludGVybmFsXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQm9uZEZhY3Rvcnkge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIHN0dWRlbnQgcHJvZ3JhbSBpbnN0YW5jZS5cbiAgICpcbiAgICogQHBhcmFtIHJlZ2lzdHJhdGlvbiBJdCBpcyB0aGUgc3R1ZGVudCByZWdpc3RyYXRpb24gY29kZSwgaW4gSUZTQyBpdCBpcyBjYWxsZWQgXCJtYXRyw61jdWxhXCIuXG4gICAqIEBwYXJhbSBwcm9ncmFtIEl0J3MgdGhlIG5hbWUgb2YgdGhlIHN0dWRlbnQgcHJvZ3JhbSwgaW4gSUZTQyBpdCBpcyBjYWxsZWQgXCJjdXJzb1wiLlxuICAgKiBAcGFyYW0gYm9uZFN3aXRjaFVybCBJZiB0aGUgdXNlciBoYXMgbW9yZSB0aGFuIG9uZSBib25kLCB0aGUgYm9uZCBsaW5rIHdpbGwgYmUgdXNlZCB0byBjaGFuZ2UgdGhlIGJvbmRcbiAgICovXG4gIGNyZWF0ZVN0dWRlbnRCb25kKFxuICAgIHJlZ2lzdHJhdGlvbjogc3RyaW5nLFxuICAgIHByb2dyYW06IHN0cmluZyxcbiAgICBib25kU3dpdGNoVXJsOiBVUkwgfCBudWxsXG4gICk6IFN0dWRlbnRCb25kO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgdGVhY2hlciBib25kIGluc3RhbmNlLlxuICAgKi9cbiAgY3JlYXRlVGVhY2hlckJvbmQoKTogVGVhY2hlckJvbmQ7XG59XG5cbi8qKlxuICogQ2xhc3MgdG8gaW1wbGVtZW50cyBCb25kRmFjdG9yeS5cbiAqXG4gKiBTZXJ2ZXMgdG8gY3JlYXRlIGJvbmQgaW5zdGFuY2VzLlxuICogQGNhdGVnb3J5IEludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBTaWdhYUJvbmRGYWN0b3J5IGltcGxlbWVudHMgQm9uZEZhY3Rvcnkge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGh0dHBGYWN0b3J5OiBIVFRQRmFjdG9yeSxcbiAgICBwcml2YXRlIHBhcnNlcjogUGFyc2VyLFxuICAgIHByaXZhdGUgY291cnNlRmFjdG9yeTogQ291cnNlRmFjdG9yeSxcbiAgICBwcml2YXRlIGFjdGl2aXR5RmFjdG9yeTogQWN0aXZpdHlGYWN0b3J5XG4gICkge31cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHN0dWRlbnQgcHJvZ3JhbSBpbnN0YW5jZS5cbiAgICpcbiAgICogQHBhcmFtIHJlZ2lzdHJhdGlvbiBJdCBpcyB0aGUgc3R1ZGVudCByZWdpc3RyYXRpb24gY29kZVxuICAgKiBAcGFyYW0gcHJvZ3JhbSBJdCdzIHRoZSBuYW1lIG9mIHRoZSBzdHVkZW50IHByb2dyYW0sIGluIFBvcnR1Z3Vlc2UgaXQgaXMgY2FsbGVkIFwiY3Vyc29cIi5cbiAgICogQHBhcmFtIGJvbmRTd2l0Y2hVcmwgSWYgdGhlIHVzZXIgaGFzIG1vcmUgdGhhbiBvbmUgYm9uZCwgdGhlIGJvbmQgbGluayB3aWxsIGJlIHVzZWQgdG8gY2hhbmdlIHRoZSBib25kXG4gICAqL1xuICBjcmVhdGVTdHVkZW50Qm9uZChcbiAgICByZWdpc3RyYXRpb246IHN0cmluZyxcbiAgICBwcm9ncmFtOiBzdHJpbmcsXG4gICAgYm9uZFN3aXRjaFVybDogVVJMIHwgbnVsbFxuICApOiBTdHVkZW50Qm9uZCB7XG4gICAgbGV0IGh0dHA6IEhUVFA7XG4gICAgaWYgKGJvbmRTd2l0Y2hVcmwpIHtcbiAgICAgIGh0dHAgPSB0aGlzLmh0dHBGYWN0b3J5LmNyZWF0ZUh0dHBXaXRoQm9uZChib25kU3dpdGNoVXJsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaHR0cCA9IHRoaXMuaHR0cEZhY3RvcnkuY3JlYXRlSHR0cCgpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFNpZ2FhU3R1ZGVudEJvbmQoXG4gICAgICBodHRwLFxuICAgICAgdGhpcy5wYXJzZXIsXG4gICAgICB0aGlzLmNvdXJzZUZhY3RvcnksXG4gICAgICB0aGlzLmFjdGl2aXR5RmFjdG9yeSxcbiAgICAgIHByb2dyYW0sXG4gICAgICByZWdpc3RyYXRpb24sXG4gICAgICBib25kU3dpdGNoVXJsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgdGVhY2hlciBib25kIGluc3RhbmNlLlxuICAgKi9cbiAgY3JlYXRlVGVhY2hlckJvbmQoKTogVGVhY2hlckJvbmQge1xuICAgIHJldHVybiBuZXcgU2lnYWFUZWFjaGVyQm9uZCgpO1xuICB9XG59XG4iXX0=