"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Sigaa = void 0;

require("source-map-support/register");

var _sigaaBondFactory = require("./bonds/sigaa-bond-factory");

var _sigaaParser = require("./helpers/sigaa-parser");

var _sigaaFile = require("./resources/sigaa-file");

var _sigaaSearch = require("./search/sigaa-search");

var _sigaaHttpSession = require("./session/sigaa-http-session");

var _sigaaHttpFactory = require("./session/sigaa-http-factory");

var _sigaaLoginIfsc = require("./session/login/sigaa-login-ifsc");

var _sigaaLoginUfpb = require("./session/login/sigaa-login-ufpb");

var _sigaaLoginUffs = require("./session/login/sigaa-login-uffs");

var _sigaaSession = require("./session/sigaa-session");

var _sigaaCookiesController = require("./session/sigaa-cookies-controller");

var _sigaaPageCacheWithBond = require("./session/sigaa-page-cache-with-bond");

var _sigaaPageCacheFactory = require("./session/sigaa-page-cache-factory");

var _sigaaAccountFactory = require("./account/sigaa-account-factory");

var _sigaaBondController = require("./session/sigaa-bond-controller");

var _sigaaCourseStudentFactory = require("./courses/sigaa-course-student-factory");

var _sigaaCourseResourcesManagerFactory = require("./courses/sigaa-course-resources-manager-factory");

var _sigaaCourseResourcesFactory = require("./courses/sigaa-course-resources-factory");

var _sigaaLessonParserFactory = require("./courses/sigaa-lesson-parser-factory");

var _sigaaRequestStack = require("./helpers/sigaa-request-stack");

var _sigaaLoginUnb = require("./session/login/sigaa-login-unb");

var _sigaaInstitutionController = require("./session/sigaa-institution-controller");

var _sigaaActivityFactory = require("./activity/sigaa-activity-factory");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Main class, used to instantiate other classes in standard use.
 * @category Public
 */
class Sigaa {
  /**
   * Instance of login class.
   */

  /**
   * Instance of http factory.
   */

  /**
   * Instance of parser.
   */

  /**
   * Instance of session.
   */

  /**
   * Instance of account factory.
   */

  /**
   * Instance of http session.
   */

  /**
   * Instance of http.
   */
  constructor(options) {
    _defineProperty(this, "loginInstance", void 0);

    _defineProperty(this, "httpFactory", void 0);

    _defineProperty(this, "parser", void 0);

    _defineProperty(this, "session", void 0);

    _defineProperty(this, "accountFactory", void 0);

    _defineProperty(this, "httpSession", void 0);

    _defineProperty(this, "http", void 0);

    const pageCacheFactory = new _sigaaPageCacheFactory.SigaaPageCacheFactory();
    const pageCache = new _sigaaPageCacheWithBond.SigaaPageCacheWithBond(pageCacheFactory);

    if ('parser' in options && options.parser) {
      this.parser = options.parser;
    } else {
      this.parser = new _sigaaParser.SigaaParser();
    }

    if ('session' in options && options.session) {
      this.session = options.session;
    } else {
      this.session = new _sigaaSession.SigaaSession(options.institution);
    }

    if ('url' in options && options.url && 'institution' in options && options.institution) {
      let cookiesController;

      if ('cookiesController' in options && options.cookiesController) {
        cookiesController = options.cookiesController;
      } else {
        cookiesController = new _sigaaCookiesController.SigaaCookiesController();
      }

      let requestStackController;

      if ('requestStackController' in options && options.requestStackController) {
        requestStackController = options.requestStackController;
      } else {
        requestStackController = new _sigaaRequestStack.SigaaRequestStack();
      }

      const institutionController = new _sigaaInstitutionController.SigaaInstitutionController(options.institution, options.url);
      this.httpSession = new _sigaaHttpSession.SigaaHTTPSession(institutionController, cookiesController, pageCache, requestStackController);
      const bondController = options.bondController || new _sigaaBondController.SigaaBondController();
      this.httpFactory = new _sigaaHttpFactory.SigaaHTTPFactory(this.httpSession, pageCache, bondController);
    } else {
      if ('institution' in options && options.institution) {
        throw new Error('SIGAA: Institution must be informed.');
      }

      if ('httpFactory' in options && options.httpFactory) {
        this.httpFactory = options.httpFactory;
      } else {
        throw new Error('SIGAA: Invalid httpFactory. It may be that you have forgotten the URL');
      }

      if ('httpSession' in options && options.httpSession) {
        this.httpSession = options.httpSession;
      } else {
        throw new Error('SIGAA: Invalid httpSession.');
      }
    }

    this.http = this.httpFactory.createHttp();

    if ('accountFactory' in options && options.accountFactory) {
      this.accountFactory = options.accountFactory;
    } else {
      let bondFactory;

      if ('bondFactory' in options && options.bondFactory) {
        bondFactory = options.bondFactory;
      } else {
        let activityFactory;

        if ('activityFactory' in options && options.activityFactory) {
          activityFactory = options.activityFactory;
        } else {
          activityFactory = new _sigaaActivityFactory.SigaaActivityFactory();
        }

        let courseFactory;

        if ('courseFactory' in options && options.courseFactory) {
          courseFactory = options.courseFactory;
        } else {
          let courseResourcesManagerFactory;

          if ('courseResourcesManagerFactory' in options && options.courseResourcesManagerFactory) {
            courseResourcesManagerFactory = options.courseResourcesManagerFactory;
          } else {
            let courseResourcesFactory;

            if ('courseResourcesFactory' in options && options.courseResourcesFactory) {
              courseResourcesFactory = options.courseResourcesFactory;
            } else {
              courseResourcesFactory = new _sigaaCourseResourcesFactory.SigaaCourseResourcesFactory(this.parser);
            }

            courseResourcesManagerFactory = new _sigaaCourseResourcesManagerFactory.SigaaCourseResourceManagerFactory(courseResourcesFactory);
          }

          let lessonParserFactory;

          if ('lessonParserFactory' in options && options.lessonParserFactory) {
            lessonParserFactory = options.lessonParserFactory;
          } else {
            lessonParserFactory = new _sigaaLessonParserFactory.SigaaLessonParserFactory(this.parser);
          }

          courseFactory = new _sigaaCourseStudentFactory.SigaaCourseFactory(this.http, this.parser, courseResourcesManagerFactory, lessonParserFactory);
        }

        bondFactory = new _sigaaBondFactory.SigaaBondFactory(this.httpFactory, this.parser, courseFactory, activityFactory);
      }

      this.accountFactory = new _sigaaAccountFactory.SigaaAccountFactory(this.http, this.parser, this.session, bondFactory);
    }

    const SigaaLoginInstitution = {
      IFSC: _sigaaLoginIfsc.SigaaLoginIFSC,
      UFPB: _sigaaLoginUfpb.SigaaLoginUFPB,
      UNB: _sigaaLoginUnb.SigaaLoginUNB,
      UFFS: _sigaaLoginUffs.SigaaLoginUFFS
    };
    const institution = options.institution ?? 'IFSC';
    this.loginInstance = new SigaaLoginInstitution[institution](this.http, this.session);
  }
  /**
   * User authentication.
   * @param username
   * @param password
   */


  async login(username, password) {
    const page = await this.loginInstance.login(username, password);

    try {
      return await this.accountFactory.getAccount(page);
    } catch (err) {
      const retryPage = await this.http.followAllRedirect(await this.http.get(page.url.href, {
        noCache: true
      }), {
        noCache: true
      });
      return this.accountFactory.getAccount(retryPage);
    }
  }
  /**
   * Load file to download.
   * @param options
   * @param options.id file id
   * @param options.key file key
   */


  loadFile(options) {
    return new _sigaaFile.SigaaFile(this.http, options);
  }
  /**
   * Returns instance of SigaaSearch.
   */


  get search() {
    return new _sigaaSearch.SigaaSearch(this.http, this.parser);
  }
  /**
   * Close the instance, it just clears the session data, if you want to log off the system you must use Account.logoff().
   */


  close() {
    this.httpSession.close();
  }

}

exports.Sigaa = Sigaa;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,