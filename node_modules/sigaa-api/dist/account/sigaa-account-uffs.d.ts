/// <reference types="node" />
import { Parser } from '..\helpers/sigaa-parser';
import { HTTP, ProgressCallback } from '..\session/sigaa-http';
import { Session } from '..\session/sigaa-session';
import { BondFactory, BondType } from '..\bonds/sigaa-bond-factory';
import { Page } from '..\session/sigaa-page';
import { Account } from './sigaa-account';
import { URL } from 'url';
/**
 * Responsible for representing the user account.
 * @category Internal
 */
export declare class SigaaAccountUFFS implements Account {
    private http;
    private parser;
    private session;
    private bondFactory;
    /**
     * @param homepage homepage (page after login) of user.
     */
    constructor(homepage: Page, http: HTTP, parser: Parser, session: Session, bondFactory: BondFactory);
    /**
     * Error message when the new password chosen does not meet the security requirements of SIGAA.
     * It is thrown by the changePassword() method
     */
    readonly errorInvalidCredentials = "SIGAA: Invalid credentials.";
    /**
     * Error message when the old password is not the current password.
     * It is thrown by the changePassword() method.
     */
    readonly errorInsufficientPasswordComplexity = "SIGAA: Insufficent password complexity.";
    /**
     * Array of active bonds.
     */
    private activeBonds;
    /**
     * Array of inactive bonds.
     */
    private inactiveBonds;
    /**
     * It is a promise that stores if the page parser has already completed
     */
    private pagehomeParsePromise?;
    /**
     * Student name cache
     */
    private _name?;
    /**
     * Student e-mail cache
     */
    private _emails?;
    /**
     * Parse login result page to fill the instance.
     *
     * @param homepage home page to parse.
     */
    private parseHomepage;
    /**
     * Parse bond page.
     * @param page page to parse.
     */
    private parseBondPage;
    /**
     * @inheritdoc
     */
    getActiveBonds(): Promise<BondType[]>;
    /**
     * @inheritdoc
     */
    getInactiveBonds(): Promise<BondType[]>;
    /**
     * Parse desktop version of student home page page.
     */
    private parseStudentHomePage;
    /**
     * @inheritdoc
     */
    logoff(): Promise<void>;
    /**
     * Get profile picture URL.
     * @retuns Picture url or null if the user has no photo.
     */
    getProfilePictureURL(): Promise<URL | null>;
    /**
     * Download profile url and save in basepath.
     * @param destpath It can be a folder or a file name, if it is a directory then it will be saved inside the folder, if it is a file name it will be saved exactly in this place, but if the folder does not exist it will throw an error.
     * @param callback To know the progress of the download, each downloaded part will be called informing how much has already been downloaded.
     * @retuns Full path of the downloaded file, useful if the destpath is a directory, or null if the user has no photo.
     */
    downloadProfilePicture(destpath: string, callback?: ProgressCallback): Promise<string | null>;
    /**
     * @inheritdoc
     */
    getName(): Promise<string>;
    /**
     * @inheritdoc
     */
    getEmails(): Promise<string[]>;
    /**
     * Change the password of account.
     * @param oldPassword current password.
     * @param newPassword new password.
     * @throws {errorInvalidCredentials} If current password is not correct.
     * @throws {errorInsufficientPasswordComplexity} If the new password does not have the complexity requirement.
     */
    changePassword(oldPassword: string, newPassword: string): Promise<void>;
}
