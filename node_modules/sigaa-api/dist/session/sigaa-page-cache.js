"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SigaaPageCache = void 0;

require("source-map-support/register");

var _lodash = require("lodash");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Store page cache.
 * @category Internal
 */
class SigaaPageCache {
  constructor() {
    _defineProperty(this, "cachePages", []);

    _defineProperty(this, "intervalId", void 0);

    _defineProperty(this, "timeoutCache", 5 * 60 * 1000);
  }

  // 5min

  /**
   * @inheritdoc
   */
  clearCachePage() {
    if (this.intervalId) {
      clearInterval(this.intervalId);
    }

    this.cachePages = [];
  }
  /**
   * @inheritdoc
   */


  storePage(page) {
    if (this.intervalId === undefined) {
      this.intervalId = setInterval(() => {
        this.cachePages = this.cachePages.filter(cachePage => {
          return !(cachePage.modifiedAt < Date.now() - this.timeoutCache);
        });

        if (this.cachePages.length === 0 && this.intervalId !== undefined) {
          clearInterval(this.intervalId);
        }
      }, this.timeoutCache);
    }

    const replace = false;
    this.cachePages = this.cachePages.map(cachePage => {
      if ((0, _lodash.isEqual)(page.requestOptions, cachePage.requestOptions) && page.body === cachePage.requestBody) {
        return page;
      } else {
        return cachePage;
      }
    });

    if (!replace) {
      this.cachePages.push(page);
    }

    if (this.cachePages.length > 15) {
      this.cachePages.shift();
    }
  }
  /**
   * @inheritdoc
   */


  getPage(httpOptions, body) {
    return this.cachePages.find(cachePage => (0, _lodash.isEqual)(httpOptions, cachePage.requestOptions) && (body === undefined || body === cachePage.requestBody));
  }

}

exports.SigaaPageCache = SigaaPageCache;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXNzaW9uL3NpZ2FhLXBhZ2UtY2FjaGUudHMiXSwibmFtZXMiOlsiU2lnYWFQYWdlQ2FjaGUiLCJjbGVhckNhY2hlUGFnZSIsImludGVydmFsSWQiLCJjbGVhckludGVydmFsIiwiY2FjaGVQYWdlcyIsInN0b3JlUGFnZSIsInBhZ2UiLCJ1bmRlZmluZWQiLCJzZXRJbnRlcnZhbCIsImZpbHRlciIsImNhY2hlUGFnZSIsIm1vZGlmaWVkQXQiLCJEYXRlIiwibm93IiwidGltZW91dENhY2hlIiwibGVuZ3RoIiwicmVwbGFjZSIsIm1hcCIsInJlcXVlc3RPcHRpb25zIiwiYm9keSIsInJlcXVlc3RCb2R5IiwicHVzaCIsInNoaWZ0IiwiZ2V0UGFnZSIsImh0dHBPcHRpb25zIiwiZmluZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7Ozs7QUE0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQSxjQUFOLENBQTBDO0FBQUE7QUFBQSx3Q0FJbEIsRUFKa0I7O0FBQUE7O0FBQUEsMENBY3pCLElBQUksRUFBSixHQUFTLElBZGdCO0FBQUE7O0FBY1Y7O0FBRXJDO0FBQ0Y7QUFDQTtBQUNFQyxFQUFBQSxjQUFjLEdBQVM7QUFDckIsUUFBSSxLQUFLQyxVQUFULEVBQXFCO0FBQ25CQyxNQUFBQSxhQUFhLENBQUMsS0FBS0QsVUFBTixDQUFiO0FBQ0Q7O0FBQ0QsU0FBS0UsVUFBTCxHQUFrQixFQUFsQjtBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7QUFDRUMsRUFBQUEsU0FBUyxDQUFDQyxJQUFELEVBQW1CO0FBQzFCLFFBQUksS0FBS0osVUFBTCxLQUFvQkssU0FBeEIsRUFBbUM7QUFDakMsV0FBS0wsVUFBTCxHQUFrQk0sV0FBVyxDQUFDLE1BQU07QUFDbEMsYUFBS0osVUFBTCxHQUFrQixLQUFLQSxVQUFMLENBQWdCSyxNQUFoQixDQUF3QkMsU0FBRCxJQUFlO0FBQ3RELGlCQUFPLEVBQUVBLFNBQVMsQ0FBQ0MsVUFBVixHQUF1QkMsSUFBSSxDQUFDQyxHQUFMLEtBQWEsS0FBS0MsWUFBM0MsQ0FBUDtBQUNELFNBRmlCLENBQWxCOztBQUdBLFlBQUksS0FBS1YsVUFBTCxDQUFnQlcsTUFBaEIsS0FBMkIsQ0FBM0IsSUFBZ0MsS0FBS2IsVUFBTCxLQUFvQkssU0FBeEQsRUFBbUU7QUFDakVKLFVBQUFBLGFBQWEsQ0FBQyxLQUFLRCxVQUFOLENBQWI7QUFDRDtBQUNGLE9BUDRCLEVBTzFCLEtBQUtZLFlBUHFCLENBQTdCO0FBUUQ7O0FBQ0QsVUFBTUUsT0FBTyxHQUFHLEtBQWhCO0FBQ0EsU0FBS1osVUFBTCxHQUFrQixLQUFLQSxVQUFMLENBQWdCYSxHQUFoQixDQUFxQlAsU0FBRCxJQUFlO0FBQ25ELFVBQ0UscUJBQVFKLElBQUksQ0FBQ1ksY0FBYixFQUE2QlIsU0FBUyxDQUFDUSxjQUF2QyxLQUNBWixJQUFJLENBQUNhLElBQUwsS0FBY1QsU0FBUyxDQUFDVSxXQUYxQixFQUdFO0FBQ0EsZUFBT2QsSUFBUDtBQUNELE9BTEQsTUFLTztBQUNMLGVBQU9JLFNBQVA7QUFDRDtBQUNGLEtBVGlCLENBQWxCOztBQVdBLFFBQUksQ0FBQ00sT0FBTCxFQUFjO0FBQ1osV0FBS1osVUFBTCxDQUFnQmlCLElBQWhCLENBQXFCZixJQUFyQjtBQUNEOztBQUNELFFBQUksS0FBS0YsVUFBTCxDQUFnQlcsTUFBaEIsR0FBeUIsRUFBN0IsRUFBaUM7QUFDL0IsV0FBS1gsVUFBTCxDQUFnQmtCLEtBQWhCO0FBQ0Q7QUFDRjtBQUVEO0FBQ0Y7QUFDQTs7O0FBQ0VDLEVBQUFBLE9BQU8sQ0FDTEMsV0FESyxFQUVMTCxJQUZLLEVBR2E7QUFDbEIsV0FBTyxLQUFLZixVQUFMLENBQWdCcUIsSUFBaEIsQ0FDSmYsU0FBRCxJQUNFLHFCQUFRYyxXQUFSLEVBQXFCZCxTQUFTLENBQUNRLGNBQS9CLE1BQ0NDLElBQUksS0FBS1osU0FBVCxJQUFzQlksSUFBSSxLQUFLVCxTQUFTLENBQUNVLFdBRDFDLENBRkcsQ0FBUDtBQUtEOztBQXhFOEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0VxdWFsIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IEhUVFBSZXF1ZXN0T3B0aW9ucyB9IGZyb20gJy4vc2lnYWEtaHR0cCc7XG5pbXBvcnQgeyBQYWdlIH0gZnJvbSAnLi9zaWdhYS1wYWdlJztcblxuLyoqXG4gKiBAY2F0ZWdvcnkgSW50ZXJuYWxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQYWdlQ2FjaGUge1xuICAvKipcbiAgICogR2V0IFBhZ2UgZnJvbSBjYWNoZVxuICAgKi9cbiAgZ2V0UGFnZShcbiAgICBodHRwT3B0aW9uczogSFRUUFJlcXVlc3RPcHRpb25zLFxuICAgIGJvZHk/OiBzdHJpbmcgfCBCdWZmZXJcbiAgKTogUGFnZSB8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogQ2FjaGUgYSBwYWdlIG9yIHVwZGF0ZSBpZiB0aGUgc2FtZSByZXF1ZXN0IHZhbHVlc1xuICAgKiBAcGFyYW0gcGFnZVxuICAgKi9cbiAgc3RvcmVQYWdlKHBhZ2U6IFBhZ2UpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBGbHVzaCBzdGF0ZXMgb2YgaW5zdGFuY2VcbiAgICovXG4gIGNsZWFyQ2FjaGVQYWdlKCk6IHZvaWQ7XG59XG5cbi8qKlxuICogU3RvcmUgcGFnZSBjYWNoZS5cbiAqIEBjYXRlZ29yeSBJbnRlcm5hbFxuICovXG5leHBvcnQgY2xhc3MgU2lnYWFQYWdlQ2FjaGUgaW1wbGVtZW50cyBQYWdlQ2FjaGUge1xuICAvKipcbiAgICogQXJyYXkgb2YgYWxsIHBhZ2VzIGluIGNhY2hlLlxuICAgKi9cbiAgcHJpdmF0ZSBjYWNoZVBhZ2VzOiBQYWdlW10gPSBbXTtcblxuICAvKipcbiAgICogSW50ZXJ2YWwgaWQgdG8gY2xlYXIgdGhlIGNhY2hlLlxuICAgKi9cbiAgcHJpdmF0ZSBpbnRlcnZhbElkPzogTm9kZUpTLlRpbWVvdXQ7XG5cbiAgLyoqXG4gICAqIENhY2hlIHBhZ2UgdGltZW91dCwgZGVmYXVsdCBpcyA1IG1pblxuICAgKi9cbiAgcHVibGljIHRpbWVvdXRDYWNoZSA9IDUgKiA2MCAqIDEwMDA7IC8vIDVtaW5cblxuICAvKipcbiAgICogQGluaGVyaXRkb2NcbiAgICovXG4gIGNsZWFyQ2FjaGVQYWdlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmludGVydmFsSWQpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbElkKTtcbiAgICB9XG4gICAgdGhpcy5jYWNoZVBhZ2VzID0gW107XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXRkb2NcbiAgICovXG4gIHN0b3JlUGFnZShwYWdlOiBQYWdlKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaW50ZXJ2YWxJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmludGVydmFsSWQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIHRoaXMuY2FjaGVQYWdlcyA9IHRoaXMuY2FjaGVQYWdlcy5maWx0ZXIoKGNhY2hlUGFnZSkgPT4ge1xuICAgICAgICAgIHJldHVybiAhKGNhY2hlUGFnZS5tb2RpZmllZEF0IDwgRGF0ZS5ub3coKSAtIHRoaXMudGltZW91dENhY2hlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0aGlzLmNhY2hlUGFnZXMubGVuZ3RoID09PSAwICYmIHRoaXMuaW50ZXJ2YWxJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsSWQpO1xuICAgICAgICB9XG4gICAgICB9LCB0aGlzLnRpbWVvdXRDYWNoZSk7XG4gICAgfVxuICAgIGNvbnN0IHJlcGxhY2UgPSBmYWxzZTtcbiAgICB0aGlzLmNhY2hlUGFnZXMgPSB0aGlzLmNhY2hlUGFnZXMubWFwKChjYWNoZVBhZ2UpID0+IHtcbiAgICAgIGlmIChcbiAgICAgICAgaXNFcXVhbChwYWdlLnJlcXVlc3RPcHRpb25zLCBjYWNoZVBhZ2UucmVxdWVzdE9wdGlvbnMpICYmXG4gICAgICAgIHBhZ2UuYm9keSA9PT0gY2FjaGVQYWdlLnJlcXVlc3RCb2R5XG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHBhZ2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY2FjaGVQYWdlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKCFyZXBsYWNlKSB7XG4gICAgICB0aGlzLmNhY2hlUGFnZXMucHVzaChwYWdlKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuY2FjaGVQYWdlcy5sZW5ndGggPiAxNSkge1xuICAgICAgdGhpcy5jYWNoZVBhZ2VzLnNoaWZ0KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0ZG9jXG4gICAqL1xuICBnZXRQYWdlKFxuICAgIGh0dHBPcHRpb25zOiBIVFRQUmVxdWVzdE9wdGlvbnMsXG4gICAgYm9keT86IHN0cmluZyB8IEJ1ZmZlclxuICApOiBQYWdlIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZVBhZ2VzLmZpbmQoXG4gICAgICAoY2FjaGVQYWdlKSA9PlxuICAgICAgICBpc0VxdWFsKGh0dHBPcHRpb25zLCBjYWNoZVBhZ2UucmVxdWVzdE9wdGlvbnMpICYmXG4gICAgICAgIChib2R5ID09PSB1bmRlZmluZWQgfHwgYm9keSA9PT0gY2FjaGVQYWdlLnJlcXVlc3RCb2R5KVxuICAgICk7XG4gIH1cbn1cbiJdfQ==