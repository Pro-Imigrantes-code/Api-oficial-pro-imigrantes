"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CommonSigaaPage = void 0;

require("source-map-support/register");

var _he = require("he");

var _cheerio = require("cheerio");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Response page of sigaa.
 * @category Internal
 */
class CommonSigaaPage {
  constructor(options) {
    _defineProperty(this, "requestOptions", void 0);

    _defineProperty(this, "requestBody", void 0);

    _defineProperty(this, "statusCode", void 0);

    _defineProperty(this, "url", void 0);

    _defineProperty(this, "headers", void 0);

    _defineProperty(this, "body", void 0);

    _defineProperty(this, "modifiedAt", void 0);

    _defineProperty(this, "_$", void 0);

    _defineProperty(this, "_viewState", void 0);

    _defineProperty(this, "_bodyDecoded", void 0);

    this.requestOptions = options.requestOptions;
    this.requestBody = options.requestBody;
    this.body = options.body;
    this.url = options.url;
    this.headers = options.headers;
    this.statusCode = options.statusCode;
    this.modifiedAt = Date.now();
    this.checkPageStatusCodeAndExpired();
  }
  /**
   * @inheritdoc
   */


  /**
   * HTTP request method that originated page.
   **/
  get method() {
    return this.requestOptions.method;
  }
  /**
   * @inheritdoc
   */


  get bodyDecoded() {
    if (this._bodyDecoded) return this._bodyDecoded;
    this._bodyDecoded = (0, _he.decode)(this.body);
    return this._bodyDecoded;
  }

  get $() {
    if (this._$ === undefined) {
      this._$ = (0, _cheerio.load)(this.body, {
        normalizeWhitespace: true
      });
    }

    return this._$;
  }

  get requestHeaders() {
    return this.requestOptions.headers;
  }
  /**
   * Verify if session is expired
   */


  checkPageStatusCodeAndExpired() {
    var _this$headers$locatio;

    if (this.statusCode === 302 && (_this$headers$locatio = this.headers.location) !== null && _this$headers$locatio !== void 0 && _this$headers$locatio.includes('/sigaa/expirada.jsp')) throw new Error('SIGAA: Session expired.');
  }
  /**
   * Page viewstate
   */


  get viewState() {
    if (this._viewState === undefined) {
      const responseViewStateEl = this.$("input[name='javax.faces.ViewState']");

      if (responseViewStateEl) {
        this._viewState = responseViewStateEl.val();
      }
    }

    return this._viewState;
  }

}

exports.CommonSigaaPage = CommonSigaaPage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,