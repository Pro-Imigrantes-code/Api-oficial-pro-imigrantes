/// <reference types="node" />
import { RequestStacks } from '..\helpers/sigaa-request-stack';
import { URL } from 'url';
import { HTTPRequestOptions, ProgressCallback, SigaaRequestOptions } from './sigaa-http';
import { Page, SigaaPage } from './sigaa-page';
import { PageCache } from './sigaa-page-cache';
import { CookiesController } from './sigaa-cookies-controller';
import { RequestStackController } from '../helpers/sigaa-request-stack';
import { InstitutionController } from './sigaa-institution-controller';
/**
 * Manage a http session
 * @category Internal
 */
export interface HTTPSession {
    institutionController: InstitutionController;
    /**
     * if returns string the download is suspended
     * @param url
     * @param sessionHttpOptions
     * @param requestBody
     */
    beforeDownloadRequest(url: URL, downloadPath: string, sessionHttpOptions: HTTPRequestOptions, bodyRequest?: string, callback?: ProgressCallback): Promise<string | null>;
    afterDownloadRequest(url: URL, downloadPath: string, sessionHttpOptions: HTTPRequestOptions, finalPath: string, bodyRequest?: string, callback?: ProgressCallback): Promise<string>;
    /**
     * it is called after a sigaa response, only if successful. Should return a page or throw an error.
     * @param page Sigaa page
     * @param options Request Options
     */
    afterSuccessfulRequest(page: Page, options?: SigaaRequestOptions): Promise<Page>;
    /**
     * It is called after a error in request. You must return a page or throw an error.
     * @param page Sigaa page
     * @param options Request Options
     */
    afterUnsuccessfulRequest(err: Error, httpOptions: HTTPRequestOptions, body?: string | Buffer): Promise<Page>;
    /**
     * Transforms a path in URL
     * @param path
     */
    getURL(path: string): URL;
    /**
     * It is called before the request, it may be useful to delay.
     * If you return a page, the answer will be the page and there will be no http request
     * If it returns null, the request will continue as normal and if you want to suspend the request, it may generate an error.
     * @param link
     * @param httpOptions
     * @param body
     * @param options
     */
    beforeRequest(link: URL, httpOptions: HTTPRequestOptions, body?: string | Buffer, options?: SigaaRequestOptions): Promise<Page | null>;
    /**
     * This is called to modify the request options
     * TIP: You must at least insert the cookies.
     * @param link
     * @param httpOptions
     * @param body
     * @param options
     */
    afterHTTPOptions(link: URL, httpOptions: HTTPRequestOptions, body?: string | Buffer, options?: SigaaRequestOptions): Promise<HTTPRequestOptions>;
    /**
     *  Flush all cookies and cache of session
     */
    close(): void;
}
/**
 * Interface for request params
 * @category Internal
 */
export interface Request {
    httpOptions: HTTPRequestOptions;
    body?: string | Buffer;
}
/**
 * Interface to join beforeRequest and afterRequest
 * @category Internal
 */
export interface RequestPromiseTracker {
    request: Request;
    resolve(page: Page): void;
    reject(err: Error): void;
}
/**
 * @category Internal
 */
export declare class SigaaHTTPSession implements HTTPSession {
    institutionController: InstitutionController;
    private cookiesController;
    private pageCache;
    private requestStack;
    /**
     */
    constructor(institutionController: InstitutionController, cookiesController: CookiesController, pageCache: PageCache, requestStack: RequestStackController<Request, Page>);
    /**
     * @inheritdoc
     */
    afterDownloadRequest(url: URL, downloadPath: string, sessionHttpOptions: HTTPRequestOptions, finalPath: string): Promise<string>;
    /**
     * @inheritdoc
     */
    beforeDownloadRequest(): Promise<null>;
    get requestStacks(): RequestStacks<Request, Page>;
    private requestPromises;
    /**
     * @inheritdoc
     */
    getURL(path: string): URL;
    /**
     * @inheritdoc
     */
    afterUnsuccessfulRequest(err: Error, httpOptions: HTTPRequestOptions, body?: string | Buffer): Promise<Page>;
    /**
     * @inheritdoc
     */
    private findAndRemovePromiseRequest;
    /**
     * @inheritdoc
     */
    afterSuccessfulRequest(page: SigaaPage): Promise<Page>;
    /**
     * @inheritdoc
     */
    afterHTTPOptions(link: URL, httpOptions: HTTPRequestOptions): Promise<HTTPRequestOptions>;
    /**
     * @inheritdoc
     */
    beforeRequest(url: URL, httpOptions: HTTPRequestOptions, requestBody?: string | Buffer, options?: SigaaRequestOptions): Promise<Page | null>;
    /**
     * @inheritdoc
     */
    close(): void;
}
