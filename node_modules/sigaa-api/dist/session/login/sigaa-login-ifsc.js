"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SigaaLoginIFSC = void 0;

require("source-map-support/register");

var _sigaaTypes = require("../../sigaa-types");

var _url = require("url");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Responsible for logging in IFSC.
 * @category Internal
 */
class SigaaLoginIFSC {
  constructor(http, session) {
    this.http = http;
    this.session = session;

    _defineProperty(this, "errorInvalidCredentials", 'SIGAA: Invalid credentials.');

    _defineProperty(this, "form", void 0);
  }

  parseLoginForm(page) {
    const formElement = page.$("form[name='loginForm']");
    const actionUrl = formElement.attr('action');
    if (!actionUrl) throw new Error('SIGAA: No action form on login page.');
    const action = new _url.URL(actionUrl, page.url.href);
    const postValues = {};
    formElement.find('input').each((index, element) => {
      const name = page.$(element).attr('name');
      if (name) postValues[name] = page.$(element).val();
    });
    return {
      action,
      postValues
    };
  }
  /**
   * Current login form.
   */


  /**
   * Retuns HTML form
   */
  async getLoginForm() {
    if (this.form) {
      return this.form;
    } else {
      const page = await this.http.get('/sigaa/verTelaLogin.do');
      return this.parseLoginForm(page);
    }
  }
  /**
   * Start a session on desktop
   * @param username
   * @param password
   */


  async desktopLogin(username, password) {
    const {
      action,
      postValues
    } = await this.getLoginForm();
    postValues['user.login'] = username;
    postValues['user.senha'] = password;
    const page = await this.http.post(action.href, postValues);
    return await this.parseDesktopLoginResult(page);
  }
  /**
   * Start a session on Sigaa, return login reponse page
   * @param username
   * @param password
   */


  async login(username, password, retry = true) {
    if (this.session.loginStatus === _sigaaTypes.LoginStatus.Authenticated) throw new Error('SIGAA: This session already has a user logged in.');

    try {
      const page = await this.desktopLogin(username, password);
      return this.http.followAllRedirect(page);
    } catch (error) {
      if (!retry || error.message === this.errorInvalidCredentials) {
        throw error;
      } else {
        return this.login(username, password, false);
      }
    }
  }

  async parseDesktopLoginResult(page) {
    const accountPage = await this.http.followAllRedirect(page);

    if (accountPage.bodyDecoded.includes('Entrar no Sistema')) {
      if (accountPage.bodyDecoded.includes('Usuário e/ou senha inválidos')) {
        this.form = await this.parseLoginForm(accountPage);
        throw new Error(this.errorInvalidCredentials);
      } else {
        throw new Error('SIGAA: Invalid response after login attempt.');
      }
    } else {
      this.session.loginStatus = _sigaaTypes.LoginStatus.Authenticated;
      return accountPage;
    }
  }

}

exports.SigaaLoginIFSC = SigaaLoginIFSC;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,