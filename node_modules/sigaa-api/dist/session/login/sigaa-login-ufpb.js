"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SigaaLoginUFPB = void 0;

require("source-map-support/register");

var _sigaaTypes = require("../../sigaa-types");

var _url = require("url");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Responsible for logging in UFPB.
 * @category Internal
 */
class SigaaLoginUFPB {
  constructor(http, session) {
    this.http = http;
    this.session = session;

    _defineProperty(this, "errorInvalidCredentials", 'SIGAA: Invalid credentials.');

    _defineProperty(this, "form", void 0);
  }

  parseLoginForm(page) {
    const formElement = page.$("form[name='form']");
    const actionUrl = formElement.attr('action');
    if (!actionUrl) throw new Error('SIGAA: No action form on login page.');
    const action = new _url.URL(actionUrl, page.url.href);
    const postValues = {};
    formElement.find('input').each((index, element) => {
      const name = page.$(element).attr('name');
      if (name) postValues[name] = page.$(element).val();
    });
    return {
      action,
      postValues
    };
  }
  /**
   * Current login form.
   */


  /**
   * Retuns HTML form
   */
  async getLoginForm() {
    if (this.form) {
      return this.form;
    } else {
      const page = await this.http.get('/sigaa/logon.jsf');
      return this.parseLoginForm(page);
    }
  }
  /**
   * Start a session on desktop
   * @param username
   * @param password
   */


  async desktopLogin(username, password) {
    const {
      action,
      postValues
    } = await this.getLoginForm();
    postValues['form:login'] = username;
    postValues['form:senha'] = password;
    const page = await this.http.post(action.href, postValues);
    return await this.parseDesktopLoginResult(page);
  }
  /**
   * Start a session on Sigaa, return login reponse page
   * @param username
   * @param password
   */


  async login(username, password, retry = true) {
    if (this.session.loginStatus === _sigaaTypes.LoginStatus.Authenticated) throw new Error('SIGAA: This session already has a user logged in.');

    try {
      const page = await this.desktopLogin(username, password);
      return this.http.followAllRedirect(page);
    } catch (error) {
      if (!retry || error.message === this.errorInvalidCredentials) {
        throw error;
      } else {
        return this.login(username, password, false);
      }
    }
  }

  async parseDesktopLoginResult(page) {
    const accountPage = await this.http.followAllRedirect(page);

    if (accountPage.bodyDecoded.includes('action="/sigaa/logon.jsf"')) {
      if (accountPage.bodyDecoded.includes('Usuário e/ou senha inválidos')) {
        this.form = await this.parseLoginForm(accountPage);
        throw new Error(this.errorInvalidCredentials);
      } else {
        throw new Error('SIGAA: Invalid response after login attempt.');
      }
    } else {
      this.session.loginStatus = _sigaaTypes.LoginStatus.Authenticated;
      return accountPage;
    }
  }

}

exports.SigaaLoginUFPB = SigaaLoginUFPB;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZXNzaW9uL2xvZ2luL3NpZ2FhLWxvZ2luLXVmcGIudHMiXSwibmFtZXMiOlsiU2lnYWFMb2dpblVGUEIiLCJjb25zdHJ1Y3RvciIsImh0dHAiLCJzZXNzaW9uIiwicGFyc2VMb2dpbkZvcm0iLCJwYWdlIiwiZm9ybUVsZW1lbnQiLCIkIiwiYWN0aW9uVXJsIiwiYXR0ciIsIkVycm9yIiwiYWN0aW9uIiwiVVJMIiwidXJsIiwiaHJlZiIsInBvc3RWYWx1ZXMiLCJmaW5kIiwiZWFjaCIsImluZGV4IiwiZWxlbWVudCIsIm5hbWUiLCJ2YWwiLCJnZXRMb2dpbkZvcm0iLCJmb3JtIiwiZ2V0IiwiZGVza3RvcExvZ2luIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInBvc3QiLCJwYXJzZURlc2t0b3BMb2dpblJlc3VsdCIsImxvZ2luIiwicmV0cnkiLCJsb2dpblN0YXR1cyIsIkxvZ2luU3RhdHVzIiwiQXV0aGVudGljYXRlZCIsImZvbGxvd0FsbFJlZGlyZWN0IiwiZXJyb3IiLCJtZXNzYWdlIiwiZXJyb3JJbnZhbGlkQ3JlZGVudGlhbHMiLCJhY2NvdW50UGFnZSIsImJvZHlEZWNvZGVkIiwiaW5jbHVkZXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOzs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQSxjQUFOLENBQXNDO0FBQzNDQyxFQUFBQSxXQUFXLENBQVdDLElBQVgsRUFBaUNDLE9BQWpDLEVBQW1EO0FBQUEsU0FBeENELElBQXdDLEdBQXhDQSxJQUF3QztBQUFBLFNBQWxCQyxPQUFrQixHQUFsQkEsT0FBa0I7O0FBQUEscURBQzNCLDZCQUQyQjs7QUFBQTtBQUFFOztBQUd0REMsRUFBQUEsY0FBYyxDQUFDQyxJQUFELEVBQTRCO0FBQ2xELFVBQU1DLFdBQVcsR0FBR0QsSUFBSSxDQUFDRSxDQUFMLENBQU8sbUJBQVAsQ0FBcEI7QUFFQSxVQUFNQyxTQUFTLEdBQUdGLFdBQVcsQ0FBQ0csSUFBWixDQUFp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LENBQXdCQyxRQUF4QixDQUFpQywyQkFBakMsQ0FBSixFQUFtRTtBQUNqRSxVQUFJRixXQUFXLENBQUNDLFdBQVosQ0FBd0JDLFFBQXhCLENBQWlDLDhCQUFqQyxDQUFKLEVBQXNFO0FBQ3BFLGFBQUtsQixJQUFMLEdBQVksTUFBTSxLQUFLbkIsY0FBTCxDQUFvQm1DLFdBQXBCLENBQWxCO0FBQ0EsY0FBTSxJQUFJN0IsS0FBSixDQUFVLEtBQUs0Qix1QkFBZixDQUFOO0FBQ0QsT0FIRCxNQUdPO0FBQ0wsY0FBTSxJQUFJNUIsS0FBSixDQUFVLDhDQUFWLENBQU47QUFDRDtBQUNGLEtBUEQsTUFPTztBQUNMLFdBQUtQLE9BQUwsQ0FBYTZCLFdBQWIsR0FBMkJDLHdCQUFZQyxhQUF2QztBQUNBLGFBQU9LLFdBQVA7QUFDRDtBQUNGOztBQTdGMEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMb2dpblN0YXR1cyB9IGZyb20gJy4uLy4uL3NpZ2FhLXR5cGVzJztcbmltcG9ydCB7IFVSTCB9IGZyb20gJ3VybCc7XG5pbXBvcnQgeyBIVFRQIH0gZnJvbSAnQHNlc3Npb24vc2lnYWEtaHR0cCc7XG5pbXBvcnQgeyBTZXNzaW9uIH0gZnJvbSAnQHNlc3Npb24vc2lnYWEtc2Vzc2lvbic7XG5pbXBvcnQgeyBMb2dpbiB9IGZyb20gJy4vc2lnYWEtbG9naW4nO1xuaW1wb3J0IHsgVUZQQlBhZ2UgfSBmcm9tICdAc2Vzc2lvbi9wYWdlL3NpZ2FhLXBhZ2UtdWZwYic7XG5pbXBvcnQgeyBTaWdhYUZvcm0gfSBmcm9tICdAc2Vzc2lvbi9zaWdhYS1wYWdlJztcblxuLyoqXG4gKiBSZXNwb25zaWJsZSBmb3IgbG9nZ2luZyBpbiBVRlBCLlxuICogQGNhdGVnb3J5IEludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBTaWdhYUxvZ2luVUZQQiBpbXBsZW1lbnRzIExvZ2luIHtcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGh0dHA6IEhUVFAsIHByb3RlY3RlZCBzZXNzaW9uOiBTZXNzaW9uKSB7fVxuICByZWFkb25seSBlcnJvckludmFsaWRDcmVkZW50aWFscyA9ICdTSUdBQTogSW52YWxpZCBjcmVkZW50aWFscy4nO1xuXG4gIHByb3RlY3RlZCBwYXJzZUxvZ2luRm9ybShwYWdlOiBVRlBCUGFnZSk6IFNpZ2FhRm9ybSB7XG4gICAgY29uc3QgZm9ybUVsZW1lbnQgPSBwYWdlLiQoXCJmb3JtW25hbWU9J2Zvcm0nXVwiKTtcblxuICAgIGNvbnN0IGFjdGlvblVybCA9IGZvcm1FbGVtZW50LmF0dHIoJ2FjdGlvbicpO1xuICAgIGlmICghYWN0aW9uVXJsKSB0aHJvdyBuZXcgRXJyb3IoJ1NJR0FBOiBObyBhY3Rpb24gZm9ybSBvbiBsb2dpbiBwYWdlLicpO1xuXG4gICAgY29uc3QgYWN0aW9uID0gbmV3IFVSTChhY3Rpb25VcmwsIHBhZ2UudXJsLmhyZWYpO1xuXG4gICAgY29uc3QgcG9zdFZhbHVlczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuXG4gICAgZm9ybUVsZW1lbnQuZmluZCgnaW5wdXQnKS5lYWNoKChpbmRleCwgZWxlbWVudCkgPT4ge1xuICAgICAgY29uc3QgbmFtZSA9IHBhZ2UuJChlbGVtZW50KS5hdHRyKCduYW1lJyk7XG4gICAgICBpZiAobmFtZSkgcG9zdFZhbHVlc1tuYW1lXSA9IHBhZ2UuJChlbGVtZW50KS52YWwoKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB7IGFjdGlvbiwgcG9zdFZhbHVlcyB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEN1cnJlbnQgbG9naW4gZm9ybS5cbiAgICovXG4gIHByb3RlY3RlZCBmb3JtPzogU2lnYWFGb3JtO1xuXG4gIC8qKlxuICAgKiBSZXR1bnMgSFRNTCBmb3JtXG4gICAqL1xuICBhc3luYyBnZXRMb2dpbkZvcm0oKTogUHJvbWlzZTxTaWdhYUZvcm0+IHtcbiAgICBpZiAodGhpcy5mb3JtKSB7XG4gICAgICByZXR1cm4gdGhpcy5mb3JtO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBwYWdlID0gYXdhaXQgdGhpcy5odHRwLmdldCgnL3NpZ2FhL2xvZ29uLmpzZicpO1xuICAgICAgcmV0dXJuIHRoaXMucGFyc2VMb2dpbkZvcm0ocGFnZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IGEgc2Vzc2lvbiBvbiBkZXNrdG9wXG4gICAqIEBwYXJhbSB1c2VybmFtZVxuICAgKiBAcGFyYW0gcGFzc3dvcmRcbiAgICovXG4gIHByb3RlY3RlZCBhc3luYyBkZXNrdG9wTG9naW4oXG4gICAgdXNlcm5hbWU6IHN0cmluZyxcbiAgICBwYXNzd29yZDogc3RyaW5nXG4gICk6IFByb21pc2U8VUZQQlBhZ2U+IHtcbiAgICBjb25zdCB7IGFjdGlvbiwgcG9zdFZhbHVlcyB9ID0gYXdhaXQgdGhpcy5nZXRMb2dpbkZvcm0oKTtcblxuICAgIHBvc3RWYWx1ZXNbJ2Zvcm06bG9naW4nXSA9IHVzZXJuYW1lO1xuICAgIHBvc3RWYWx1ZXNbJ2Zvcm06c2VuaGEnXSA9IHBhc3N3b3JkO1xuICAgIGNvbnN0IHBhZ2UgPSBhd2FpdCB0aGlzLmh0dHAucG9zdChhY3Rpb24uaHJlZiwgcG9zdFZhbHVlcyk7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucGFyc2VEZXNrdG9wTG9naW5SZXN1bHQocGFnZSk7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgYSBzZXNzaW9uIG9uIFNpZ2FhLCByZXR1cm4gbG9naW4gcmVwb25zZSBwYWdlXG4gICAqIEBwYXJhbSB1c2VybmFtZVxuICAgKiBAcGFyYW0gcGFzc3dvcmRcbiAgICovXG4gIGFzeW5jIGxvZ2luKFxuICAgIHVzZXJuYW1lOiBzdHJpbmcsXG4gICAgcGFzc3dvcmQ6IHN0cmluZyxcbiAgICByZXRyeSA9IHRydWVcbiAgKTogUHJvbWlzZTxVRlBCUGFnZT4ge1xuICAgIGlmICh0aGlzLnNlc3Npb24ubG9naW5TdGF0dXMgPT09IExvZ2luU3RhdHVzLkF1dGhlbnRpY2F0ZWQpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NJR0FBOiBUaGlzIHNlc3Npb24gYWxyZWFkeSBoYXMgYSB1c2VyIGxvZ2dlZCBpbi4nKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcGFnZSA9IGF3YWl0IHRoaXMuZGVza3RvcExvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk7XG4gICAgICByZXR1cm4gdGhpcy5odHRwLmZvbGxvd0FsbFJlZGlyZWN0KHBhZ2UpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpZiAoIXJldHJ5IHx8IGVycm9yLm1lc3NhZ2UgPT09IHRoaXMuZXJyb3JJbnZhbGlkQ3JlZGVudGlhbHMpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgcGFyc2VEZXNrdG9wTG9naW5SZXN1bHQocGFnZTogVUZQQlBhZ2UpOiBQcm9taXNlPFVGUEJQYWdlPiB7XG4gICAgY29uc3QgYWNjb3VudFBhZ2UgPSBhd2FpdCB0aGlzLmh0dHAuZm9sbG93QWxsUmVkaXJlY3QocGFnZSk7XG4gICAgaWYgKGFjY291bnRQYWdlLmJvZHlEZWNvZGVkLmluY2x1ZGVzKCdhY3Rpb249XCIvc2lnYWEvbG9nb24uanNmXCInKSkge1xuICAgICAgaWYgKGFjY291bnRQYWdlLmJvZHlEZWNvZGVkLmluY2x1ZGVzKCdVc3XDoXJpbyBlL291IHNlbmhhIGludsOhbGlkb3MnKSkge1xuICAgICAgICB0aGlzLmZvcm0gPSBhd2FpdCB0aGlzLnBhcnNlTG9naW5Gb3JtKGFjY291bnRQYWdlKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMuZXJyb3JJbnZhbGlkQ3JlZGVudGlhbHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTSUdBQTogSW52YWxpZCByZXNwb25zZSBhZnRlciBsb2dpbiBhdHRlbXB0LicpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNlc3Npb24ubG9naW5TdGF0dXMgPSBMb2dpblN0YXR1cy5BdXRoZW50aWNhdGVkO1xuICAgICAgcmV0dXJuIGFjY291bnRQYWdlO1xuICAgIH1cbiAgfVxufVxuIl19