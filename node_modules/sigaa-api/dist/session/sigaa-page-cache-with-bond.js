"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SigaaPageCacheWithBond = void 0;

require("source-map-support/register");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Transforms the cache mechanism to be dependent on the current bond.
 * @category Internal
 */
class SigaaPageCacheWithBond {
  /**
   * List of all cache instances.
   */

  /**
   * Cache for the current bond
   */

  /**
   * Current bond
   */
  constructor(cachePageFactory) {
    this.cachePageFactory = cachePageFactory;

    _defineProperty(this, "cacheInstances", new Map());

    _defineProperty(this, "currentCache", void 0);

    _defineProperty(this, "currentBond", null);

    this.currentCache = this.cachePageFactory.createPageCache();
    this.cacheInstances.set(null, this.currentCache);
  }
  /**
   * @inheritdoc
   */


  setCurrentBond(bondSwitchURL) {
    const bondSwitchURLstring = bondSwitchURL ? bondSwitchURL.href : null;

    if (bondSwitchURLstring !== this.currentBond) {
      const oldCacheInstance = this.cacheInstances.get(bondSwitchURLstring);

      if (oldCacheInstance) {
        this.currentCache = oldCacheInstance;
      } else {
        const newCacheInstance = this.cachePageFactory.createPageCache();
        this.cacheInstances.set(bondSwitchURLstring, newCacheInstance);
        this.currentCache = newCacheInstance;
      }

      this.currentBond = bondSwitchURLstring;
    }
  }
  /**
   * @inheritdoc
   */


  getPage(httpOptions, body) {
    return this.currentCache.getPage(httpOptions, body);
  }
  /**
   * @inheritdoc
   */


  storePage(page) {
    return this.currentCache.storePage(page);
  }
  /**
   * @inheritdoc
   */


  clearCachePage() {
    for (const cacheInstance of this.cacheInstances.values()) {
      cacheInstance.clearCachePage();
    }

    this.cacheInstances.clear();
  }

}

exports.SigaaPageCacheWithBond = SigaaPageCacheWithBond;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXNzaW9uL3NpZ2FhLXBhZ2UtY2FjaGUtd2l0aC1ib25kLnRzIl0sIm5hbWVzIjpbIlNpZ2FhUGFnZUNhY2hlV2l0aEJvbmQiLCJjb25zdHJ1Y3RvciIsImNhY2hlUGFnZUZhY3RvcnkiLCJNYXAiLCJjdXJyZW50Q2FjaGUiLCJjcmVhdGVQYWdlQ2FjaGUiLCJjYWNoZUluc3RhbmNlcyIsInNldCIsInNldEN1cnJlbnRCb25kIiwiYm9uZFN3aXRjaFVSTCIsImJvbmRTd2l0Y2hVUkxzdHJpbmciLCJocmVmIiwiY3VycmVudEJvbmQiLCJvbGRDYWNoZUluc3RhbmNlIiwiZ2V0IiwibmV3Q2FjaGVJbnN0YW5jZSIsImdldFBhZ2UiLCJodHRwT3B0aW9ucyIsImJvZHkiLCJzdG9yZVBhZ2UiLCJwYWdlIiwiY2xlYXJDYWNoZVBhZ2UiLCJjYWNoZUluc3RhbmNlIiwidmFsdWVzIiwiY2xlYXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZUE7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQSxzQkFBTixDQUEwRDtBQUMvRDtBQUNGO0FBQ0E7O0FBR0U7QUFDRjtBQUNBOztBQUdFO0FBQ0Y7QUFDQTtBQUdFQyxFQUFBQSxXQUFXLENBQVNDLGdCQUFULEVBQTZDO0FBQUEsU0FBcENBLGdCQUFvQyxHQUFwQ0EsZ0JBQW9DOztBQUFBLDRDQVovQixJQUFJQyxHQUFKLEVBWStCOztBQUFBOztBQUFBLHlDQUZuQixJQUVtQjs7QUFDdEQsU0FBS0MsWUFBTCxHQUFvQixLQUFLRixnQkFBTCxDQUFzQkcsZUFBdEIsRUFBcEI7QUFDQSxTQUFLQyxjQUFMLENBQW9CQyxHQUFwQixDQUF3QixJQUF4QixFQUE4QixLQUFLSCxZQUFuQztBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7QUFDRUksRUFBQUEsY0FBYyxDQUFDQyxhQUFELEVBQWtDO0FBQzlDLFVBQU1DLG1CQUFtQixHQUFHRCxhQUFhLEdBQUdBLGFBQWEsQ0FBQ0UsSUFBakIsR0FBd0IsSUFBakU7O0FBQ0EsUUFBSUQsbUJBQW1CLEtBQUssS0FBS0UsV0FBakMsRUFBOEM7QUFDNUMsWUFBTUMsZ0JBQWdCLEdBQUcsS0FBS1AsY0FBTCxDQUFvQlEsR0FBcEIsQ0FBd0JKLG1CQUF4QixDQUF6Qjs7QUFDQSxVQUFJRyxnQkFBSixFQUFzQjtBQUNwQixhQUFLVCxZQUFMLEdBQW9CUyxnQkFBcEI7QUFDRCxPQUZELE1BRU87QUFDTCxjQUFNRSxnQkFBZ0IsR0FBRyxLQUFLYixnQkFBTCxDQUFzQkcsZUFBdEIsRUFBekI7QUFDQSxhQUFLQyxjQUFMLENBQW9CQyxHQUFwQixDQUF3QkcsbUJBQXhCLEVBQTZDSyxnQkFBN0M7QUFDQSxhQUFLWCxZQUFMLEdBQW9CVyxnQkFBcEI7QUFDRDs7QUFDRCxXQUFLSCxXQUFMLEdBQW1CRixtQkFBbkI7QUFDRDtBQUNGO0FBRUQ7QUFDRjtBQUNBOzs7QUFDRU0sRUFBQUEsT0FBTyxDQUNMQyxXQURLLEVBRUxDLElBRkssRUFHYTtBQUNsQixXQUFPLEtBQUtkLFlBQUwsQ0FBa0JZLE9BQWxCLENBQTBCQyxXQUExQixFQUF1Q0MsSUFBdkMsQ0FBUDtBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7QUFDRUMsRUFBQUEsU0FBUyxDQUFDQyxJQUFELEVBQW1CO0FBQzFCLFdBQU8sS0FBS2hCLFlBQUwsQ0FBa0JlLFNBQWxCLENBQTRCQyxJQUE1QixDQUFQO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7OztBQUNFQyxFQUFBQSxjQUFjLEdBQVM7QUFDckIsU0FBSyxNQUFNQyxhQUFYLElBQTRCLEtBQUtoQixjQUFMLENBQW9CaUIsTUFBcEIsRUFBNUIsRUFBMEQ7QUFDeERELE1BQUFBLGFBQWEsQ0FBQ0QsY0FBZDtBQUNEOztBQUNELFNBQUtmLGNBQUwsQ0FBb0JrQixLQUFwQjtBQUNEOztBQWhFOEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIVFRQUmVxdWVzdE9wdGlvbnMgfSBmcm9tICcuL3NpZ2FhLWh0dHAnO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gJy4vc2lnYWEtcGFnZSc7XG5pbXBvcnQgeyBQYWdlQ2FjaGUgfSBmcm9tICcuL3NpZ2FhLXBhZ2UtY2FjaGUnO1xuaW1wb3J0IHsgUGFnZUNhY2hlRmFjdG9yeSB9IGZyb20gJy4vc2lnYWEtcGFnZS1jYWNoZS1mYWN0b3J5JztcblxuLyoqXG4gKiBAY2F0ZWdvcnkgSW50ZXJuYWxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQYWdlQ2FjaGVXaXRoQm9uZCBleHRlbmRzIFBhZ2VDYWNoZSB7XG4gIC8qKlxuICAgKkRlZmluZSB0aGUgY3VycmVudCBib25kLCBlYWNoIGJvbmQgaGFzIGl0cyBvd24gY2FjaGVcbiAgICovXG4gIHNldEN1cnJlbnRCb25kKGJvbmRTd2l0Y2hVcmw6IFVSTCB8IG51bGwpOiB2b2lkO1xufVxuXG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIGNhY2hlIG1lY2hhbmlzbSB0byBiZSBkZXBlbmRlbnQgb24gdGhlIGN1cnJlbnQgYm9uZC5cbiAqIEBjYXRlZ29yeSBJbnRlcm5hbFxuICovXG5leHBvcnQgY2xhc3MgU2lnYWFQYWdlQ2FjaGVXaXRoQm9uZCBpbXBsZW1lbnRzIFBhZ2VDYWNoZVdpdGhCb25kIHtcbiAgLyoqXG4gICAqIExpc3Qgb2YgYWxsIGNhY2hlIGluc3RhbmNlcy5cbiAgICovXG4gIHByaXZhdGUgY2FjaGVJbnN0YW5jZXMgPSBuZXcgTWFwPHN0cmluZyB8IG51bGwsIFBhZ2VDYWNoZT4oKTtcblxuICAvKipcbiAgICogQ2FjaGUgZm9yIHRoZSBjdXJyZW50IGJvbmRcbiAgICovXG4gIHByaXZhdGUgY3VycmVudENhY2hlOiBQYWdlQ2FjaGU7XG5cbiAgLyoqXG4gICAqIEN1cnJlbnQgYm9uZFxuICAgKi9cbiAgcHJpdmF0ZSBjdXJyZW50Qm9uZDogbnVsbCB8IHN0cmluZyA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjYWNoZVBhZ2VGYWN0b3J5OiBQYWdlQ2FjaGVGYWN0b3J5KSB7XG4gICAgdGhpcy5jdXJyZW50Q2FjaGUgPSB0aGlzLmNhY2hlUGFnZUZhY3RvcnkuY3JlYXRlUGFnZUNhY2hlKCk7XG4gICAgdGhpcy5jYWNoZUluc3RhbmNlcy5zZXQobnVsbCwgdGhpcy5jdXJyZW50Q2FjaGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0ZG9jXG4gICAqL1xuICBzZXRDdXJyZW50Qm9uZChib25kU3dpdGNoVVJMOiBVUkwgfCBudWxsKTogdm9pZCB7XG4gICAgY29uc3QgYm9uZFN3aXRjaFVSTHN0cmluZyA9IGJvbmRTd2l0Y2hVUkwgPyBib25kU3dpdGNoVVJMLmhyZWYgOiBudWxsO1xuICAgIGlmIChib25kU3dpdGNoVVJMc3RyaW5nICE9PSB0aGlzLmN1cnJlbnRCb25kKSB7XG4gICAgICBjb25zdCBvbGRDYWNoZUluc3RhbmNlID0gdGhpcy5jYWNoZUluc3RhbmNlcy5nZXQoYm9uZFN3aXRjaFVSTHN0cmluZyk7XG4gICAgICBpZiAob2xkQ2FjaGVJbnN0YW5jZSkge1xuICAgICAgICB0aGlzLmN1cnJlbnRDYWNoZSA9IG9sZENhY2hlSW5zdGFuY2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBuZXdDYWNoZUluc3RhbmNlID0gdGhpcy5jYWNoZVBhZ2VGYWN0b3J5LmNyZWF0ZVBhZ2VDYWNoZSgpO1xuICAgICAgICB0aGlzLmNhY2hlSW5zdGFuY2VzLnNldChib25kU3dpdGNoVVJMc3RyaW5nLCBuZXdDYWNoZUluc3RhbmNlKTtcbiAgICAgICAgdGhpcy5jdXJyZW50Q2FjaGUgPSBuZXdDYWNoZUluc3RhbmNlO1xuICAgICAgfVxuICAgICAgdGhpcy5jdXJyZW50Qm9uZCA9IGJvbmRTd2l0Y2hVUkxzdHJpbmc7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0ZG9jXG4gICAqL1xuICBnZXRQYWdlKFxuICAgIGh0dHBPcHRpb25zOiBIVFRQUmVxdWVzdE9wdGlvbnMsXG4gICAgYm9keT86IHN0cmluZyB8IEJ1ZmZlclxuICApOiBQYWdlIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50Q2FjaGUuZ2V0UGFnZShodHRwT3B0aW9ucywgYm9keSk7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXRkb2NcbiAgICovXG4gIHN0b3JlUGFnZShwYWdlOiBQYWdlKTogdm9pZCB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudENhY2hlLnN0b3JlUGFnZShwYWdlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdGRvY1xuICAgKi9cbiAgY2xlYXJDYWNoZVBhZ2UoKTogdm9pZCB7XG4gICAgZm9yIChjb25zdCBjYWNoZUluc3RhbmNlIG9mIHRoaXMuY2FjaGVJbnN0YW5jZXMudmFsdWVzKCkpIHtcbiAgICAgIGNhY2hlSW5zdGFuY2UuY2xlYXJDYWNoZVBhZ2UoKTtcbiAgICB9XG4gICAgdGhpcy5jYWNoZUluc3RhbmNlcy5jbGVhcigpO1xuICB9XG59XG4iXX0=