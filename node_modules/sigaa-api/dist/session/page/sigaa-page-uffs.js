"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SigaaPageUFFS = void 0;

require("source-map-support/register");

var _sigaaPage = require("../sigaa-page");

var _url = require("url");

/* eslint-disable prettier/prettier */

/**
 * Response page of sigaa.
 * @category Internal
 */
class SigaaPageUFFS extends _sigaaPage.CommonSigaaPage {
  constructor(options) {
    super(options);
  }
  /**
   * @inheritdoc
   */


  parseJSFCLJS(javaScriptCode) {
    if (!javaScriptCode.includes('getElementById')) throw new Error('SIGAA: Form not found.');
    const formQuery = javaScriptCode.match(/document\.getElementById\('(\w+)'\)/);
    if (!formQuery) throw new Error('SIGAA: Form without id.');
    const formEl = this.$(`#${formQuery[1]}`);

    if (!formEl) {
      throw new Error('SIGAA: Form not found.');
    }

    const formAction = formEl.attr('action');
    if (formAction === undefined) throw new Error('SIGAA: Form without action.');
    const action = new _url.URL(formAction, this.url);
    const postValues = {};
    formEl.find("input:not([type='submit'])").each((_, element) => {
      const name = this.$(element).attr('name');
      const value = this.$(element).val();

      if (name !== undefined) {
        postValues[name] = value;
      }
    });
    const formPostValuesString = `{${javaScriptCode.replace(/if([\S\s]*?),{|},([\S\s]*?)false/gm, '').replace(/"/gm, '\\"').replace(/'/gm, '"')}}`;
    return {
      action,
      postValues: { ...postValues,
        ...JSON.parse(formPostValuesString)
      }
    };
  }

}

exports.SigaaPageUFFS = SigaaPageUFFS;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZXNzaW9uL3BhZ2Uvc2lnYWEtcGFnZS11ZmZzLnRzIl0sIm5hbWVzIjpbIlNpZ2FhUGFnZVVGRlMiLCJDb21tb25TaWdhYVBhZ2UiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJwYXJzZUpTRkNMSlMiLCJqYXZhU2NyaXB0Q29kZSIsImluY2x1ZGVzIiwiRXJyb3IiLCJmb3JtUXVlcnkiLCJtYXRjaCIsImZvcm1FbCIsIiQiLCJmb3JtQWN0aW9uIiwiYXR0ciIsInVuZGVmaW5lZCIsImFjdGlvbiIsIlVSTCIsInVybCIsInBvc3RWYWx1ZXMiLCJmaW5kIiwiZWFjaCIsIl8iLCJlbGVtZW50IiwibmFtZSIsInZhbHVlIiwidmFsIiwiZm9ybVBvc3RWYWx1ZXNTdHJpbmciLCJyZXBsYWNlIiwiSlNPTiIsInBhcnNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFDQTs7QUFNRTs7QUFQRjs7QUF3QkU7QUFDRjtBQUNBO0FBQ0E7QUFDUyxNQUFNQSxhQUFOLFNBQTRCQywwQkFBNUIsQ0FBNEM7QUFDakRDLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFnQztBQUN6QyxVQUFNQSxPQUFOO0FBQ0Q7QUFFRDtBQUNKO0FBQ0E7OztBQUNJQyxFQUFBQSxZQUFZLENBQUNDLGNBQUQsRUFBb0M7QUFDOUMsUUFBSSxDQUFDQSxjQUFjLENBQUNDLFFBQWYsQ0FBd0IsZ0JBQXhCLENBQUwsRUFDRSxNQUFNLElBQUlDLEtBQUosQ0FBVSx3QkFBVixDQUFOO0FBRUYsVUFBTUMsU0FBUyxHQUFHSCxjQUFjLENBQUNJLEtBQWYsQ0FDaEIscUNBRGdCLENBQWxCO0FBR0EsUUFBSSxDQUFDRCxTQUFMLEVBQWdCLE1BQU0sSUFBSUQsS0FBSixDQUFVLHlCQUFWLENBQU47QUFFaEIsVUFBTUcsTUFBTSxHQUFHLEtBQUtDLENBQUwsQ0FBUSxJQUFHSCxTQUFTLENBQUMsQ0FBRCxDQUFJLEVBQXhCLENBQWY7O0FBQ0EsUUFBSSxDQUFDRSxNQUFMLEVBQWE7QUFDWCxZQUFNLElBQUlILEtBQUosQ0FBVSx3QkFBVixDQUFOO0FBQ0Q7O0FBRUQsVUFBTUssVUFBVSxHQUFHRixNQUFNLENBQUNHLElBQVAsQ0FBWSxRQUFaLENBQW5CO0FBQ0EsUUFBSUQsVUFBVSxLQUFLRSxTQUFuQixFQUNFLE1BQU0sSUFBSVAsS0FBSixDQUFVLDZCQUFWLENBQU47QUFFRixVQUFNUSxNQUFNLEdBQUcsSUFBSUMsUUFBSixDQUFRSixVQUFSLEVBQW9CLEtBQUtLLEdBQXpCLENBQWY7QUFDQSxVQUFNQyxVQUFrQyxHQUFHLEVBQTNDO0FBRUFSLElBQUFBLE1BQU0sQ0FBQ1MsSUFBUCxDQUFZLDRCQUFaLEVBQTBDQyxJQUExQyxDQUErQyxDQUFDQyxDQUFELEVBQUlDLE9BQUosS0FBZ0I7QUFDN0QsWUFBTUMsSUFBSSxHQUFHLEtBQUtaLENBQUwsQ0FBT1csT0FBUCxFQUFnQlQsSUFBaEIsQ0FBcUIsTUFBckIsQ0FBYjtBQUNBLFlBQU1XLEtBQUssR0FBRyxLQUFLYixDQUFMLENBQU9XLE9BQVAsRUFBZ0JHLEdBQWhCLEVBQWQ7O0FBQ0EsVUFBSUYsSUFBSSxLQUFLVCxTQUFiLEVBQXdCO0FBQ3RCSSxRQUFBQSxVQUFVLENBQUNLLElBQUQsQ0FBVixHQUFtQkMsS0FBbkI7QUFDRDtBQUNGLEtBTkQ7QUFRQSxVQUFNRSxvQkFBb0IsR0FBSSxJQUFHckIsY0FBYyxDQUM1Q3NCLE9BRDhCLENBQ3RCLG9DQURzQixFQUNnQixFQURoQixFQUU5QkEsT0FGOEIsQ0FFdEIsS0FGc0IsRUFFZixLQUZlLEVBRzlCQSxPQUg4QixDQUd0QixLQUhzQixFQUdmLEdBSGUsQ0FHVixHQUh2QjtBQUtBLFdBQU87QUFDTFosTUFBQUEsTUFESztBQUVMRyxNQUFBQSxVQUFVLEVBQUUsRUFDVixHQUFHQSxVQURPO0FBRVYsV0FBR1UsSUFBSSxDQUFDQyxLQUFMLENBQVdILG9CQUFYO0FBRk87QUFGUCxLQUFQO0FBT0Q7O0FBakRnRCIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIHByZXR0aWVyL3ByZXR0aWVyICovXG5pbXBvcnQge1xuICAgIENvbW1vblBhZ2UsXG4gICAgU2lnYWFGb3JtLFxuICAgIENvbW1vblNpZ2FhUGFnZSxcbiAgICBTaWdhYVBhZ2VDb25zdHJ1Y3RvclxuICB9IGZyb20gJ0BzZXNzaW9uL3NpZ2FhLXBhZ2UnO1xuICBpbXBvcnQgeyBVUkwgfSBmcm9tICd1cmwnO1xuICBcbiAgLyoqXG4gICAqIEBjYXRlZ29yeSBJbnRlcm5hbFxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBVRkZTUGFnZSBleHRlbmRzIENvbW1vblBhZ2Uge1xuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHRoZSBqYXZhc2NyaXB0IGZ1bmN0aW9uIEpTRkNMSlMgZnJvbSB0aGUgcGFnZSxcbiAgICAgKiB0aGlzIGZ1bmN0aW9uIG9uIHRoZSBwYWdlIHJlZGlyZWN0cyB0aGUgdXNlciB0byBhbm90aGVyXG4gICAgICogcGFnZSB1c2luZyB0aGUgUE9TVCBtZXRob2QsIG9mdGVuIHRoaXMgZnVuY3Rpb24gaXMgaW5cbiAgICAgKiB0aGUgb25jbGljayBhdHRyaWJ1dGUgaW4gc29tZSBlbGVtZW50LlxuICAgICAqIEBwYXJhbSBqYXZhU2NyaXB0Q29kZVxuICAgICAqIEByZXR1cm5zIE9iamVjdCB3aXRoIFVSTCBhY3Rpb24gYW5kIFBPU1QgdmFsdWVzIGVxdWl2YWxlbnQgdG8gZnVuY3Rpb25cbiAgICAgKi9cbiAgICBwYXJzZUpTRkNMSlMoamF2YVNjcmlwdENvZGU6IHN0cmluZyk6IFNpZ2FhRm9ybTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIFJlc3BvbnNlIHBhZ2Ugb2Ygc2lnYWEuXG4gICAqIEBjYXRlZ29yeSBJbnRlcm5hbFxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIFNpZ2FhUGFnZVVGRlMgZXh0ZW5kcyBDb21tb25TaWdhYVBhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IFNpZ2FhUGFnZUNvbnN0cnVjdG9yKSB7XG4gICAgICBzdXBlcihvcHRpb25zKTtcbiAgICB9XG4gIFxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0ZG9jXG4gICAgICovXG4gICAgcGFyc2VKU0ZDTEpTKGphdmFTY3JpcHRDb2RlOiBzdHJpbmcpOiBTaWdhYUZvcm0ge1xuICAgICAgaWYgKCFqYXZhU2NyaXB0Q29kZS5pbmNsdWRlcygnZ2V0RWxlbWVudEJ5SWQnKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTSUdBQTogRm9ybSBub3QgZm91bmQuJyk7XG4gIFxuICAgICAgY29uc3QgZm9ybVF1ZXJ5ID0gamF2YVNjcmlwdENvZGUubWF0Y2goXG4gICAgICAgIC9kb2N1bWVudFxcLmdldEVsZW1lbnRCeUlkXFwoJyhcXHcrKSdcXCkvXG4gICAgICApO1xuICAgICAgaWYgKCFmb3JtUXVlcnkpIHRocm93IG5ldyBFcnJvcignU0lHQUE6IEZvcm0gd2l0aG91dCBpZC4nKTtcbiAgXG4gICAgICBjb25zdCBmb3JtRWwgPSB0aGlzLiQoYCMke2Zvcm1RdWVyeVsxXX1gKTtcbiAgICAgIGlmICghZm9ybUVsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU0lHQUE6IEZvcm0gbm90IGZvdW5kLicpO1xuICAgICAgfVxuICBcbiAgICAgIGNvbnN0IGZvcm1BY3Rpb24gPSBmb3JtRWwuYXR0cignYWN0aW9uJyk7XG4gICAgICBpZiAoZm9ybUFjdGlvbiA9PT0gdW5kZWZpbmVkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NJR0FBOiBGb3JtIHdpdGhvdXQgYWN0aW9uLicpO1xuICBcbiAgICAgIGNvbnN0IGFjdGlvbiA9IG5ldyBVUkwoZm9ybUFjdGlvbiwgdGhpcy51cmwpO1xuICAgICAgY29uc3QgcG9zdFZhbHVlczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuICBcbiAgICAgIGZvcm1FbC5maW5kKFwiaW5wdXQ6bm90KFt0eXBlPSdzdWJtaXQnXSlcIikuZWFjaCgoXywgZWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCBuYW1lID0gdGhpcy4kKGVsZW1lbnQpLmF0dHIoJ25hbWUnKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLiQoZWxlbWVudCkudmFsKCk7XG4gICAgICAgIGlmIChuYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBwb3N0VmFsdWVzW25hbWVdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICBcbiAgICAgIGNvbnN0IGZvcm1Qb3N0VmFsdWVzU3RyaW5nID0gYHske2phdmFTY3JpcHRDb2RlXG4gICAgICAgIC5yZXBsYWNlKC9pZihbXFxTXFxzXSo/KSx7fH0sKFtcXFNcXHNdKj8pZmFsc2UvZ20sICcnKVxuICAgICAgICAucmVwbGFjZSgvXCIvZ20sICdcXFxcXCInKVxuICAgICAgICAucmVwbGFjZSgvJy9nbSwgJ1wiJyl9fWA7XG4gIFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBwb3N0VmFsdWVzOiB7XG4gICAgICAgICAgLi4ucG9zdFZhbHVlcyxcbiAgICAgICAgICAuLi5KU09OLnBhcnNlKGZvcm1Qb3N0VmFsdWVzU3RyaW5nKVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfVxuICAiXX0=