"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SigaaPageUNB = void 0;

require("source-map-support/register");

var _sigaaPage = require("../sigaa-page");

var _url = require("url");

/**
 * Response page of sigaa.
 * @category Internal
 */
class SigaaPageUNB extends _sigaaPage.CommonSigaaPage {
  constructor(options) {
    super(options);
  }
  /**
   * @inheritdoc
   */


  parseJSFCLJS(javaScriptCode) {
    if (!javaScriptCode.includes('getElementById')) throw new Error('SIGAA: Form not found.');
    const formQuery = javaScriptCode.match(/document\.getElementById\('(\w+)'\)/);
    if (!formQuery) throw new Error('SIGAA: Form without id.');
    const formEl = this.$(`#${formQuery[1]}`);

    if (!formEl) {
      throw new Error('SIGAA: Form not found.');
    }

    const formAction = formEl.attr('action');
    if (formAction === undefined) throw new Error('SIGAA: Form without action.');
    const action = new _url.URL(formAction, this.url);
    const postValues = {};
    formEl.find("input:not([type='submit'])").each((_, element) => {
      const name = this.$(element).attr('name');
      const value = this.$(element).val();

      if (name !== undefined) {
        postValues[name] = value;
      }
    });
    const formPostValues = javaScriptCode.match(/jsfcljs\s*\(\s*document\.getElementById\s*\(\s*'[^']+'\s*\)\s*,\s*({[^}]+})\s*,\s*'([^']*)'\s*\)/);
    if (!formPostValues) throw new Error('SIGAA: Form without post values.');
    const formPostValuesString = formPostValues[1].replace(/'/gm, '"');
    return {
      action,
      postValues: { ...postValues,
        ...JSON.parse(formPostValuesString)
      }
    };
  }

}

exports.SigaaPageUNB = SigaaPageUNB;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZXNzaW9uL3BhZ2Uvc2lnYWEtcGFnZS11bmIudHMiXSwibmFtZXMiOlsiU2lnYWFQYWdlVU5CIiwiQ29tbW9uU2lnYWFQYWdlIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwicGFyc2VKU0ZDTEpTIiwiamF2YVNjcmlwdENvZGUiLCJpbmNsdWRlcyIsIkVycm9yIiwiZm9ybVF1ZXJ5IiwibWF0Y2giLCJmb3JtRWwiLCIkIiwiZm9ybUFjdGlvbiIsImF0dHIiLCJ1bmRlZmluZWQiLCJhY3Rpb24iLCJVUkwiLCJ1cmwiLCJwb3N0VmFsdWVzIiwiZmluZCIsImVhY2giLCJfIiwiZWxlbWVudCIsIm5hbWUiLCJ2YWx1ZSIsInZhbCIsImZvcm1Qb3N0VmFsdWVzIiwiZm9ybVBvc3RWYWx1ZXNTdHJpbmciLCJyZXBsYWNlIiwiSlNPTiIsInBhcnNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFNQTs7QUFpQkE7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQSxZQUFOLFNBQTJCQywwQkFBM0IsQ0FBMkM7QUFDaERDLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFnQztBQUN6QyxVQUFNQSxPQUFOO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7OztBQUNFQyxFQUFBQSxZQUFZLENBQUNDLGNBQUQsRUFBb0M7QUFDOUMsUUFBSSxDQUFDQSxjQUFjLENBQUNDLFFBQWYsQ0FBd0IsZ0JBQXhCLENBQUwsRUFDRSxNQUFNLElBQUlDLEtBQUosQ0FBVSx3QkFBVixDQUFOO0FBRUYsVUFBTUMsU0FBUyxHQUFHSCxjQUFjLENBQUNJLEtBQWYsQ0FDaEIscUNBRGdCLENBQWxCO0FBR0EsUUFBSSxDQUFDRCxTQUFMLEVBQWdCLE1BQU0sSUFBSUQsS0FBSixDQUFVLHlCQUFWLENBQU47QUFFaEIsVUFBTUcsTUFBTSxHQUFHLEtBQUtDLENBQUwsQ0FBUSxJQUFHSCxTQUFTLENBQUMsQ0FBRCxDQUFJLEVBQXhCLENBQWY7O0FBQ0EsUUFBSSxDQUFDRSxNQUFMLEVBQWE7QUFDWCxZQUFNLElBQUlILEtBQUosQ0FBVSx3QkFBVixDQUFOO0FBQ0Q7O0FBRUQsVUFBTUssVUFBVSxHQUFHRixNQUFNLENBQUNHLElBQVAsQ0FBWSxRQUFaLENBQW5CO0FBQ0EsUUFBSUQsVUFBVSxLQUFLRSxTQUFuQixFQUNFLE1BQU0sSUFBSVAsS0FBSixDQUFVLDZCQUFWLENBQU47QUFFRixVQUFNUSxNQUFNLEdBQUcsSUFBSUMsUUFBSixDQUFRSixVQUFSLEVBQW9CLEtBQUtLLEdBQXpCLENBQWY7QUFDQSxVQUFNQyxVQUFrQyxHQUFHLEVBQTNDO0FBRUFSLElBQUFBLE1BQU0sQ0FBQ1MsSUFBUCxDQUFZLDRCQUFaLEVBQTBDQyxJQUExQyxDQUErQyxDQUFDQyxDQUFELEVBQUlDLE9BQUosS0FBZ0I7QUFDN0QsWUFBTUMsSUFBSSxHQUFHLEtBQUtaLENBQUwsQ0FBT1csT0FBUCxFQUFnQlQsSUFBaEIsQ0FBcUIsTUFBckIsQ0FBYjtBQUNBLFlBQU1XLEtBQUssR0FBRyxLQUFLYixDQUFMLENBQU9XLE9BQVAsRUFBZ0JHLEdBQWhCLEVBQWQ7O0FBQ0EsVUFBSUYsSUFBSSxLQUFLVCxTQUFiLEVBQXdCO0FBQ3RCSSxRQUFBQSxVQUFVLENBQUNLLElBQUQsQ0FBVixHQUFtQkMsS0FBbkI7QUFDRDtBQUNGLEtBTkQ7QUFRQSxVQUFNRSxjQUFjLEdBQUdyQixjQUFjLENBQUNJLEtBQWYsQ0FDckIsa0dBRHFCLENBQXZCO0FBR0EsUUFBSSxDQUFDaUIsY0FBTCxFQUFxQixNQUFNLElBQUluQixLQUFKLENBQVUsa0NBQVYsQ0FBTjtBQUNyQixVQUFNb0Isb0JBQW9CLEdBQUdELGNBQWMsQ0FBQyxDQUFELENBQWQsQ0FBa0JFLE9BQWxCLENBQTBCLEtBQTFCLEVBQWlDLEdBQWpDLENBQTdCO0FBQ0EsV0FBTztBQUNMYixNQUFBQSxNQURLO0FBRUxHLE1BQUFBLFVBQVUsRUFBRSxFQUNWLEdBQUdBLFVBRE87QUFFVixXQUFHVyxJQUFJLENBQUNDLEtBQUwsQ0FBV0gsb0JBQVg7QUFGTztBQUZQLEtBQVA7QUFPRDs7QUFqRCtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tbW9uUGFnZSxcbiAgU2lnYWFGb3JtLFxuICBDb21tb25TaWdhYVBhZ2UsXG4gIFNpZ2FhUGFnZUNvbnN0cnVjdG9yXG59IGZyb20gJ0BzZXNzaW9uL3NpZ2FhLXBhZ2UnO1xuaW1wb3J0IHsgVVJMIH0gZnJvbSAndXJsJztcblxuLyoqXG4gKiBAY2F0ZWdvcnkgSW50ZXJuYWxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBVTkJQYWdlIGV4dGVuZHMgQ29tbW9uUGFnZSB7XG4gIC8qKlxuICAgKiBFeHRyYWN0cyB0aGUgamF2YXNjcmlwdCBmdW5jdGlvbiBKU0ZDTEpTIGZyb20gdGhlIHBhZ2UsXG4gICAqIHRoaXMgZnVuY3Rpb24gb24gdGhlIHBhZ2UgcmVkaXJlY3RzIHRoZSB1c2VyIHRvIGFub3RoZXJcbiAgICogcGFnZSB1c2luZyB0aGUgUE9TVCBtZXRob2QsIG9mdGVuIHRoaXMgZnVuY3Rpb24gaXMgaW5cbiAgICogdGhlIG9uY2xpY2sgYXR0cmlidXRlIGluIHNvbWUgZWxlbWVudC5cbiAgICogQHBhcmFtIGphdmFTY3JpcHRDb2RlXG4gICAqIEByZXR1cm5zIE9iamVjdCB3aXRoIFVSTCBhY3Rpb24gYW5kIFBPU1QgdmFsdWVzIGVxdWl2YWxlbnQgdG8gZnVuY3Rpb25cbiAgICovXG4gIHBhcnNlSlNGQ0xKUyhqYXZhU2NyaXB0Q29kZTogc3RyaW5nKTogU2lnYWFGb3JtO1xufVxuXG4vKipcbiAqIFJlc3BvbnNlIHBhZ2Ugb2Ygc2lnYWEuXG4gKiBAY2F0ZWdvcnkgSW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNsYXNzIFNpZ2FhUGFnZVVOQiBleHRlbmRzIENvbW1vblNpZ2FhUGFnZSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IFNpZ2FhUGFnZUNvbnN0cnVjdG9yKSB7XG4gICAgc3VwZXIob3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXRkb2NcbiAgICovXG4gIHBhcnNlSlNGQ0xKUyhqYXZhU2NyaXB0Q29kZTogc3RyaW5nKTogU2lnYWFGb3JtIHtcbiAgICBpZiAoIWphdmFTY3JpcHRDb2RlLmluY2x1ZGVzKCdnZXRFbGVtZW50QnlJZCcpKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTSUdBQTogRm9ybSBub3QgZm91bmQuJyk7XG5cbiAgICBjb25zdCBmb3JtUXVlcnkgPSBqYXZhU2NyaXB0Q29kZS5tYXRjaChcbiAgICAgIC9kb2N1bWVudFxcLmdldEVsZW1lbnRCeUlkXFwoJyhcXHcrKSdcXCkvXG4gICAgKTtcbiAgICBpZiAoIWZvcm1RdWVyeSkgdGhyb3cgbmV3IEVycm9yKCdTSUdBQTogRm9ybSB3aXRob3V0IGlkLicpO1xuXG4gICAgY29uc3QgZm9ybUVsID0gdGhpcy4kKGAjJHtmb3JtUXVlcnlbMV19YCk7XG4gICAgaWYgKCFmb3JtRWwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignU0lHQUE6IEZvcm0gbm90IGZvdW5kLicpO1xuICAgIH1cblxuICAgIGNvbnN0IGZvcm1BY3Rpb24gPSBmb3JtRWwuYXR0cignYWN0aW9uJyk7XG4gICAgaWYgKGZvcm1BY3Rpb24gPT09IHVuZGVmaW5lZClcbiAgICAgIHRocm93IG5ldyBFcnJvcignU0lHQUE6IEZvcm0gd2l0aG91dCBhY3Rpb24uJyk7XG5cbiAgICBjb25zdCBhY3Rpb24gPSBuZXcgVVJMKGZvcm1BY3Rpb24sIHRoaXMudXJsKTtcbiAgICBjb25zdCBwb3N0VmFsdWVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge307XG5cbiAgICBmb3JtRWwuZmluZChcImlucHV0Om5vdChbdHlwZT0nc3VibWl0J10pXCIpLmVhY2goKF8sIGVsZW1lbnQpID0+IHtcbiAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLiQoZWxlbWVudCkuYXR0cignbmFtZScpO1xuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLiQoZWxlbWVudCkudmFsKCk7XG4gICAgICBpZiAobmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBvc3RWYWx1ZXNbbmFtZV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IGZvcm1Qb3N0VmFsdWVzID0gamF2YVNjcmlwdENvZGUubWF0Y2goXG4gICAgICAvanNmY2xqc1xccypcXChcXHMqZG9jdW1lbnRcXC5nZXRFbGVtZW50QnlJZFxccypcXChcXHMqJ1teJ10rJ1xccypcXClcXHMqLFxccyooe1tefV0rfSlcXHMqLFxccyonKFteJ10qKSdcXHMqXFwpL1xuICAgICk7XG4gICAgaWYgKCFmb3JtUG9zdFZhbHVlcykgdGhyb3cgbmV3IEVycm9yKCdTSUdBQTogRm9ybSB3aXRob3V0IHBvc3QgdmFsdWVzLicpO1xuICAgIGNvbnN0IGZvcm1Qb3N0VmFsdWVzU3RyaW5nID0gZm9ybVBvc3RWYWx1ZXNbMV0ucmVwbGFjZSgvJy9nbSwgJ1wiJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFjdGlvbixcbiAgICAgIHBvc3RWYWx1ZXM6IHtcbiAgICAgICAgLi4ucG9zdFZhbHVlcyxcbiAgICAgICAgLi4uSlNPTi5wYXJzZShmb3JtUG9zdFZhbHVlc1N0cmluZylcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG4iXX0=