"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SigaaPageUFPB = void 0;

require("source-map-support/register");

var _sigaaPage = require("../sigaa-page");

var _url = require("url");

/**
 * Response page of sigaa.
 * @category Internal
 */
class SigaaPageUFPB extends _sigaaPage.CommonSigaaPage {
  constructor(options) {
    super(options);
  }
  /**
   * @inheritdoc
   */


  parseJSFCLJS(javaScriptCode) {
    if (!javaScriptCode.includes('getElementById')) throw new Error('SIGAA: Form not found.');
    const formQuery = javaScriptCode.match(/document\.getElementById\('(\w+)'\)/);
    if (!formQuery) throw new Error('SIGAA: Form without id.');
    const formEl = this.$(`#${formQuery[1]}`);

    if (!formEl) {
      throw new Error('SIGAA: Form not found.');
    }

    const formAction = formEl.attr('action');
    if (formAction === undefined) throw new Error('SIGAA: Form without action.');
    const action = new _url.URL(formAction, this.url);
    const postValues = {};
    formEl.find("input:not([type='submit'])").each((_, element) => {
      const name = this.$(element).attr('name');
      const value = this.$(element).val();

      if (name !== undefined) {
        postValues[name] = value;
      }
    });
    const formPostValuesString = `{${javaScriptCode.replace(/if([\S\s]*?),{|},([\S\s]*?)false/gm, '').replace(/"/gm, '\\"').replace(/'/gm, '"')}}`;
    return {
      action,
      postValues: { ...postValues,
        ...JSON.parse(formPostValuesString)
      }
    };
  }

}

exports.SigaaPageUFPB = SigaaPageUFPB;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZXNzaW9uL3BhZ2Uvc2lnYWEtcGFnZS11ZnBiLnRzIl0sIm5hbWVzIjpbIlNpZ2FhUGFnZVVGUEIiLCJDb21tb25TaWdhYVBhZ2UiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJwYXJzZUpTRkNMSlMiLCJqYXZhU2NyaXB0Q29kZSIsImluY2x1ZGVzIiwiRXJyb3IiLCJmb3JtUXVlcnkiLCJtYXRjaCIsImZvcm1FbCIsIiQiLCJmb3JtQWN0aW9uIiwiYXR0ciIsInVuZGVmaW5lZCIsImFjdGlvbiIsIlVSTCIsInVybCIsInBvc3RWYWx1ZXMiLCJmaW5kIiwiZWFjaCIsIl8iLCJlbGVtZW50IiwibmFtZSIsInZhbHVlIiwidmFsIiwiZm9ybVBvc3RWYWx1ZXNTdHJpbmciLCJyZXBsYWNlIiwiSlNPTiIsInBhcnNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFNQTs7QUFpQkE7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQSxhQUFOLFNBQTRCQywwQkFBNUIsQ0FBNEM7QUFDakRDLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFnQztBQUN6QyxVQUFNQSxPQUFOO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7OztBQUNFQyxFQUFBQSxZQUFZLENBQUNDLGNBQUQsRUFBb0M7QUFDOUMsUUFBSSxDQUFDQSxjQUFjLENBQUNDLFFBQWYsQ0FBd0IsZ0JBQXhCLENBQUwsRUFDRSxNQUFNLElBQUlDLEtBQUosQ0FBVSx3QkFBVixDQUFOO0FBRUYsVUFBTUMsU0FBUyxHQUFHSCxjQUFjLENBQUNJLEtBQWYsQ0FDaEIscUNBRGdCLENBQWxCO0FBR0EsUUFBSSxDQUFDRCxTQUFMLEVBQWdCLE1BQU0sSUFBSUQsS0FBSixDQUFVLHlCQUFWLENBQU47QUFFaEIsVUFBTUcsTUFBTSxHQUFHLEtBQUtDLENBQUwsQ0FBUSxJQUFHSCxTQUFTLENBQUMsQ0FBRCxDQUFJLEVBQXhCLENBQWY7O0FBQ0EsUUFBSSxDQUFDRSxNQUFMLEVBQWE7QUFDWCxZQUFNLElBQUlILEtBQUosQ0FBVSx3QkFBVixDQUFOO0FBQ0Q7O0FBRUQsVUFBTUssVUFBVSxHQUFHRixNQUFNLENBQUNHLElBQVAsQ0FBWSxRQUFaLENBQW5CO0FBQ0EsUUFBSUQsVUFBVSxLQUFLRSxTQUFuQixFQUNFLE1BQU0sSUFBSVAsS0FBSixDQUFVLDZCQUFWLENBQU47QUFFRixVQUFNUSxNQUFNLEdBQUcsSUFBSUMsUUFBSixDQUFRSixVQUFSLEVBQW9CLEtBQUtLLEdBQXpCLENBQWY7QUFDQSxVQUFNQyxVQUFrQyxHQUFHLEVBQTNDO0FBRUFSLElBQUFBLE1BQU0sQ0FBQ1MsSUFBUCxDQUFZLDRCQUFaLEVBQTBDQyxJQUExQyxDQUErQyxDQUFDQyxDQUFELEVBQUlDLE9BQUosS0FBZ0I7QUFDN0QsWUFBTUMsSUFBSSxHQUFHLEtBQUtaLENBQUwsQ0FBT1csT0FBUCxFQUFnQlQsSUFBaEIsQ0FBcUIsTUFBckIsQ0FBYjtBQUNBLFlBQU1XLEtBQUssR0FBRyxLQUFLYixDQUFMLENBQU9XLE9BQVAsRUFBZ0JHLEdBQWhCLEVBQWQ7O0FBQ0EsVUFBSUYsSUFBSSxLQUFLVCxTQUFiLEVBQXdCO0FBQ3RCSSxRQUFBQSxVQUFVLENBQUNLLElBQUQsQ0FBVixHQUFtQkMsS0FBbkI7QUFDRDtBQUNGLEtBTkQ7QUFRQSxVQUFNRSxvQkFBb0IsR0FBSSxJQUFHckIsY0FBYyxDQUM1Q3NCLE9BRDhCLENBQ3RCLG9DQURzQixFQUNnQixFQURoQixFQUU5QkEsT0FGOEIsQ0FFdEIsS0FGc0IsRUFFZixLQUZlLEVBRzlCQSxPQUg4QixDQUd0QixLQUhzQixFQUdmLEdBSGUsQ0FHVixHQUh2QjtBQUtBLFdBQU87QUFDTFosTUFBQUEsTUFESztBQUVMRyxNQUFBQSxVQUFVLEVBQUUsRUFDVixHQUFHQSxVQURPO0FBRVYsV0FBR1UsSUFBSSxDQUFDQyxLQUFMLENBQVdILG9CQUFYO0FBRk87QUFGUCxLQUFQO0FBT0Q7O0FBakRnRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbW1vblBhZ2UsXG4gIFNpZ2FhRm9ybSxcbiAgQ29tbW9uU2lnYWFQYWdlLFxuICBTaWdhYVBhZ2VDb25zdHJ1Y3RvclxufSBmcm9tICdAc2Vzc2lvbi9zaWdhYS1wYWdlJztcbmltcG9ydCB7IFVSTCB9IGZyb20gJ3VybCc7XG5cbi8qKlxuICogQGNhdGVnb3J5IEludGVybmFsXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVUZQQlBhZ2UgZXh0ZW5kcyBDb21tb25QYWdlIHtcbiAgLyoqXG4gICAqIEV4dHJhY3RzIHRoZSBqYXZhc2NyaXB0IGZ1bmN0aW9uIEpTRkNMSlMgZnJvbSB0aGUgcGFnZSxcbiAgICogdGhpcyBmdW5jdGlvbiBvbiB0aGUgcGFnZSByZWRpcmVjdHMgdGhlIHVzZXIgdG8gYW5vdGhlclxuICAgKiBwYWdlIHVzaW5nIHRoZSBQT1NUIG1ldGhvZCwgb2Z0ZW4gdGhpcyBmdW5jdGlvbiBpcyBpblxuICAgKiB0aGUgb25jbGljayBhdHRyaWJ1dGUgaW4gc29tZSBlbGVtZW50LlxuICAgKiBAcGFyYW0gamF2YVNjcmlwdENvZGVcbiAgICogQHJldHVybnMgT2JqZWN0IHdpdGggVVJMIGFjdGlvbiBhbmQgUE9TVCB2YWx1ZXMgZXF1aXZhbGVudCB0byBmdW5jdGlvblxuICAgKi9cbiAgcGFyc2VKU0ZDTEpTKGphdmFTY3JpcHRDb2RlOiBzdHJpbmcpOiBTaWdhYUZvcm07XG59XG5cbi8qKlxuICogUmVzcG9uc2UgcGFnZSBvZiBzaWdhYS5cbiAqIEBjYXRlZ29yeSBJbnRlcm5hbFxuICovXG5leHBvcnQgY2xhc3MgU2lnYWFQYWdlVUZQQiBleHRlbmRzIENvbW1vblNpZ2FhUGFnZSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IFNpZ2FhUGFnZUNvbnN0cnVjdG9yKSB7XG4gICAgc3VwZXIob3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXRkb2NcbiAgICovXG4gIHBhcnNlSlNGQ0xKUyhqYXZhU2NyaXB0Q29kZTogc3RyaW5nKTogU2lnYWFGb3JtIHtcbiAgICBpZiAoIWphdmFTY3JpcHRDb2RlLmluY2x1ZGVzKCdnZXRFbGVtZW50QnlJZCcpKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTSUdBQTogRm9ybSBub3QgZm91bmQuJyk7XG5cbiAgICBjb25zdCBmb3JtUXVlcnkgPSBqYXZhU2NyaXB0Q29kZS5tYXRjaChcbiAgICAgIC9kb2N1bWVudFxcLmdldEVsZW1lbnRCeUlkXFwoJyhcXHcrKSdcXCkvXG4gICAgKTtcbiAgICBpZiAoIWZvcm1RdWVyeSkgdGhyb3cgbmV3IEVycm9yKCdTSUdBQTogRm9ybSB3aXRob3V0IGlkLicpO1xuXG4gICAgY29uc3QgZm9ybUVsID0gdGhpcy4kKGAjJHtmb3JtUXVlcnlbMV19YCk7XG4gICAgaWYgKCFmb3JtRWwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignU0lHQUE6IEZvcm0gbm90IGZvdW5kLicpO1xuICAgIH1cblxuICAgIGNvbnN0IGZvcm1BY3Rpb24gPSBmb3JtRWwuYXR0cignYWN0aW9uJyk7XG4gICAgaWYgKGZvcm1BY3Rpb24gPT09IHVuZGVmaW5lZClcbiAgICAgIHRocm93IG5ldyBFcnJvcignU0lHQUE6IEZvcm0gd2l0aG91dCBhY3Rpb24uJyk7XG5cbiAgICBjb25zdCBhY3Rpb24gPSBuZXcgVVJMKGZvcm1BY3Rpb24sIHRoaXMudXJsKTtcbiAgICBjb25zdCBwb3N0VmFsdWVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge307XG5cbiAgICBmb3JtRWwuZmluZChcImlucHV0Om5vdChbdHlwZT0nc3VibWl0J10pXCIpLmVhY2goKF8sIGVsZW1lbnQpID0+IHtcbiAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLiQoZWxlbWVudCkuYXR0cignbmFtZScpO1xuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLiQoZWxlbWVudCkudmFsKCk7XG4gICAgICBpZiAobmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBvc3RWYWx1ZXNbbmFtZV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IGZvcm1Qb3N0VmFsdWVzU3RyaW5nID0gYHske2phdmFTY3JpcHRDb2RlXG4gICAgICAucmVwbGFjZSgvaWYoW1xcU1xcc10qPykse3x9LChbXFxTXFxzXSo/KWZhbHNlL2dtLCAnJylcbiAgICAgIC5yZXBsYWNlKC9cIi9nbSwgJ1xcXFxcIicpXG4gICAgICAucmVwbGFjZSgvJy9nbSwgJ1wiJyl9fWA7XG5cbiAgICByZXR1cm4ge1xuICAgICAgYWN0aW9uLFxuICAgICAgcG9zdFZhbHVlczoge1xuICAgICAgICAuLi5wb3N0VmFsdWVzLFxuICAgICAgICAuLi5KU09OLnBhcnNlKGZvcm1Qb3N0VmFsdWVzU3RyaW5nKVxuICAgICAgfVxuICAgIH07XG4gIH1cbn1cbiJdfQ==