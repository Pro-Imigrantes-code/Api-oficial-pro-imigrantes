"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SigaaHTTPWithBond = void 0;

require("source-map-support/register");

/**
 * Implements sigaa bond in HTTP request class.
 *
 * @param http http instamce implementation
 * @param bondController A instance of BondController to read current bond
 * @param bondSwitchUrl url to switch bond
 *
 * @category Internal
 */
class SigaaHTTPWithBond {
  constructor(http, bondController, pageCacheWithBond, bondSwitchUrl) {
    this.http = http;
    this.bondController = bondController;
    this.pageCacheWithBond = pageCacheWithBond;
    this.bondSwitchUrl = bondSwitchUrl;
  }
  /**
   * Verify if current bond is correct.
   * Otherwise, switch bond
   */


  async verifyIfBondIsCorrect() {
    if (this.bondSwitchUrl !== this.bondController.currentBond) {
      return this.switchBond();
    }
  }
  /**
   * Switch bond
   */


  async switchBond() {
    if (this.bondSwitchUrl) {
      const page = await this.http.get(this.bondSwitchUrl.href, {
        noCache: true
      });
      const finalPage = await this.http.followAllRedirect(page, {
        noCache: true
      });
      if (finalPage.statusCode !== 200) throw new Error('SIGAA: Could not switch bond.');
      this.bondController.currentBond = this.bondSwitchUrl;
      this.pageCacheWithBond.setCurrentBond(this.bondSwitchUrl);
    }
  }
  /**
   * @inheritdoc
   */


  async postMultipart(path, formData, options) {
    await this.verifyIfBondIsCorrect();
    return this.http.postMultipart(path, formData, options);
  }
  /**
   * @inheritdoc
   */


  async post(path, postValues, options) {
    await this.verifyIfBondIsCorrect();
    return this.http.post(path, postValues, options);
  }

  async get(path, options) {
    await this.verifyIfBondIsCorrect();
    return this.http.get(path, options);
  }
  /**
   * @inheritdoc
   */


  async downloadFileByGet(urlPath, basepath, callback) {
    await this.verifyIfBondIsCorrect();
    return this.http.downloadFileByGet(urlPath, basepath, callback);
  }
  /**
   * @inheritdoc
   */


  async downloadFileByPost(urlPath, postValues, basepath, callback) {
    await this.verifyIfBondIsCorrect();
    return this.http.downloadFileByPost(urlPath, postValues, basepath, callback);
  }
  /**
   * @inheritdoc
   */


  async followAllRedirect(page, options) {
    await this.verifyIfBondIsCorrect();
    return this.http.followAllRedirect(page, options);
  }
  /**
   * @inheritdoc
   */


  closeSession() {
    this.http.closeSession();
  }

}

exports.SigaaHTTPWithBond = SigaaHTTPWithBond;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXNzaW9uL3NpZ2FhLWh0dHAtd2l0aC1ib25kLnRzIl0sIm5hbWVzIjpbIlNpZ2FhSFRUUFdpdGhCb25kIiwiY29uc3RydWN0b3IiLCJodHRwIiwiYm9uZENvbnRyb2xsZXIiLCJwYWdlQ2FjaGVXaXRoQm9uZCIsImJvbmRTd2l0Y2hVcmwiLCJ2ZXJpZnlJZkJvbmRJc0NvcnJlY3QiLCJjdXJyZW50Qm9uZCIsInN3aXRjaEJvbmQiLCJwYWdlIiwiZ2V0IiwiaHJlZiIsIm5vQ2FjaGUiLCJmaW5hbFBhZ2UiLCJmb2xsb3dBbGxSZWRpcmVjdCIsInN0YXR1c0NvZGUiLCJFcnJvciIsInNldEN1cnJlbnRCb25kIiwicG9zdE11bHRpcGFydCIsInBhdGgiLCJmb3JtRGF0YSIsIm9wdGlvbnMiLCJwb3N0IiwicG9zdFZhbHVlcyIsImRvd25sb2FkRmlsZUJ5R2V0IiwidXJsUGF0aCIsImJhc2VwYXRoIiwiY2FsbGJhY2siLCJkb3dubG9hZEZpbGVCeVBvc3QiLCJjbG9zZVNlc3Npb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLE1BQU1BLGlCQUFOLENBQXdDO0FBQzdDQyxFQUFBQSxXQUFXLENBQ0RDLElBREMsRUFFREMsY0FGQyxFQUdEQyxpQkFIQyxFQUlEQyxhQUpDLEVBS1Q7QUFBQSxTQUpRSCxJQUlSLEdBSlFBLElBSVI7QUFBQSxTQUhRQyxjQUdSLEdBSFFBLGNBR1I7QUFBQSxTQUZRQyxpQkFFUixHQUZRQSxpQkFFUjtBQUFBLFNBRFFDLGFBQ1IsR0FEUUEsYUFDUjtBQUFFO0FBRUo7QUFDRjtBQUNBO0FBQ0E7OztBQUNxQyxRQUFyQkMscUJBQXFCLEdBQWtCO0FBQ25ELFFBQUksS0FBS0QsYUFBTCxLQUF1QixLQUFLRixjQUFMLENBQW9CSSxXQUEvQyxFQUE0RDtBQUMxRCxhQUFPLEtBQUtDLFVBQUwsRUFBUDtBQUNEO0FBQ0Y7QUFFRDtBQUNGO0FBQ0E7OztBQUMwQixRQUFWQSxVQUFVLEdBQWtCO0FBQ3hDLFFBQUksS0FBS0gsYUFBVCxFQUF3QjtBQUN0QixZQUFNSSxJQUFJLEdBQUcsTUFBTSxLQUFLUCxJQUFMLENBQVVRLEdBQVYsQ0FBYyxLQUFLTCxhQUFMLENBQW1CTSxJQUFqQyxFQUF1QztBQUN4REMsUUFBQUEsT0FBTyxFQUFFO0FBRCtDLE9BQXZDLENBQW5CO0FBR0EsWUFBTUMsU0FBUyxHQUFHLE1BQU0sS0FBS1gsSUFBTCxDQUFVWSxpQkFBVixDQUE0QkwsSUFBNUIsRUFBa0M7QUFDeERHLFFBQUFBLE9BQU8sRUFBRTtBQUQrQyxPQUFsQyxDQUF4QjtBQUdBLFVBQUlDLFNBQVMsQ0FBQ0UsVUFBVixLQUF5QixHQUE3QixFQUNFLE1BQU0sSUFBSUMsS0FBSixDQUFVLCtCQUFWLENBQU47QUFDRixXQUFLYixjQUFMLENBQW9CSSxXQUFwQixHQUFrQyxLQUFLRixhQUF2QztBQUNBLFdBQUtELGlCQUFMLENBQXVCYSxjQUF2QixDQUFzQyxLQUFLWixhQUEzQztBQUNEO0FBQ0Y7QUFFRDtBQUNGO0FBQ0E7OztBQUNxQixRQUFiYSxhQUFhLENBQ2pCQyxJQURpQixFQUVqQkMsUUFGaUIsRUFHakJDLE9BSGlCLEVBSUY7QUFDZixVQUFNLEtBQUtmLHFCQUFMLEVBQU47QUFDQSxXQUFPLEtBQUtKLElBQUwsQ0FBVWdCLGFBQVYsQ0FBd0JDLElBQXhCLEVBQThCQyxRQUE5QixFQUF3Q0MsT0FBeEMsQ0FBUDtBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7QUFDWSxRQUFKQyxJQUFJLENBQ1JILElBRFEsRUFFUkksVUFGUSxFQUdSRixPQUhRLEVBSU87QUFDZixVQUFNLEtBQUtmLHFCQUFMLEVBQU47QUFDQSxXQUFPLEtBQUtKLElBQUwsQ0FBVW9CLElBQVYsQ0FBZUgsSUFBZixFQUFxQkksVUFBckIsRUFBaUNGLE9BQWpDLENBQVA7QUFDRDs7QUFFUSxRQUFIWCxHQUFHLENBQUNTLElBQUQsRUFBZUUsT0FBZixFQUE2RDtBQUNwRSxVQUFNLEtBQUtmLHFCQUFMLEVBQU47QUFDQSxXQUFPLEtBQUtKLElBQUwsQ0FBVVEsR0FBVixDQUFjUyxJQUFkLEVBQW9CRSxPQUFwQixDQUFQO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7OztBQUN5QixRQUFqQkcsaUJBQWlCLENBQ3JCQyxPQURxQixFQUVyQkMsUUFGcUIsRUFHckJDLFFBSHFCLEVBSUo7QUFDakIsVUFBTSxLQUFLckIscUJBQUwsRUFBTjtBQUNBLFdBQU8sS0FBS0osSUFBTCxDQUFVc0IsaUJBQVYsQ0FBNEJDLE9BQTVCLEVBQXFDQyxRQUFyQyxFQUErQ0MsUUFBL0MsQ0FBUDtBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7QUFDMEIsUUFBbEJDLGtCQUFrQixDQUN0QkgsT0FEc0IsRUFFdEJGLFVBRnNCLEVBR3RCRyxRQUhzQixFQUl0QkMsUUFKc0IsRUFLTDtBQUNqQixVQUFNLEtBQUtyQixxQkFBTCxFQUFOO0FBQ0EsV0FBTyxLQUFLSixJQUFMLENBQVUwQixrQkFBVixDQUNMSCxPQURLLEVBRUxGLFVBRkssRUFHTEcsUUFISyxFQUlMQyxRQUpLLENBQVA7QUFNRDtBQUVEO0FBQ0Y7QUFDQTs7O0FBQ3lCLFFBQWpCYixpQkFBaUIsQ0FDckJMLElBRHFCLEVBRXJCWSxPQUZxQixFQUdOO0FBQ2YsVUFBTSxLQUFLZixxQkFBTCxFQUFOO0FBQ0EsV0FBTyxLQUFLSixJQUFMLENBQVVZLGlCQUFWLENBQTRCTCxJQUE1QixFQUFrQ1ksT0FBbEMsQ0FBUDtBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7QUFDRVEsRUFBQUEsWUFBWSxHQUFTO0FBQ25CLFNBQUszQixJQUFMLENBQVUyQixZQUFWO0FBQ0Q7O0FBL0c0QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZvcm1EYXRhIH0gZnJvbSAnZm9ybWRhdGEtbm9kZSc7XG5pbXBvcnQgeyBVUkwgfSBmcm9tICd1cmwnO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gJy4vc2lnYWEtcGFnZSc7XG5pbXBvcnQgeyBIVFRQLCBQcm9ncmVzc0NhbGxiYWNrLCBTaWdhYVJlcXVlc3RPcHRpb25zIH0gZnJvbSAnLi9zaWdhYS1odHRwJztcbmltcG9ydCB7IEJvbmRDb250cm9sbGVyIH0gZnJvbSAnLi9zaWdhYS1ib25kLWNvbnRyb2xsZXInO1xuaW1wb3J0IHsgUGFnZUNhY2hlV2l0aEJvbmQgfSBmcm9tICcuL3NpZ2FhLXBhZ2UtY2FjaGUtd2l0aC1ib25kJztcblxuLyoqXG4gKiBJbXBsZW1lbnRzIHNpZ2FhIGJvbmQgaW4gSFRUUCByZXF1ZXN0IGNsYXNzLlxuICpcbiAqIEBwYXJhbSBodHRwIGh0dHAgaW5zdGFtY2UgaW1wbGVtZW50YXRpb25cbiAqIEBwYXJhbSBib25kQ29udHJvbGxlciBBIGluc3RhbmNlIG9mIEJvbmRDb250cm9sbGVyIHRvIHJlYWQgY3VycmVudCBib25kXG4gKiBAcGFyYW0gYm9uZFN3aXRjaFVybCB1cmwgdG8gc3dpdGNoIGJvbmRcbiAqXG4gKiBAY2F0ZWdvcnkgSW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNsYXNzIFNpZ2FhSFRUUFdpdGhCb25kIGltcGxlbWVudHMgSFRUUCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaHR0cDogSFRUUCxcbiAgICBwcml2YXRlIGJvbmRDb250cm9sbGVyOiBCb25kQ29udHJvbGxlcixcbiAgICBwcml2YXRlIHBhZ2VDYWNoZVdpdGhCb25kOiBQYWdlQ2FjaGVXaXRoQm9uZCxcbiAgICBwcml2YXRlIGJvbmRTd2l0Y2hVcmw6IFVSTCB8IG51bGxcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBWZXJpZnkgaWYgY3VycmVudCBib25kIGlzIGNvcnJlY3QuXG4gICAqIE90aGVyd2lzZSwgc3dpdGNoIGJvbmRcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgdmVyaWZ5SWZCb25kSXNDb3JyZWN0KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICh0aGlzLmJvbmRTd2l0Y2hVcmwgIT09IHRoaXMuYm9uZENvbnRyb2xsZXIuY3VycmVudEJvbmQpIHtcbiAgICAgIHJldHVybiB0aGlzLnN3aXRjaEJvbmQoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3dpdGNoIGJvbmRcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgc3dpdGNoQm9uZCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAodGhpcy5ib25kU3dpdGNoVXJsKSB7XG4gICAgICBjb25zdCBwYWdlID0gYXdhaXQgdGhpcy5odHRwLmdldCh0aGlzLmJvbmRTd2l0Y2hVcmwuaHJlZiwge1xuICAgICAgICBub0NhY2hlOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGZpbmFsUGFnZSA9IGF3YWl0IHRoaXMuaHR0cC5mb2xsb3dBbGxSZWRpcmVjdChwYWdlLCB7XG4gICAgICAgIG5vQ2FjaGU6IHRydWVcbiAgICAgIH0pO1xuICAgICAgaWYgKGZpbmFsUGFnZS5zdGF0dXNDb2RlICE9PSAyMDApXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU0lHQUE6IENvdWxkIG5vdCBzd2l0Y2ggYm9uZC4nKTtcbiAgICAgIHRoaXMuYm9uZENvbnRyb2xsZXIuY3VycmVudEJvbmQgPSB0aGlzLmJvbmRTd2l0Y2hVcmw7XG4gICAgICB0aGlzLnBhZ2VDYWNoZVdpdGhCb25kLnNldEN1cnJlbnRCb25kKHRoaXMuYm9uZFN3aXRjaFVybCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0ZG9jXG4gICAqL1xuICBhc3luYyBwb3N0TXVsdGlwYXJ0KFxuICAgIHBhdGg6IHN0cmluZyxcbiAgICBmb3JtRGF0YTogRm9ybURhdGEsXG4gICAgb3B0aW9ucz86IFNpZ2FhUmVxdWVzdE9wdGlvbnNcbiAgKTogUHJvbWlzZTxQYWdlPiB7XG4gICAgYXdhaXQgdGhpcy52ZXJpZnlJZkJvbmRJc0NvcnJlY3QoKTtcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3RNdWx0aXBhcnQocGF0aCwgZm9ybURhdGEsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0ZG9jXG4gICAqL1xuICBhc3luYyBwb3N0KFxuICAgIHBhdGg6IHN0cmluZyxcbiAgICBwb3N0VmFsdWVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LFxuICAgIG9wdGlvbnM/OiBTaWdhYVJlcXVlc3RPcHRpb25zXG4gICk6IFByb21pc2U8UGFnZT4ge1xuICAgIGF3YWl0IHRoaXMudmVyaWZ5SWZCb25kSXNDb3JyZWN0KCk7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHBhdGgsIHBvc3RWYWx1ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgYXN5bmMgZ2V0KHBhdGg6IHN0cmluZywgb3B0aW9ucz86IFNpZ2FhUmVxdWVzdE9wdGlvbnMpOiBQcm9taXNlPFBhZ2U+IHtcbiAgICBhd2FpdCB0aGlzLnZlcmlmeUlmQm9uZElzQ29ycmVjdCgpO1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHBhdGgsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0ZG9jXG4gICAqL1xuICBhc3luYyBkb3dubG9hZEZpbGVCeUdldChcbiAgICB1cmxQYXRoOiBzdHJpbmcsXG4gICAgYmFzZXBhdGg6IHN0cmluZyxcbiAgICBjYWxsYmFjaz86IFByb2dyZXNzQ2FsbGJhY2tcbiAgKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBhd2FpdCB0aGlzLnZlcmlmeUlmQm9uZElzQ29ycmVjdCgpO1xuICAgIHJldHVybiB0aGlzLmh0dHAuZG93bmxvYWRGaWxlQnlHZXQodXJsUGF0aCwgYmFzZXBhdGgsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdGRvY1xuICAgKi9cbiAgYXN5bmMgZG93bmxvYWRGaWxlQnlQb3N0KFxuICAgIHVybFBhdGg6IHN0cmluZyxcbiAgICBwb3N0VmFsdWVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LFxuICAgIGJhc2VwYXRoOiBzdHJpbmcsXG4gICAgY2FsbGJhY2s/OiBQcm9ncmVzc0NhbGxiYWNrXG4gICk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgYXdhaXQgdGhpcy52ZXJpZnlJZkJvbmRJc0NvcnJlY3QoKTtcbiAgICByZXR1cm4gdGhpcy5odHRwLmRvd25sb2FkRmlsZUJ5UG9zdChcbiAgICAgIHVybFBhdGgsXG4gICAgICBwb3N0VmFsdWVzLFxuICAgICAgYmFzZXBhdGgsXG4gICAgICBjYWxsYmFja1xuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXRkb2NcbiAgICovXG4gIGFzeW5jIGZvbGxvd0FsbFJlZGlyZWN0KFxuICAgIHBhZ2U6IFBhZ2UsXG4gICAgb3B0aW9ucz86IFNpZ2FhUmVxdWVzdE9wdGlvbnNcbiAgKTogUHJvbWlzZTxQYWdlPiB7XG4gICAgYXdhaXQgdGhpcy52ZXJpZnlJZkJvbmRJc0NvcnJlY3QoKTtcbiAgICByZXR1cm4gdGhpcy5odHRwLmZvbGxvd0FsbFJlZGlyZWN0KHBhZ2UsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0ZG9jXG4gICAqL1xuICBjbG9zZVNlc3Npb24oKTogdm9pZCB7XG4gICAgdGhpcy5odHRwLmNsb3NlU2Vzc2lvbigpO1xuICB9XG59XG4iXX0=