"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SigaaHTTPSession = void 0;

require("source-map-support/register");

var _lodash = require("lodash");

var _url = require("url");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @category Internal
 */
class SigaaHTTPSession {
  /**
   */
  constructor(institutionController, cookiesController, pageCache, requestStack) {
    this.institutionController = institutionController;
    this.cookiesController = cookiesController;
    this.pageCache = pageCache;
    this.requestStack = requestStack;

    _defineProperty(this, "requestPromises", []);
  }
  /**
   * @inheritdoc
   */


  async afterDownloadRequest(url, downloadPath, sessionHttpOptions, finalPath) {
    return finalPath;
  }
  /**
   * @inheritdoc
   */


  async beforeDownloadRequest() {
    return null;
  }

  get requestStacks() {
    return this.requestStack.getStacksByDomain(this.institutionController.url.href);
  }

  /**
   * @inheritdoc
   */
  getURL(path) {
    return new _url.URL(path, this.institutionController.url.href);
  }
  /**
   * @inheritdoc
   */


  async afterUnsuccessfulRequest(err, httpOptions, body) {
    const requestPromise = this.findAndRemovePromiseRequest({
      httpOptions,
      body
    });

    if (requestPromise) {
      requestPromise.reject(err);
    }

    throw err;
  }
  /**
   * @inheritdoc
   */


  findAndRemovePromiseRequest(request) {
    const index = this.requestPromises.findIndex(requestPromise => (0, _lodash.isEqual)(request.httpOptions, requestPromise.request.httpOptions) && requestPromise.request.body === request.body);

    if (index !== -1) {
      return this.requestPromises.splice(index, 1)[0];
    }

    return null;
  }
  /**
   * @inheritdoc
   */


  async afterSuccessfulRequest(page) {
    const requestPromise = this.findAndRemovePromiseRequest({
      body: page.requestBody,
      httpOptions: page.requestOptions
    });
    const setCookie = page.headers['set-cookie'];

    if (setCookie) {
      const cookies = typeof setCookie === 'string' ? [setCookie] : setCookie;
      this.cookiesController.storeCookies(page.requestOptions.hostname, cookies);
    }

    if (page.statusCode === 200) {
      if (page.requestBody === undefined || typeof page.requestBody === 'string') this.pageCache.storePage(page);
    }

    if (requestPromise) {
      requestPromise.resolve(page);
    }

    return page;
  }
  /**
   * @inheritdoc
   */


  async afterHTTPOptions(link, httpOptions) {
    const cookie = this.cookiesController.getCookieHeader(link.hostname, link.pathname);

    if (cookie) {
      httpOptions.headers.Cookie = cookie;
    }

    return httpOptions;
  }
  /**
   * @inheritdoc
   */


  async beforeRequest(url, httpOptions, requestBody, options) {
    if (!(options !== null && options !== void 0 && options.noCache)) {
      const page = this.pageCache.getPage(httpOptions, requestBody);
      if (page) return page;
    }

    const stack = !httpOptions.headers.Cookie ? this.requestStacks.noCookie : httpOptions.method === 'POST' ? this.requestStacks.post : this.requestStacks.get;
    const request = {
      httpOptions,
      body: requestBody
    };

    if ((requestBody === undefined || typeof requestBody == 'string') && options !== null && options !== void 0 && options.shareSameRequest) {
      const runningRequest = stack.promises.find(request => request.key.body === requestBody && (0, _lodash.isEqual)(httpOptions, request.key.httpOptions));

      if (runningRequest !== null && runningRequest !== void 0 && runningRequest.promise) {
        return runningRequest.promise;
      }
    }

    await new Promise(awaitResolve => {
      stack.addPromise(request, () => {
        awaitResolve();
        return new Promise((resolve, reject) => {
          this.requestPromises.push({
            request,
            resolve,
            reject
          });
        });
      });
    });
    return null;
  }
  /**
   * @inheritdoc
   */


  close() {
    this.cookiesController.clearCookies();
    this.pageCache.clearCachePage();
  }

}

exports.SigaaHTTPSession = SigaaHTTPSession;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,