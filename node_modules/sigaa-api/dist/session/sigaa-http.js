"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SigaaHTTP = void 0;

require("source-map-support/register");

var path = _interopRequireWildcard(require("path"));

var fs = _interopRequireWildcard(require("fs"));

var _iconvLite = _interopRequireDefault(require("iconv-lite"));

var _https = require("https");

var _zlib = require("zlib");

var _querystring = require("querystring");

var _sigaaPageIfsc = require("./page/sigaa-page-ifsc");

var _sigaaPageUfpb = require("./page/sigaa-page-ufpb");

var _sigaaPageUnb = require("./page/sigaa-page-unb");

var _sigaaPageUffs = require("./page/sigaa-page-uffs");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * HTTP request class
 * @param sigaaSession A instance of SigaaSession
 *
 * @category Internal
 */
class SigaaHTTP {
  constructor(httpSession) {
    this.httpSession = httpSession;
  }
  /**
   * @inheritdoc
   */


  async downloadFileByGet(urlPath, basepath, callback) {
    const url = this.httpSession.getURL(urlPath);
    const httpOptions = this.getRequestBasicOptions('GET', url);
    return this.downloadFile(url, basepath, httpOptions, undefined, callback);
  }
  /**
   * @inheritdoc
   */


  downloadFileByPost(urlPath, postValues, basepath, callback) {
    const url = this.httpSession.getURL(urlPath);
    const {
      httpOptions,
      body
    } = this.encodePostValue(url, postValues);
    return this.downloadFile(url, basepath, httpOptions, body, callback);
  }
  /**
   * @inheritdoc
   */


  async downloadFile(url, basepath, httpOptions, body, callback) {
    const sessionHttpOptions = await this.httpSession.afterHTTPOptions(url, httpOptions);
    const fileStats = await fs.promises.lstat(basepath);

    if (!(fileStats.isDirectory() || fileStats.isFile())) {
      throw new Error('SIGAA: Download basepath not exists.');
    }

    const suspendRequest = await this.httpSession.beforeDownloadRequest(url, basepath, sessionHttpOptions, body, callback);
    if (suspendRequest) return suspendRequest;
    const {
      bodyStream,
      headers,
      statusCode
    } = await this.requestHTTP(httpOptions, body);
    if (statusCode === 302) throw new Error('SIGAA: Download expired.');
    if (statusCode !== 200) throw new Error('SIGAA: Invalid status code at download file page.');
    let filepath;

    if (fileStats.isDirectory()) {
      if (headers['content-disposition']) {
        const filename = headers['content-disposition'].replace(/([\S\s]*?)filename="/gm, '').slice(0, -1);
        filepath = path.join(basepath, filename);
      } else {
        throw new Error('SIGAA: Invalid response at download file page.');
      }
    } else {
      filepath = basepath;
    }

    const file = fs.createWriteStream(filepath);
    bodyStream.pipe(file); // save to file

    if (callback) {
      bodyStream.on('data', () => {
        callback(file.bytesWritten);
      });
    }

    const finalPath = await new Promise((resolve, reject) => {
      file.on('finish', () => {
        file.close(); // close() is sync, call resolve after close completes.

        resolve(filepath);
      });
      bodyStream.on('error', err => {
        file.close();
        fs.promises.unlink(filepath);
        reject(err);
      });
      file.on('error', err => {
        file.close();
        fs.unlinkSync(filepath);
        reject(err);
      });
    });
    return this.httpSession.afterDownloadRequest(url, basepath, sessionHttpOptions, finalPath, body, callback);
  }
  /**
   * @inheritdoc
   */


  closeSession() {
    this.httpSession.close();
  }
  /**
   * Create object Options for https.request
   * @param method HTTP method POST or GET
   * @param link URL of Request
   * @param options
   * @param [options.withoutCookies=true] Disable cookies in headers, default = true
   * @param [options.mobile=false] Use mobile User-Agent
   * @returns The basic options for request
   */


  getRequestBasicOptions(method, link, additionalHeaders, options = {
    mobile: false
  }) {
    const basicOptions = {
      hostname: link.hostname,
      port: 443,
      path: link.pathname + link.search,
      method: method,
      headers: {
        'User-Agent': `SIGAA-Api/1.0 (${options.mobile ? 'Android 7.0; ' : ''}https://github.com/babas175/sigaa-api-versionUFFS)`,
        'Accept-Encoding': 'br, gzip, deflate',
        Accept: '*/*',
        'Cache-Control': 'max-age=0',
        DNT: '1',
        ...additionalHeaders
      }
    };
    return basicOptions;
  }
  /**
   * @inheritdoc
   */


  async postMultipart(path, formData, options) {
    const url = this.httpSession.getURL(path);
    const httpOptions = this.getRequestBasicOptions('POST', url, formData.headers, options);
    const buffer = await this.convertReadebleToBuffer(formData.stream);
    return this.requestPage(url, httpOptions, buffer);
  }
  /**
   * Convert stream.Readable to buffer
   * @param stream readable stream
   */


  convertReadebleToBuffer(stream) {
    const buffers = [];
    return new Promise((resolve, reject) => {
      stream.on('data', data => {
        if (typeof data === 'string') {
          buffers.push(Buffer.from(data));
        } else {
          buffers.push(data);
        }
      });
      stream.on('close', () => {
        const buffer = Buffer.concat(buffers);
        resolve(buffer);
      });
      stream.on('error', err => {
        reject(err);
      });
    });
  }
  /**
   * RFC 3986
   * Uses the UTF-8 code point to code, not the hexadecimal binary
   * @param str
   */


  encodeWithRFC3986(str) {
    let escapedString = '';
    const unreservedCharacters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.~';

    for (let i = 0; i < str.length; i++) {
      if (unreservedCharacters.includes(str.charAt(i))) {
        escapedString += str.charAt(i);
      } else {
        const codePoint = str.codePointAt(i);
        if (codePoint === undefined) throw new Error('SIGAA: Invalid code point.');
        codePoint.toString(16).replace(/..?/g, '%$&');
        escapedString += codePoint.toString(16).replace(/..?/g, '%$&');
      }
    }

    return escapedString;
  }
  /**
   * @inheritdoc
   */


  async post(path, postValues, options = {}) {
    const url = this.httpSession.getURL(path);
    const {
      httpOptions,
      body
    } = this.encodePostValue(url, postValues, options);
    return this.requestPage(url, httpOptions, body, options);
  }
  /**
   * Generate body and headers for post request
   * @param postValues
   * @param url
   * @param options
   */


  encodePostValue(url, postValues, options) {
    const body = (0, _querystring.stringify)(postValues, '&', '=', {
      encodeURIComponent: this.encodeWithRFC3986
    });
    const httpOptions = this.getRequestBasicOptions('POST', url, {
      'Content-Type': 'application/x-www-form-urlencoded',
      'Content-Length': Buffer.byteLength(body).toString(10)
    }, options);
    return {
      httpOptions,
      body
    };
  }

  async get(path, options) {
    const url = this.httpSession.getURL(path);
    const httpOptions = this.getRequestBasicOptions('GET', url, undefined, options);
    return this.requestPage(url, httpOptions, undefined, options);
  }
  /**
   * Make a HTTP request for a page
   * @param url url of request
   * @param options http.request options
   * @param [requestBody] body of request
   */


  async requestPage(url, httpOptions, requestBody, options) {
    try {
      const sessionHttpOptions = await this.httpSession.afterHTTPOptions(url, httpOptions, requestBody, options);
      const pageBeforeRequest = await this.httpSession.beforeRequest(url, sessionHttpOptions, requestBody, options);

      if (pageBeforeRequest) {
        return this.httpSession.afterSuccessfulRequest(pageBeforeRequest, options);
      }

      const {
        bodyStream,
        headers,
        statusCode
      } = await this.requestHTTP(httpOptions, requestBody);
      const bodyBuffer = await this.convertReadebleToBuffer(bodyStream);
      const SigaaPageInstitution = {
        IFSC: _sigaaPageIfsc.SigaaPageIFSC,
        UFPB: _sigaaPageUfpb.SigaaPageUFPB,
        UNB: _sigaaPageUnb.SigaaPageUNB,
        UFFS: _sigaaPageUffs.SigaaPageUFFS
      };
      const page = new SigaaPageInstitution[this.httpSession.institutionController.institution]({
        requestOptions: httpOptions,
        body: bodyBuffer.toString(),
        url,
        headers,
        statusCode,
        requestBody
      });
      return this.httpSession.afterSuccessfulRequest(page, options);
    } catch (err) {
      return this.httpSession.afterUnsuccessfulRequest(err, httpOptions, requestBody);
    }
  }
  /**
   * Make a HTTP request
   * @param optionsHTTP http.request options
   * @param [body] body of request
   */


  async requestHTTP(optionsHTTP, body) {
    return new Promise((resolve, reject) => {
      const req = (0, _https.request)(optionsHTTP, response => {
        resolve(this.parserResponse(response));
      });
      req.on('error', err => {
        reject(err);
      });
      if (body) req.write(body);
      req.end();
    });
  }

  parserResponse(response) {
    return new Promise((resolve, reject) => {
      var _response$headers$con;

      let streamDecompressed = undefined;

      switch (response.headers['content-encoding']) {
        case 'br':
          streamDecompressed = (0, _zlib.createBrotliDecompress)();
          response.pipe(streamDecompressed);
          break;

        case 'gzip':
          streamDecompressed = (0, _zlib.createGunzip)();
          response.pipe(streamDecompressed);
          break;

        case 'deflate':
          streamDecompressed = (0, _zlib.createInflate)();
          response.pipe(streamDecompressed);
          break;
      }

      response.on('error', err => {
        if (streamDecompressed) {
          streamDecompressed.end();
        }

        reject(err);
      });
      response.on('close', () => {
        if (streamDecompressed) {
          streamDecompressed.end();
        }
      });

      if (Array.isArray(response.headers.location)) {
        response.headers.location = response.headers.location[0];
      }

      const contentTypeEncoding = (_response$headers$con = response.headers['content-type']) === null || _response$headers$con === void 0 ? void 0 : _response$headers$con.match(/charset=[^;]+/);
      let bodyStream = streamDecompressed || response;
      let iconvStream = undefined;

      if (contentTypeEncoding) {
        const encoding = contentTypeEncoding[0].replace(/^charset=/, '');
        iconvStream = _iconvLite.default.decodeStream(encoding);
        bodyStream = bodyStream.pipe(iconvStream);
      }

      resolve({
        bodyStream,
        headers: response.headers,
        statusCode: response.statusCode
      });
    });
  }

  async followAllRedirect(page, options) {
    while (page.headers.location) {
      page = await this.get(page.headers.location, options);
    }

    return page;
  }

}

exports.SigaaHTTP = SigaaHTTP;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,