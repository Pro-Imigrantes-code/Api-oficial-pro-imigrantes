/// <reference types="node" />
/// <reference types="cheerio" />
import { URL } from 'url';
import * as http from 'http';
import { HTTPMethod } from 'src/sigaa-types';
import { HTTPRequestOptions } from './sigaa-http';
import { IFSCPage, SigaaPageIFSC } from './page/sigaa-page-ifsc';
import { SigaaPageUFPB, UFPBPage } from './page/sigaa-page-ufpb';
import { SigaaPageUNB, UNBPage } from './page/sigaa-page-unb';
import { SigaaPageUFFS, UFFSPage } from './page/sigaa-page-uffs';
/**
 * @category Internal
 */
export interface SigaaPageConstructor {
    requestBody?: string | Buffer;
    body: string;
    requestOptions: HTTPRequestOptions;
    url: URL;
    headers: http.IncomingHttpHeaders;
    statusCode: number;
}
/**
 * Represents an html form.
 * @category Internal
 */
export interface SigaaForm {
    /**
     * The URL that should be used to submit this form.
     */
    action: URL;
    /**
     * List of form fields.
     */
    postValues: Record<string, string>;
}
/**
 * @category Internal
 */
export interface CommonPage {
    /**
     * @param method Page HTTP request method. ex: POST, GET.
     */
    readonly method: HTTPMethod;
    /**
     * @param statusCode HTTP status code,
     */
    readonly statusCode: number;
    /**
     * @param url Page URL
     */
    readonly url: URL;
    /**
     * @param requestHeaders Page HTTP request headers.
     */
    readonly requestHeaders: Record<string, string>;
    /**
     * @param headers The page HTTP response headers.
     */
    readonly headers: Record<string, string[] | string | undefined>;
    /**
     *
     * @param body Response page body.
     */
    readonly body: string;
    /**
     *
     * @param bodyDecoded Page body with HTML encoded characters replaced.
     */
    readonly bodyDecoded: string;
    /**
     *
     * @param modifiedAt Timestamp of the last request using the page's viewState
     */
    modifiedAt: number;
    /**
     * @param viewState Page viewState is the value of the forms 'javax.faces.ViewState' field.
     */
    readonly viewState?: string;
    /**
     * Cheerio page.
     */
    readonly $: cheerio.Root;
    /**
     * Page request http options.
     *
     * This is the object that was passed to the node to make the request.
     */
    readonly requestOptions: HTTPRequestOptions;
    /**
     * Only if request method is POST.
     */
    readonly requestBody?: string | Buffer;
}
export declare type Page = CommonPage & (IFSCPage | UFPBPage | UNBPage | UFFSPage);
export declare type SigaaPage = CommonSigaaPage & (SigaaPageIFSC | SigaaPageUFPB | SigaaPageUNB | SigaaPageUFFS);
/**
 * Response page of sigaa.
 * @category Internal
 */
export declare abstract class CommonSigaaPage implements CommonPage {
    constructor(options: SigaaPageConstructor);
    /**
     * @inheritdoc
     */
    readonly requestOptions: HTTPRequestOptions;
    /**
     * @inheritdoc
     */
    readonly requestBody?: string | Buffer;
    /**
     * @inheritdoc
     */
    readonly statusCode: number;
    /**
     * @inheritdoc
     */
    readonly url: URL;
    /**
     * @inheritdoc
     */
    readonly headers: Record<string, string[] | string | undefined>;
    /**
     * @inheritdoc
     */
    readonly body: string;
    /**
     * @inheritdoc
     */
    modifiedAt: number;
    /**
     * Current cheerio instance.
     */
    private _$?;
    /**
     * current page view state.
     **/
    private _viewState?;
    /**
     * Page body with HTML encoded characters replaced.
     */
    private _bodyDecoded?;
    /**
     * HTTP request method that originated page.
     **/
    get method(): HTTPMethod;
    /**
     * @inheritdoc
     */
    get bodyDecoded(): string;
    get $(): cheerio.Root;
    get requestHeaders(): Record<string, string>;
    /**
     * Verify if session is expired
     */
    private checkPageStatusCodeAndExpired;
    /**
     * Page viewstate
     */
    get viewState(): string | undefined;
}
