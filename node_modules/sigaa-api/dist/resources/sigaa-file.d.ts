import { HTTP, ProgressCallback } from '..\session/sigaa-http';
import { SigaaForm } from '..\session/sigaa-page';
import { UpdatableResourceData } from './sigaa-resource-manager';
import { AbstractUpdatableResource, UpdatableResource, UpdatableResourceCallback } from './updatable-resource';
/**
 * @category Internal
 */
interface FileDataKey extends UpdatableResourceData {
    id: string;
    key: string;
    title: string;
    description: string;
}
/**
 * @category Internal
 */
interface FileDataForm extends UpdatableResourceData {
    form: SigaaForm;
    id: string;
    title: string;
    description: string;
}
/**
 * @category Internal
 */
export declare type FileData = FileDataForm | FileDataKey;
/**
 * @category Public
 */
export interface File extends UpdatableResource<FileData> {
    readonly type: 'file';
    /**
     * Label in SIGAA.
     */
    readonly title?: string;
    /**
     * Is a key to download a file, this is a security feature of SIGAA.
     */
    readonly key?: string;
    /**
     *Description in the sigaa
     */
    readonly description?: string;
    /**
     * Download the file
     * @param destpath path to save file
     * @param callback callback to view download progress
     * @retuns Promise with the path where the file was saved.
     */
    download(destpath: string, callback?: ProgressCallback): Promise<string>;
}
/**
 * Class to manager file
 * @category Internal
 */
export declare class SigaaFile extends AbstractUpdatableResource implements File {
    private http;
    /**
     * There are two ways to create the class
     * the first is used the file's id and key
     * the second is used the file form
     *
     * @param options
     * @param sigaaSession
     */
    constructor(http: HTTP, options: FileData, updater?: UpdatableResourceCallback);
    readonly type = "file";
    private form?;
    private _title?;
    private _key?;
    private _id;
    private _description?;
    update(options: FileData): void;
    get title(): string | undefined;
    get key(): string | undefined;
    get description(): string | undefined;
    get id(): string;
    download(basepath: string, callback?: ProgressCallback, retry?: boolean): Promise<string>;
}
export {};
