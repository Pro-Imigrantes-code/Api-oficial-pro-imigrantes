import { UpdatableResource } from './/updatable-resource';
/**
 * @category Internal
 */
export interface UpdatableResourceData {
    instanceIndentifier: string;
}
/**
 * @category Internal
 */
export declare class ResourceManager<T extends UpdatableResource<U>, U extends UpdatableResourceData> implements ResourceManager<T, U> {
    private instanceConstructor;
    constructor(instanceConstructor: (options: U) => T);
    /**
     * Current instances.
     */
    private _instances;
    /**
     * Closes and removes the instance if not in idsToKeep.
     * @param idsToKeep array with ids to keep E.g. ["1234", "4321"]
     */
    keepOnly(idsToKeep: string[]): T[];
    /**
     * @inheritdoc
     */
    get instances(): T[];
    /**
     * Update instance with new information
     * If there is an instance with the instanceIndentifier equal to
     * options.instanceIndentifier, the update method will be called with
     * instanceOptions.
     * E.g. instance.update(options.instanceOptions)
     * or create new instance with constructor.
     * @param options Object with new informations
     * @return return the instance updated/created
     */
    upsert(options: U): T;
    close(): void;
}
