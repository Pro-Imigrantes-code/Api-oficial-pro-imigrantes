"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SigaaFile = void 0;

require("source-map-support/register");

var _updatableResource = require("./updatable-resource");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Class to manager file
 * @category Internal
 */
class SigaaFile extends _updatableResource.AbstractUpdatableResource {
  /**
   * There are two ways to create the class
   * the first is used the file's id and key
   * the second is used the file form
   *
   * @param options
   * @param sigaaSession
   */
  constructor(http, options, updater) {
    super(options.instanceIndentifier, updater);
    this.http = http;

    _defineProperty(this, "type", 'file');

    _defineProperty(this, "form", void 0);

    _defineProperty(this, "_title", void 0);

    _defineProperty(this, "_key", void 0);

    _defineProperty(this, "_id", void 0);

    _defineProperty(this, "_description", void 0);

    this.update(options);
  }

  update(options) {
    this._title = options.title;
    this._description = options.description;

    if (options.form !== undefined) {
      this.form = options.form;
      this._id = this.form.postValues.id;
      this._key = this.form.postValues.key;
    } else if (options.id !== undefined && options.key !== undefined) {
      this._id = options.id;
      this._key = options.key;
    } else {
      throw new Error('SIGAA: Invalid FileData.');
    }

    this.isClosed = false;
  }

  get title() {
    this.checkIfItWasClosed();
    return this._title;
  }

  get key() {
    this.checkIfItWasClosed();
    return this._key;
  }

  get description() {
    this.checkIfItWasClosed();
    return this._description;
  }

  get id() {
    this.checkIfItWasClosed();
    return this._id;
  }

  async download(basepath, callback, retry = true) {
    this.checkIfItWasClosed();

    if (this.form) {
      return this.http.downloadFileByPost(this.form.action.href, this.form.postValues, basepath, callback).catch(async err => {
        this.form = undefined;
        await this.updateInstance();
        if (retry) return this.download(basepath, callback, false);else throw err;
      });
    } else if (this.key != null) {
      const fileDownloadPath = `/sigaa/verFoto?idArquivo=${this.id}&key=${this.key}`;
      return this.http.downloadFileByGet(fileDownloadPath, basepath, callback).catch(err => {
        if (retry) return this.download(basepath, callback, false);else throw err;
      });
    }

    throw new Error('SIGAA: Could not download the file because the key is missing.');
  }

}

exports.SigaaFile = SigaaFile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,