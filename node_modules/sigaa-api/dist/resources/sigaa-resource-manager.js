"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResourceManager = void 0;

require("source-map-support/register");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @category Internal
 */
class ResourceManager {
  constructor(instanceConstructor) {
    this.instanceConstructor = instanceConstructor;

    _defineProperty(this, "_instances", []);
  }
  /**
   * Current instances.
   */


  /**
   * Closes and removes the instance if not in idsToKeep.
   * @param idsToKeep array with ids to keep E.g. ["1234", "4321"]
   */
  keepOnly(idsToKeep) {
    this._instances = this._instances.filter(instance => {
      try {
        if (idsToKeep.includes(instance._instanceIndentifier)) {
          return true;
        } else {
          instance.close();
          return false;
        }
      } catch (err) {
        return false;
      }
    });
    return this._instances;
  }
  /**
   * @inheritdoc
   */


  get instances() {
    return this._instances;
  }
  /**
   * Update instance with new information
   * If there is an instance with the instanceIndentifier equal to
   * options.instanceIndentifier, the update method will be called with
   * instanceOptions.
   * E.g. instance.update(options.instanceOptions)
   * or create new instance with constructor.
   * @param options Object with new informations
   * @return return the instance updated/created
   */


  upsert(options) {
    const id = options.instanceIndentifier;

    const instance = this._instances.find(classItem => id === classItem._instanceIndentifier);

    if (!instance) {
      const newInstance = this.instanceConstructor(options);

      this._instances.push(newInstance);

      return newInstance;
    } else {
      instance.update(options);
      return instance;
    }
  }

  close() {
    for (const instance of this.instances) {
      instance.close();
    }

    this._instances = [];
  }

}

exports.ResourceManager = ResourceManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXNvdXJjZXMvc2lnYWEtcmVzb3VyY2UtbWFuYWdlci50cyJdLCJuYW1lcyI6WyJSZXNvdXJjZU1hbmFnZXIiLCJjb25zdHJ1Y3RvciIsImluc3RhbmNlQ29uc3RydWN0b3IiLCJrZWVwT25seSIsImlkc1RvS2VlcCIsIl9pbnN0YW5jZXMiLCJmaWx0ZXIiLCJpbnN0YW5jZSIsImluY2x1ZGVzIiwiX2luc3RhbmNlSW5kZW50aWZpZXIiLCJjbG9zZSIsImVyciIsImluc3RhbmNlcyIsInVwc2VydCIsIm9wdGlvbnMiLCJpZCIsImluc3RhbmNlSW5kZW50aWZpZXIiLCJmaW5kIiwiY2xhc3NJdGVtIiwibmV3SW5zdGFuY2UiLCJwdXNoIiwidXBkYXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQVNBO0FBQ0E7QUFDQTtBQUNPLE1BQU1BLGVBQU4sQ0FHNEI7QUFDakNDLEVBQUFBLFdBQVcsQ0FBU0MsbUJBQVQsRUFBaUQ7QUFBQSxTQUF4Q0EsbUJBQXdDLEdBQXhDQSxtQkFBd0M7O0FBQUEsd0NBS2xDLEVBTGtDO0FBQUU7QUFFOUQ7QUFDRjtBQUNBOzs7QUFHRTtBQUNGO0FBQ0E7QUFDQTtBQUNFQyxFQUFBQSxRQUFRLENBQUNDLFNBQUQsRUFBMkI7QUFDakMsU0FBS0MsVUFBTCxHQUFrQixLQUFLQSxVQUFMLENBQWdCQyxNQUFoQixDQUF3QkMsUUFBRCxJQUFjO0FBQ3JELFVBQUk7QUFDRixZQUFJSCxTQUFTLENBQUNJLFFBQVYsQ0FBbUJELFFBQVEsQ0FBQ0Usb0JBQTVCLENBQUosRUFBdUQ7QUFDckQsaUJBQU8sSUFBUDtBQUNELFNBRkQsTUFFTztBQUNMRixVQUFBQSxRQUFRLENBQUNHLEtBQVQ7QUFDQSxpQkFBTyxLQUFQO0FBQ0Q7QUFDRixPQVBELENBT0UsT0FBT0MsR0FBUCxFQUFZO0FBQ1osZUFBTyxLQUFQO0FBQ0Q7QUFDRixLQVhpQixDQUFsQjtBQVlBLFdBQU8sS0FBS04sVUFBWjtBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7QUFDZSxNQUFUTyxTQUFTLEdBQVE7QUFDbkIsV0FBTyxLQUFLUCxVQUFaO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0VRLEVBQUFBLE1BQU0sQ0FBQ0MsT0FBRCxFQUFnQjtBQUNwQixVQUFNQyxFQUFFLEdBQUdELE9BQU8sQ0FBQ0UsbUJBQW5COztBQUNBLFVBQU1ULFFBQVEsR0FBRyxLQUFLRixVQUFMLENBQWdCWSxJQUFoQixDQUNkQyxTQUFELElBQWVILEVBQUUsS0FBS0csU0FBUyxDQUFDVCxvQkFEakIsQ0FBakI7O0FBSUEsUUFBSSxDQUFDRixRQUFMLEVBQWU7QUFDYixZQUFNWSxXQUFXLEdBQUcsS0FBS2pCLG1CQUFMLENBQXlCWSxPQUF6QixDQUFwQjs7QUFDQSxXQUFLVCxVQUFMLENBQWdCZSxJQUFoQixDQUFxQkQsV0FBckI7O0FBQ0EsYUFBT0EsV0FBUDtBQUNELEtBSkQsTUFJTztBQUNMWixNQUFBQSxRQUFRLENBQUNjLE1BQVQsQ0FBZ0JQLE9BQWhCO0FBQ0EsYUFBT1AsUUFBUDtBQUNEO0FBQ0Y7O0FBRURHLEVBQUFBLEtBQUssR0FBUztBQUNaLFNBQUssTUFBTUgsUUFBWCxJQUF1QixLQUFLSyxTQUE1QixFQUF1QztBQUNyQ0wsTUFBQUEsUUFBUSxDQUFDRyxLQUFUO0FBQ0Q7O0FBQ0QsU0FBS0wsVUFBTCxHQUFrQixFQUFsQjtBQUNEOztBQWxFZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVcGRhdGFibGVSZXNvdXJjZSB9IGZyb20gJ0ByZXNvdXJjZXMvdXBkYXRhYmxlLXJlc291cmNlJztcblxuLyoqXG4gKiBAY2F0ZWdvcnkgSW50ZXJuYWxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBVcGRhdGFibGVSZXNvdXJjZURhdGEge1xuICBpbnN0YW5jZUluZGVudGlmaWVyOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQGNhdGVnb3J5IEludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBSZXNvdXJjZU1hbmFnZXI8XG4gIFQgZXh0ZW5kcyBVcGRhdGFibGVSZXNvdXJjZTxVPixcbiAgVSBleHRlbmRzIFVwZGF0YWJsZVJlc291cmNlRGF0YVxuPiBpbXBsZW1lbnRzIFJlc291cmNlTWFuYWdlcjxULCBVPiB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5zdGFuY2VDb25zdHJ1Y3RvcjogKG9wdGlvbnM6IFUpID0+IFQpIHt9XG5cbiAgLyoqXG4gICAqIEN1cnJlbnQgaW5zdGFuY2VzLlxuICAgKi9cbiAgcHJpdmF0ZSBfaW5zdGFuY2VzOiBUW10gPSBbXTtcblxuICAvKipcbiAgICogQ2xvc2VzIGFuZCByZW1vdmVzIHRoZSBpbnN0YW5jZSBpZiBub3QgaW4gaWRzVG9LZWVwLlxuICAgKiBAcGFyYW0gaWRzVG9LZWVwIGFycmF5IHdpdGggaWRzIHRvIGtlZXAgRS5nLiBbXCIxMjM0XCIsIFwiNDMyMVwiXVxuICAgKi9cbiAga2VlcE9ubHkoaWRzVG9LZWVwOiBzdHJpbmdbXSk6IFRbXSB7XG4gICAgdGhpcy5faW5zdGFuY2VzID0gdGhpcy5faW5zdGFuY2VzLmZpbHRlcigoaW5zdGFuY2UpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChpZHNUb0tlZXAuaW5jbHVkZXMoaW5zdGFuY2UuX2luc3RhbmNlSW5kZW50aWZpZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5zdGFuY2UuY2xvc2UoKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdGRvY1xuICAgKi9cbiAgZ2V0IGluc3RhbmNlcygpOiBUW10ge1xuICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZXM7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGluc3RhbmNlIHdpdGggbmV3IGluZm9ybWF0aW9uXG4gICAqIElmIHRoZXJlIGlzIGFuIGluc3RhbmNlIHdpdGggdGhlIGluc3RhbmNlSW5kZW50aWZpZXIgZXF1YWwgdG9cbiAgICogb3B0aW9ucy5pbnN0YW5jZUluZGVudGlmaWVyLCB0aGUgdXBkYXRlIG1ldGhvZCB3aWxsIGJlIGNhbGxlZCB3aXRoXG4gICAqIGluc3RhbmNlT3B0aW9ucy5cbiAgICogRS5nLiBpbnN0YW5jZS51cGRhdGUob3B0aW9ucy5pbnN0YW5jZU9wdGlvbnMpXG4gICAqIG9yIGNyZWF0ZSBuZXcgaW5zdGFuY2Ugd2l0aCBjb25zdHJ1Y3Rvci5cbiAgICogQHBhcmFtIG9wdGlvbnMgT2JqZWN0IHdpdGggbmV3IGluZm9ybWF0aW9uc1xuICAgKiBAcmV0dXJuIHJldHVybiB0aGUgaW5zdGFuY2UgdXBkYXRlZC9jcmVhdGVkXG4gICAqL1xuICB1cHNlcnQob3B0aW9uczogVSk6IFQge1xuICAgIGNvbnN0IGlkID0gb3B0aW9ucy5pbnN0YW5jZUluZGVudGlmaWVyO1xuICAgIGNvbnN0IGluc3RhbmNlID0gdGhpcy5faW5zdGFuY2VzLmZpbmQoXG4gICAgICAoY2xhc3NJdGVtKSA9PiBpZCA9PT0gY2xhc3NJdGVtLl9pbnN0YW5jZUluZGVudGlmaWVyXG4gICAgKTtcblxuICAgIGlmICghaW5zdGFuY2UpIHtcbiAgICAgIGNvbnN0IG5ld0luc3RhbmNlID0gdGhpcy5pbnN0YW5jZUNvbnN0cnVjdG9yKG9wdGlvbnMpO1xuICAgICAgdGhpcy5faW5zdGFuY2VzLnB1c2gobmV3SW5zdGFuY2UpO1xuICAgICAgcmV0dXJuIG5ld0luc3RhbmNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnN0YW5jZS51cGRhdGUob3B0aW9ucyk7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfVxuICB9XG5cbiAgY2xvc2UoKTogdm9pZCB7XG4gICAgZm9yIChjb25zdCBpbnN0YW5jZSBvZiB0aGlzLmluc3RhbmNlcykge1xuICAgICAgaW5zdGFuY2UuY2xvc2UoKTtcbiAgICB9XG4gICAgdGhpcy5faW5zdGFuY2VzID0gW107XG4gIH1cbn1cbiJdfQ==